<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE coverage SYSTEM "http://cobertura.sourceforge.net/xml/coverage-04.dtd">
<coverage line-rate="0.012930660418293848" branch-rate="0.006076141650052217" lines-covered="149" lines-valid="11523" branches-covered="64" branches-valid="10533" complexity="12454" version="0" timestamp="1644730211">
  <sources />
  <packages>
    <package name="AltCover.Monitor" line-rate="0" branch-rate="0" complexity="30">
      <classes>
        <class name="AltCover.Carrier" filename="/_/AltCover.Monitor/Monitor.cs" line-rate="1" branch-rate="1" complexity="2">
          <methods>
            <method name="Add" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Dispose" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Dispose" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="AltCover.Monitor" filename="/_/AltCover.Monitor/Monitor.cs" line-rate="1" branch-rate="1" complexity="9">
          <methods>
            <method name="TryGetPointTotals" signature="(AltCover.PointCount&amp;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CountVisitPoints" signature="(System.Xml.XmlDocument)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TryGetVisitTotals" signature="(AltCover.PointCount&amp;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="TypeInstance" signature="()" line-rate="1" branch-rate="1" complexity="8">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
      </classes>
    </package>
    <package name="FSharp.Core" line-rate="0.013324930224182947" branch-rate="0.006181783058050807" complexity="12283">
      <classes>
        <class name="Microsoft.FSharp.Collections.Array2DModule" filename="F:\workspace\_work\1\s\src\fsharp\FSharp.Core\array2.fs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Length1" signature="(T[0...,0...])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Length2" signature="(T[0...,0...])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Base1" signature="(T[0...,0...])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Base2" signature="(T[0...,0...])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Get" signature="(T[0...,0...],System.Int32,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Set" signature="(T[0...,0...],System.Int32,System.Int32,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ZeroCreate" signature="(System.Int32,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ZeroCreateBased" signature="(System.Int32,System.Int32,System.Int32,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CreateBased" signature="(System.Int32,System.Int32,System.Int32,System.Int32,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="InitializeBased" signature="(System.Int32,System.Int32,System.Int32,System.Int32,Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Int32,Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Int32,T&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Create" signature="(System.Int32,System.Int32,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Initialize" signature="(System.Int32,System.Int32,Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Int32,Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Int32,T&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Iterate" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,Microsoft.FSharp.Core.Unit&gt;,T[0...,0...])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IterateIndexed" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Int32,Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Int32,Microsoft.FSharp.Core.FSharpFunc`2&lt;T,Microsoft.FSharp.Core.Unit&gt;&gt;&gt;,T[0...,0...])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Map" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,TResult&gt;,T[0...,0...])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MapIndexed" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Int32,Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Int32,Microsoft.FSharp.Core.FSharpFunc`2&lt;T,TResult&gt;&gt;&gt;,T[0...,0...])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Copy" signature="(T[0...,0...])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Rebase" signature="(T[0...,0...])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CopyTo" signature="(T[0...,0...],System.Int32,System.Int32,T[0...,0...],System.Int32,System.Int32,System.Int32,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Int32,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Int32,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Int32,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Int32,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Collections.Array3DModule" filename="F:\workspace\_work\1\s\src\fsharp\FSharp.Core\array3.fs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Length1" signature="(T[0...,0...,0...])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Length2" signature="(T[0...,0...,0...])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Length3" signature="(T[0...,0...,0...])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Get" signature="(T[0...,0...,0...],System.Int32,System.Int32,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Set" signature="(T[0...,0...,0...],System.Int32,System.Int32,System.Int32,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ZeroCreate" signature="(System.Int32,System.Int32,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Create" signature="(System.Int32,System.Int32,System.Int32,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Initialize" signature="(System.Int32,System.Int32,System.Int32,Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Int32,Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Int32,Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Int32,T&gt;&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Iterate" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,Microsoft.FSharp.Core.Unit&gt;,T[0...,0...,0...])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Map" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,TResult&gt;,T[0...,0...,0...])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IterateIndexed" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Int32,Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Int32,Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Int32,Microsoft.FSharp.Core.FSharpFunc`2&lt;T,Microsoft.FSharp.Core.Unit&gt;&gt;&gt;&gt;,T[0...,0...,0...])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MapIndexed" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Int32,Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Int32,Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Int32,Microsoft.FSharp.Core.FSharpFunc`2&lt;T,TResult&gt;&gt;&gt;&gt;,T[0...,0...,0...])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Collections.Array4DModule" filename="F:\workspace\_work\1\s\src\fsharp\FSharp.Core\array3.fs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Length1" signature="(T[0...,0...,0...,0...])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Length2" signature="(T[0...,0...,0...,0...])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Length3" signature="(T[0...,0...,0...,0...])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Length4" signature="(T[0...,0...,0...,0...])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ZeroCreate" signature="(System.Int32,System.Int32,System.Int32,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Create" signature="(System.Int32,System.Int32,System.Int32,System.Int32,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Initialize" signature="(System.Int32,System.Int32,System.Int32,System.Int32,Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Int32,Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Int32,Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Int32,Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Int32,T&gt;&gt;&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Get" signature="(T[0...,0...,0...,0...],System.Int32,System.Int32,System.Int32,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Set" signature="(T[0...,0...,0...,0...],System.Int32,System.Int32,System.Int32,System.Int32,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Collections.ArrayModule" filename="F:\workspace\_work\1\s\src\fsharp\FSharp.Core\array.fs" line-rate="1" branch-rate="1" complexity="3">
          <methods>
            <method name="Length" signature="(T[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Last" signature="(T[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TryLast" signature="(T[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Initialize" signature="(System.Int32,Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Int32,T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ZeroCreate" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Create" signature="(System.Int32,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TryHead" signature="(T[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsEmpty" signature="(T[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Tail" signature="(T[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Empty" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="CopyTo" signature="(T[],System.Int32,T[],System.Int32,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="concatArrays" signature="(T[][])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Concat" signature="(System.Collections.Generic.IEnumerable`1&lt;T[]&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Replicate" signature="(System.Int32,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Collect" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,TResult[]&gt;,T[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="splitAt$cont@128" signature="(System.Int32,T[],Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SplitAt" signature="(System.Int32,T[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Take" signature="(System.Int32,T[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TakeWhile" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.Boolean&gt;,T[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="countByValueType" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,TKey&gt;,T[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="countByRefType" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,TKey&gt;,T[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CountBy" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,TKey&gt;,T[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Append" signature="(T[],T[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Head" signature="(T[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Copy" signature="(T[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToList" signature="(T[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="OfList" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Indexed" signature="(T[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Iterate" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,Microsoft.FSharp.Core.Unit&gt;,T[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Distinct" signature="(T[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Map" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,TResult&gt;,T[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Iterate2" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T1,Microsoft.FSharp.Core.FSharpFunc`2&lt;T2,Microsoft.FSharp.Core.Unit&gt;&gt;,T1[],T2[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DistinctBy" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,TKey&gt;,T[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Map2" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T1,Microsoft.FSharp.Core.FSharpFunc`2&lt;T2,TResult&gt;&gt;,T1[],T2[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Map3" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T1,Microsoft.FSharp.Core.FSharpFunc`2&lt;T2,Microsoft.FSharp.Core.FSharpFunc`2&lt;T3,TResult&gt;&gt;&gt;,T1[],T2[],T3[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MapIndexed2" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Int32,Microsoft.FSharp.Core.FSharpFunc`2&lt;T1,Microsoft.FSharp.Core.FSharpFunc`2&lt;T2,TResult&gt;&gt;&gt;,T1[],T2[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IterateIndexed" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Int32,Microsoft.FSharp.Core.FSharpFunc`2&lt;T,Microsoft.FSharp.Core.Unit&gt;&gt;,T[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IterateIndexed2" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Int32,Microsoft.FSharp.Core.FSharpFunc`2&lt;T1,Microsoft.FSharp.Core.FSharpFunc`2&lt;T2,Microsoft.FSharp.Core.Unit&gt;&gt;&gt;,T1[],T2[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MapIndexed" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Int32,Microsoft.FSharp.Core.FSharpFunc`2&lt;T,TResult&gt;&gt;,T[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MapFold" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;TState,Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.Tuple`2&lt;TResult,TState&gt;&gt;&gt;,TState,T[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MapFoldBack" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,Microsoft.FSharp.Core.FSharpFunc`2&lt;TState,System.Tuple`2&lt;TResult,TState&gt;&gt;&gt;,T[],TState)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Exists" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.Boolean&gt;,T[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Contains" signature="(T,T[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Exists2" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T1,Microsoft.FSharp.Core.FSharpFunc`2&lt;T2,System.Boolean&gt;&gt;,T1[],T2[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ForAll" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.Boolean&gt;,T[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ForAll2" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T1,Microsoft.FSharp.Core.FSharpFunc`2&lt;T2,System.Boolean&gt;&gt;,T1[],T2[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="groupByImpl$cont@409" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,TKey&gt;,T[],System.Collections.Generic.IEqualityComparer`1&lt;TKey&gt;,System.Int32,Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="groupByValueType" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,TKey&gt;,T[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="groupByImpl$cont@409-1" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,TKey&gt;,T[],System.Collections.Generic.IEqualityComparer`1&lt;Microsoft.FSharp.Core.CompilerServices.RuntimeHelpers/StructBox`1&lt;TKey&gt;&gt;,System.Int32,Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="groupByRefType" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,TKey&gt;,T[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GroupBy" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,TKey&gt;,T[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="loop@448-37" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,Microsoft.FSharp.Core.FSharpOption`1&lt;TResult&gt;&gt;,T[],System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Pick" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,Microsoft.FSharp.Core.FSharpOption`1&lt;TResult&gt;&gt;,T[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="loop@460-38" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,Microsoft.FSharp.Core.FSharpOption`1&lt;TResult&gt;&gt;,T[],System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TryPick" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,Microsoft.FSharp.Core.FSharpOption`1&lt;TResult&gt;&gt;,T[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Choose" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,Microsoft.FSharp.Core.FSharpOption`1&lt;TResult&gt;&gt;,T[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Filter" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.Boolean&gt;,T[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Where" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.Boolean&gt;,T[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Except" signature="(System.Collections.Generic.IEnumerable`1&lt;T&gt;,T[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Partition" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.Boolean&gt;,T[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="loop@720-39" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.Boolean&gt;,T[],System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Find" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.Boolean&gt;,T[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="loop@728-40" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.Boolean&gt;,T[],System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TryFind" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.Boolean&gt;,T[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Skip" signature="(System.Int32,T[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SkipWhile" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.Boolean&gt;,T[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FindBack" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.Boolean&gt;,T[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TryFindBack" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.Boolean&gt;,T[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FindIndexBack" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.Boolean&gt;,T[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TryFindIndexBack" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.Boolean&gt;,T[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Windowed" signature="(System.Int32,T[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="chunkBySize$cont@796" signature="(System.Int32,T[],System.Int32,Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ChunkBySize" signature="(System.Int32,T[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SplitInto" signature="(System.Int32,T[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Zip" signature="(T1[],T2[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Zip3" signature="(T1[],T2[],T3[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AllPairs" signature="(T1[],T2[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="loop@848-41" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;TState,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Tuple`2&lt;T,TState&gt;&gt;&gt;,System.Collections.Generic.List`1&lt;T&gt;,TState)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Unfold" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;TState,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Tuple`2&lt;T,TState&gt;&gt;&gt;,TState)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Unzip" signature="(System.Tuple`2&lt;T1,T2&gt;[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Unzip3" signature="(System.Tuple`3&lt;T1,T2,T3&gt;[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Reverse" signature="(T[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Fold" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;TState,Microsoft.FSharp.Core.FSharpFunc`2&lt;T,TState&gt;&gt;,TState,T[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FoldBack" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,Microsoft.FSharp.Core.FSharpFunc`2&lt;TState,TState&gt;&gt;,T[],TState)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FoldBack2" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T1,Microsoft.FSharp.Core.FSharpFunc`2&lt;T2,Microsoft.FSharp.Core.FSharpFunc`2&lt;TState,TState&gt;&gt;&gt;,T1[],T2[],TState)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Fold2" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;TState,Microsoft.FSharp.Core.FSharpFunc`2&lt;T1,Microsoft.FSharp.Core.FSharpFunc`2&lt;T2,TState&gt;&gt;&gt;,TState,T1[],T2[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="foldSubRight" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;a,Microsoft.FSharp.Core.FSharpFunc`2&lt;b,b&gt;&gt;,a[],System.Int32,System.Int32,b)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="scanSubLeft" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;a,Microsoft.FSharp.Core.FSharpFunc`2&lt;b,a&gt;&gt;,a,b[],System.Int32,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Scan" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;TState,Microsoft.FSharp.Core.FSharpFunc`2&lt;T,TState&gt;&gt;,TState,T[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ScanBack" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,Microsoft.FSharp.Core.FSharpFunc`2&lt;TState,TState&gt;&gt;,T[],TState)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Singleton" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="initializer@41" signature="(T[],System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Pairwise" signature="(T[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Reduce" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,Microsoft.FSharp.Core.FSharpFunc`2&lt;T,T&gt;&gt;,T[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ReduceBack" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,Microsoft.FSharp.Core.FSharpFunc`2&lt;T,T&gt;&gt;,T[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SortInPlaceWith" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.Int32&gt;&gt;,T[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SortInPlaceBy" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,TKey&gt;,T[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SortInPlace" signature="(T[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SortWith" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.Int32&gt;&gt;,T[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SortBy" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,TKey&gt;,T[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Sort" signature="(T[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SortByDescending" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,TKey&gt;,T[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SortDescending" signature="(T[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToSeq" signature="(T[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="OfSeq" signature="(System.Collections.Generic.IEnumerable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="go@1063-1" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.Boolean&gt;,T[],System.Int32,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FindIndex" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.Boolean&gt;,T[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="go@1075-2" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.Boolean&gt;,T[],System.Int32,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TryFindIndex" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.Boolean&gt;,T[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Permute" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Int32,System.Int32&gt;,T[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Sum" signature="(T[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Sum$W" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;Microsoft.FSharp.Core.Unit,T&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;T,Microsoft.FSharp.Core.FSharpFunc`2&lt;T,T&gt;&gt;,T[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SumBy" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,TResult&gt;,T[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SumBy$W" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;Microsoft.FSharp.Core.Unit,TResult&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;TResult,Microsoft.FSharp.Core.FSharpFunc`2&lt;TResult,TResult&gt;&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;T,TResult&gt;,T[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Min" signature="(T[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MinBy" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,TResult&gt;,T[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Max" signature="(T[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MaxBy" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,TResult&gt;,T[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Average" signature="(T[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Average$W" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Int32,T&gt;&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;Microsoft.FSharp.Core.Unit,T&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;T,Microsoft.FSharp.Core.FSharpFunc`2&lt;T,T&gt;&gt;,T[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AverageBy" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,TResult&gt;,T[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AverageBy$W" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;TResult,Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Int32,TResult&gt;&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;Microsoft.FSharp.Core.Unit,TResult&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;TResult,Microsoft.FSharp.Core.FSharpFunc`2&lt;TResult,TResult&gt;&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;T,TResult&gt;,T[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CompareWith" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.Int32&gt;&gt;,T[],T[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetSubArray" signature="(T[],System.Int32,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Item" signature="(System.Int32,T[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TryItem" signature="(System.Int32,T[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Get" signature="(T[],System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Set" signature="(T[],System.Int32,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Fill" signature="(T[],System.Int32,System.Int32,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExactlyOne" signature="(T[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TryExactlyOne" signature="(T[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="transposeArrays" signature="(T[][])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Transpose" signature="(System.Collections.Generic.IEnumerable`1&lt;T[]&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Truncate" signature="(System.Int32,T[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(T,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(T,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Choose" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,Microsoft.FSharp.Core.FSharpOption`1&lt;TResult&gt;&gt;,T[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Collect" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,TResult[]&gt;,T[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Map" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,TResult&gt;,T[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MapIndexed" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Int32,Microsoft.FSharp.Core.FSharpFunc`2&lt;T,TResult&gt;&gt;,T[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Iterate" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,Microsoft.FSharp.Core.Unit&gt;,T[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IterateIndexed" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Int32,Microsoft.FSharp.Core.FSharpFunc`2&lt;T,Microsoft.FSharp.Core.Unit&gt;&gt;,T[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Initialize" signature="(System.Int32,Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Int32,T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Partition" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.Boolean&gt;,T[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Int32,System.Threading.Tasks.ParallelLoopState,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Int32,System.Threading.Tasks.ParallelLoopState,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="populateMask" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;a,System.Boolean&gt;,a[],System.UInt32[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="createMask" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;a,System.Boolean&gt;,a[],System.UInt32[]&amp;,System.UInt32&amp;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="populateDstViaMask" signature="(a[],System.UInt32[],a[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="filterViaMask" signature="(System.UInt32[],System.UInt32,System.Int32,a[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="filter" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;a,System.Boolean&gt;,a[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Collections.CachedSeq`1" filename="F:\workspace\_work\1\s\src\fsharp\FSharp.Core\seq.fs" line-rate="1" branch-rate="1" complexity="4">
          <methods>
            <method name=".ctor" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit&gt;,System.Collections.Generic.IEnumerable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Clear" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.IDisposable.Dispose" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.Collections.Generic.IEnumerable&lt;'T&gt;.GetEnumerator" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.Collections.IEnumerable.GetEnumerator" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Collections.ComparisonIdentity" filename="F:\workspace\_work\1\s\src\fsharp\FSharp.Core\collections.fs" line-rate="1" branch-rate="1" complexity="2">
          <methods>
            <method name="Structural" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="NonStructural" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="NonStructural$W" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.Boolean&gt;&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;T,Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.Boolean&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FromFunction" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.Int32&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="System.Collections.Generic.IComparer&lt;'T&gt;.Compare" signature="(T,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="System.Collections.Generic.IComparer&lt;'T&gt;.Compare" signature="(T,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Collections.FSharpList`1" filename="F:\workspace\_work\1\s\src\fsharp\FSharp.Core\prim-types.fs" line-rate="1" branch-rate="1" complexity="3">
          <methods>
            <method name="Length" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DebugDisplay" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Head" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Tail" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Item" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToString" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetSlice" signature="(Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetReverseIndex" signature="(System.Int32,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="System.Collections.Generic.IEnumerable&lt;'T&gt;.GetEnumerator" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.Collections.IEnumerable.GetEnumerator" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.Collections.Generic.IReadOnlyCollection&lt;'T&gt;.get_Count" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.Collections.Generic.IReadOnlyList&lt;'T&gt;.get_Item" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Collections.FSharpMap`2" filename="F:\workspace\_work\1\s\src\fsharp\FSharp.Core\map.fs" line-rate="1" branch-rate="1" complexity="21">
          <methods>
            <method name=".ctor" signature="(System.Collections.Generic.IComparer`1&lt;TKey&gt;,Microsoft.FSharp.Collections.MapTree`2&lt;TKey,TValue&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="OnSerializing" signature="(System.Runtime.Serialization.StreamingContext)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="OnDeserialized" signature="(System.Runtime.Serialization.StreamingContext)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Empty" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Create" signature="(System.Collections.Generic.IEnumerable`1&lt;System.Tuple`2&lt;TKey,TValue&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Collections.Generic.IEnumerable`1&lt;System.Tuple`2&lt;TKey,TValue&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Comparer" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Tree" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Add" signature="(TKey,TValue)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Change" signature="(TKey,Microsoft.FSharp.Core.FSharpFunc`2&lt;Microsoft.FSharp.Core.FSharpOption`1&lt;TValue&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;TValue&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Item" signature="(TKey)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TryPick" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;TKey,Microsoft.FSharp.Core.FSharpFunc`2&lt;TValue,Microsoft.FSharp.Core.FSharpOption`1&lt;a&gt;&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Exists" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;TKey,Microsoft.FSharp.Core.FSharpFunc`2&lt;TValue,System.Boolean&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Filter" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;TKey,Microsoft.FSharp.Core.FSharpFunc`2&lt;TValue,System.Boolean&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ForAll" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;TKey,Microsoft.FSharp.Core.FSharpFunc`2&lt;TValue,System.Boolean&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Fold" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;TKey,Microsoft.FSharp.Core.FSharpFunc`2&lt;TValue,Microsoft.FSharp.Core.FSharpFunc`2&lt;a,a&gt;&gt;&gt;,a)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FoldSection" signature="(TKey,TKey,Microsoft.FSharp.Core.FSharpFunc`2&lt;TKey,Microsoft.FSharp.Core.FSharpFunc`2&lt;TValue,Microsoft.FSharp.Core.FSharpFunc`2&lt;z,z&gt;&gt;&gt;,z)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Iterate" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;TKey,Microsoft.FSharp.Core.FSharpFunc`2&lt;TValue,Microsoft.FSharp.Core.Unit&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MapRange" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;TValue,b&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Map" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;TKey,Microsoft.FSharp.Core.FSharpFunc`2&lt;TValue,b&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Partition" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;TKey,Microsoft.FSharp.Core.FSharpFunc`2&lt;TValue,System.Boolean&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Count" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ContainsKey" signature="(TKey)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Remove" signature="(TKey)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TryGetValue" signature="(TKey,TValue&amp;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TryFind" signature="(TKey)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToList" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="ToArray" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="ofList" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;System.Tuple`2&lt;TKey,TValue&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ComputeHashCode" signature="()" line-rate="1" branch-rate="1" complexity="3">
              <lines />
            </method>
            <method name="Equals" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetHashCode" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="ToString" signature="()" line-rate="1" branch-rate="1" complexity="5">
              <lines />
            </method>
            <method name="System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;'Key, 'Value&gt;&gt;.GetEnumerator" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.Collections.IEnumerable.GetEnumerator" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.Collections.Generic.IDictionary&lt;'Key, 'Value&gt;.get_Item" signature="(TKey)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="System.Collections.Generic.IDictionary&lt;'Key, 'Value&gt;.set_Item" signature="(TKey,TValue)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="System.Collections.Generic.IDictionary&lt;'Key, 'Value&gt;.get_Keys" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.Collections.Generic.IDictionary&lt;'Key, 'Value&gt;.get_Values" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.Collections.Generic.IDictionary&lt;'Key, 'Value&gt;.Add" signature="(TKey,TValue)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="System.Collections.Generic.IDictionary&lt;'Key, 'Value&gt;.ContainsKey" signature="(TKey)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="System.Collections.Generic.IDictionary&lt;'Key, 'Value&gt;.TryGetValue" signature="(TKey,TValue&amp;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="System.Collections.Generic.IDictionary&lt;'Key, 'Value&gt;.Remove" signature="(TKey)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;'Key, 'Value&gt;&gt;.Add" signature="(System.Collections.Generic.KeyValuePair`2&lt;TKey,TValue&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;'Key, 'Value&gt;&gt;.Clear" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;'Key, 'Value&gt;&gt;.Remove" signature="(System.Collections.Generic.KeyValuePair`2&lt;TKey,TValue&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;'Key, 'Value&gt;&gt;.CopyTo" signature="(System.Collections.Generic.KeyValuePair`2&lt;TKey,TValue&gt;[],System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;'Key, 'Value&gt;&gt;.get_IsReadOnly" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;'Key, 'Value&gt;&gt;.get_Count" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.IComparable.CompareTo" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="System.Collections.Generic.IReadOnlyCollection&lt;System.Collections.Generic.KeyValuePair&lt;'Key, 'Value&gt;&gt;.get_Count" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.Collections.Generic.IReadOnlyDictionary&lt;'Key, 'Value&gt;.get_Item" signature="(TKey)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="System.Collections.Generic.IReadOnlyDictionary&lt;'Key, 'Value&gt;.get_Keys" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.Collections.Generic.IReadOnlyDictionary&lt;'Key, 'Value&gt;.TryGetValue" signature="(TKey,TValue&amp;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="System.Collections.Generic.IReadOnlyDictionary&lt;'Key, 'Value&gt;.get_Values" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.Collections.Generic.IReadOnlyDictionary&lt;'Key, 'Value&gt;.ContainsKey" signature="(TKey)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Collections.FSharpSet`1" filename="F:\workspace\_work\1\s\src\fsharp\FSharp.Core\set.fs" line-rate="1" branch-rate="1" complexity="17">
          <methods>
            <method name=".ctor" signature="(System.Collections.Generic.IComparer`1&lt;T&gt;,Microsoft.FSharp.Collections.SetTree`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="OnSerializing" signature="(System.Runtime.Serialization.StreamingContext)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="OnDeserialized" signature="(System.Runtime.Serialization.StreamingContext)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Comparer" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Tree" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Empty" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Add" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Remove" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Count" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Contains" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Iterate" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,Microsoft.FSharp.Core.Unit&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Fold" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,Microsoft.FSharp.Core.FSharpFunc`2&lt;a,a&gt;&gt;,a)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Partition" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.Boolean&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Filter" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.Boolean&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Map" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,TResult&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Exists" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.Boolean&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ForAll" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.Boolean&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="op_Subtraction" signature="(Microsoft.FSharp.Collections.FSharpSet`1&lt;T&gt;,Microsoft.FSharp.Collections.FSharpSet`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="op_Addition" signature="(Microsoft.FSharp.Collections.FSharpSet`1&lt;T&gt;,Microsoft.FSharp.Collections.FSharpSet`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Intersection" signature="(Microsoft.FSharp.Collections.FSharpSet`1&lt;T&gt;,Microsoft.FSharp.Collections.FSharpSet`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Union" signature="(System.Collections.Generic.IEnumerable`1&lt;Microsoft.FSharp.Collections.FSharpSet`1&lt;T&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Intersection" signature="(System.Collections.Generic.IEnumerable`1&lt;Microsoft.FSharp.Collections.FSharpSet`1&lt;T&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Equality" signature="(Microsoft.FSharp.Collections.FSharpSet`1&lt;T&gt;,Microsoft.FSharp.Collections.FSharpSet`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Compare" signature="(Microsoft.FSharp.Collections.FSharpSet`1&lt;T&gt;,Microsoft.FSharp.Collections.FSharpSet`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Choose" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MinimumElement" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MaximumElement" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsSubsetOf" signature="(Microsoft.FSharp.Collections.FSharpSet`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsSupersetOf" signature="(Microsoft.FSharp.Collections.FSharpSet`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsProperSubsetOf" signature="(Microsoft.FSharp.Collections.FSharpSet`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsProperSupersetOf" signature="(Microsoft.FSharp.Collections.FSharpSet`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToList" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="ToArray" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="ComputeHashCode" signature="()" line-rate="1" branch-rate="1" complexity="3">
              <lines />
            </method>
            <method name="GetHashCode" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Equals" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Singleton" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Collections.Generic.IEnumerable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Create" signature="(System.Collections.Generic.IEnumerable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FromArray" signature="(T[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToString" signature="()" line-rate="1" branch-rate="1" complexity="5">
              <lines />
            </method>
            <method name="System.IComparable.CompareTo" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="System.Collections.Generic.ICollection&lt;'T&gt;.Add" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="System.Collections.Generic.ICollection&lt;'T&gt;.Clear" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.Collections.Generic.ICollection&lt;'T&gt;.Remove" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="System.Collections.Generic.ICollection&lt;'T&gt;.Contains" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="System.Collections.Generic.ICollection&lt;'T&gt;.CopyTo" signature="(T[],System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="System.Collections.Generic.ICollection&lt;'T&gt;.get_IsReadOnly" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.Collections.Generic.ICollection&lt;'T&gt;.get_Count" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.Collections.Generic.IReadOnlyCollection&lt;'T&gt;.get_Count" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.Collections.Generic.IEnumerable&lt;'T&gt;.GetEnumerator" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.Collections.IEnumerable.GetEnumerator" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Invoke" signature="(a,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Collections.SetTree`1&lt;TResult&gt;,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Collections.FSharpSet`1&lt;T&gt;,Microsoft.FSharp.Collections.FSharpSet`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Collections.FSharpSet`1&lt;T&gt;,Microsoft.FSharp.Collections.FSharpSet`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Collections.Generator" filename="F:\workspace\_work\1\s\src\fsharp\FSharp.Core\seq.fs" line-rate="1" branch-rate="1" complexity="10">
          <methods>
            <method name="disposeG" signature="(Microsoft.FSharp.Collections.Generator/Generator`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="appG" signature="(Microsoft.FSharp.Collections.Generator/Generator`1&lt;a&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="EnumerateFromGenerator" signature="(Microsoft.FSharp.Collections.Generator/Generator`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GenerateFromEnumerator" signature="(System.Collections.Generic.IEnumerator`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(Microsoft.FSharp.Collections.Generator/Generator`1&lt;T&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Collections.Generator/Generator`1&lt;T&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Generator" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Cont" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Bind" signature="(Microsoft.FSharp.Collections.Generator/Generator`1&lt;T&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Collections.Generator/Generator`1&lt;T&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Microsoft.FSharp.Collections.Generator.Generator&lt;'T&gt;.get_Apply" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Microsoft.FSharp.Collections.Generator.Generator&lt;'T&gt;.get_Disposer" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(Microsoft.FSharp.Collections.Generator/Generator`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Generator" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="System.Collections.Generic.IEnumerator&lt;'T&gt;.get_Current" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="System.Collections.IEnumerator.get_Current" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.Collections.IEnumerator.MoveNext" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="System.Collections.IEnumerator.Reset" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.IDisposable.Dispose" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Collections.Generic.IEnumerator`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Enumerator" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Microsoft.FSharp.Collections.Generator.Generator&lt;'T&gt;.get_Apply" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Microsoft.FSharp.Collections.Generator.Generator&lt;'T&gt;.get_Disposer" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Collections.HashIdentity" filename="F:\workspace\_work\1\s\src\fsharp\FSharp.Core\collections.fs" line-rate="1" branch-rate="1" complexity="3">
          <methods>
            <method name="Structural" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="LimitedStructural" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Reference" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="NonStructural" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="NonStructural$W" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.Boolean&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FromFunctions" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.Int32&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;T,Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.Boolean&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="System.Collections.Generic.IEqualityComparer&lt;'T&gt;.GetHashCode" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="System.Collections.Generic.IEqualityComparer&lt;'T&gt;.Equals" signature="(T,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="System.Collections.Generic.IEqualityComparer&lt;'T&gt;.GetHashCode" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="System.Collections.Generic.IEqualityComparer&lt;'T&gt;.Equals" signature="(T,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="System.Collections.Generic.IEqualityComparer&lt;'T&gt;.GetHashCode" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="System.Collections.Generic.IEqualityComparer&lt;'T&gt;.Equals" signature="(T,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="System.Collections.Generic.IEqualityComparer&lt;'T&gt;.GetHashCode" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="System.Collections.Generic.IEqualityComparer&lt;'T&gt;.Equals" signature="(T,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Collections.IEnumerator" filename="F:\workspace\_work\1\s\src\fsharp\FSharp.Core\seqcore.fs" line-rate="1" branch-rate="1" complexity="40">
          <methods>
            <method name="noReset" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="notStarted" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="alreadyFinished" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="check" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="dispose" signature="(System.IDisposable)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="cast" signature="(System.Collections.IEnumerator)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Empty" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="action@4737" signature="(Microsoft.FSharp.Core.FSharpRef`1&lt;Microsoft.FSharp.Core.FSharpOption`1&lt;a&gt;&gt;,Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="finish@80" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;a,Microsoft.FSharp.Core.Unit&gt;,Microsoft.FSharp.Core.FSharpRef`1&lt;Microsoft.FSharp.Core.FSharpOption`1&lt;a&gt;&gt;,Microsoft.FSharp.Core.FSharpRef`1&lt;Microsoft.FSharp.Core.FSharpOption`1&lt;TResult&gt;&gt;,Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="start@77" signature="(Microsoft.FSharp.Core.FSharpRef`1&lt;System.Boolean&gt;,Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="getCurr@74" signature="(Microsoft.FSharp.Core.FSharpRef`1&lt;System.Boolean&gt;,Microsoft.FSharp.Core.FSharpRef`1&lt;Microsoft.FSharp.Core.FSharpOption`1&lt;TResult&gt;&gt;,Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="generateWhileSome" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;Microsoft.FSharp.Core.Unit,a&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;a,Microsoft.FSharp.Core.FSharpOption`1&lt;TResult&gt;&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;a,Microsoft.FSharp.Core.Unit&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Singleton" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="EnumerateThenFinally" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit&gt;,System.Collections.Generic.IEnumerator`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="checkNonNull" signature="(System.String,a)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="mkSeq" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;Microsoft.FSharp.Core.Unit,System.Collections.Generic.IEnumerator`1&lt;TResult&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="System.Collections.Generic.IEnumerator&lt;'T&gt;.get_Current" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.Collections.IEnumerator.get_Current" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.Collections.IEnumerator.MoveNext" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.Collections.IEnumerator.Reset" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.IDisposable.Dispose" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="System.Collections.Generic.IEnumerator&lt;'T&gt;.get_Current" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="System.Collections.IEnumerator.get_Current" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="System.Collections.IEnumerator.MoveNext" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="System.Collections.IEnumerator.Reset" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.IDisposable.Dispose" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.Collections.Generic.IEnumerable&lt;'T&gt;.GetEnumerator" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.Collections.IEnumerable.GetEnumerator" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.Collections.Generic.IEnumerator&lt;'U&gt;.get_Current" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.Collections.IEnumerator.get_Current" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.Collections.IEnumerator.MoveNext" signature="()" line-rate="1" branch-rate="1" complexity="3">
              <lines />
            </method>
            <method name="System.Collections.IEnumerator.Reset" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.IDisposable.Dispose" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name=".ctor" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="System.Collections.Generic.IEnumerator&lt;'T&gt;.get_Current" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.Collections.IEnumerator.get_Current" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.Collections.IEnumerator.MoveNext" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="System.Collections.IEnumerator.Reset" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.IDisposable.Dispose" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.Collections.Generic.IEnumerator&lt;'T&gt;.get_Current" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.Collections.IEnumerator.get_Current" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.Collections.IEnumerator.MoveNext" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.Collections.IEnumerator.Reset" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.IDisposable.Dispose" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.Collections.Generic.IEnumerable&lt;'U&gt;.GetEnumerator" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.Collections.IEnumerable.GetEnumerator" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Collections.Internal" filename="F:\workspace\_work\1\s\src\fsharp\FSharp.Core\seq.fs" line-rate="1" branch-rate="1" complexity="48">
          <methods>
            <method name="tryItem" signature="(System.Int32,System.Collections.Generic.IEnumerator`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="nth" signature="(System.Int32,System.Collections.Generic.IEnumerator`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="map" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;a,b&gt;,System.Collections.Generic.IEnumerator`1&lt;a&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="mapi" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Int32,Microsoft.FSharp.Core.FSharpFunc`2&lt;a,b&gt;&gt;,System.Collections.Generic.IEnumerator`1&lt;a&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="map2" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;a,Microsoft.FSharp.Core.FSharpFunc`2&lt;b,c&gt;&gt;,System.Collections.Generic.IEnumerator`1&lt;a&gt;,System.Collections.Generic.IEnumerator`1&lt;b&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="mapi2" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Int32,Microsoft.FSharp.Core.FSharpFunc`2&lt;a,Microsoft.FSharp.Core.FSharpFunc`2&lt;b,c&gt;&gt;&gt;,System.Collections.Generic.IEnumerator`1&lt;a&gt;,System.Collections.Generic.IEnumerator`1&lt;b&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="map3" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;a,Microsoft.FSharp.Core.FSharpFunc`2&lt;b,Microsoft.FSharp.Core.FSharpFunc`2&lt;c,d&gt;&gt;&gt;,System.Collections.Generic.IEnumerator`1&lt;a&gt;,System.Collections.Generic.IEnumerator`1&lt;b&gt;,System.Collections.Generic.IEnumerator`1&lt;c&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="get@165" signature="(Microsoft.FSharp.Core.FSharpRef`1&lt;System.Boolean&gt;,Microsoft.FSharp.Core.FSharpRef`1&lt;Microsoft.FSharp.Core.FSharpOption`1&lt;TResult&gt;&gt;,Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="choose" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,Microsoft.FSharp.Core.FSharpOption`1&lt;TResult&gt;&gt;,System.Collections.Generic.IEnumerator`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="next@193" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.Boolean&gt;,System.Collections.Generic.IEnumerator`1&lt;T&gt;,Microsoft.FSharp.Core.FSharpRef`1&lt;System.Boolean&gt;,Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="filter" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.Boolean&gt;,System.Collections.Generic.IEnumerator`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="unfold" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;a,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Tuple`2&lt;b,a&gt;&gt;&gt;,a)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="getCurrent@238" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Int32,TResult&gt;,Microsoft.FSharp.Core.FSharpRef`1&lt;System.Int32&gt;,Microsoft.FSharp.Core.FSharpRef`1&lt;System.Lazy`1&lt;TResult&gt;&gt;,Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="upto" signature="(Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Int32,TResult&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetCurrent" signature="()" line-rate="1" branch-rate="1" complexity="3">
              <lines />
            </method>
            <method name="System.Collections.Generic.IEnumerator&lt;'T&gt;.get_Current" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.Collections.IEnumerator.get_Current" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.Collections.IEnumerator.MoveNext" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="System.Collections.IEnumerator.Reset" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.IDisposable.Dispose" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="DoMoveNext" signature="(b&amp;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Dispose" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="DoMoveNext" signature="(b&amp;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Dispose" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="DoMoveNext" signature="(c&amp;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Dispose" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="DoMoveNext" signature="(c&amp;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Dispose" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="DoMoveNext" signature="(d&amp;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Dispose" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.Collections.Generic.IEnumerator&lt;'U&gt;.get_Current" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.Collections.IEnumerator.get_Current" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.Collections.IEnumerator.MoveNext" signature="()" line-rate="1" branch-rate="1" complexity="4">
              <lines />
            </method>
            <method name="System.Collections.IEnumerator.Reset" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.IDisposable.Dispose" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.Collections.Generic.IEnumerator&lt;'T&gt;.get_Current" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="System.Collections.IEnumerator.get_Current" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="System.Collections.IEnumerator.MoveNext" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.Collections.IEnumerator.Reset" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.IDisposable.Dispose" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="DoMoveNext" signature="(b&amp;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Dispose" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.Collections.Generic.IEnumerator&lt;'U&gt;.get_Current" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.Collections.IEnumerator.get_Current" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.Collections.IEnumerator.MoveNext" signature="()" line-rate="1" branch-rate="1" complexity="5">
              <lines />
            </method>
            <method name="System.Collections.IEnumerator.Reset" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.IDisposable.Dispose" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(T[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Get" signature="()" line-rate="1" branch-rate="1" complexity="3">
              <lines />
            </method>
            <method name="System.Collections.Generic.IEnumerator&lt;'T&gt;.get_Current" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.Collections.IEnumerator.MoveNext" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="System.Collections.IEnumerator.get_Current" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.Collections.IEnumerator.Reset" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.IDisposable.Dispose" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Collections.KeyValuePairDebugFriendly`2" filename="F:\workspace\_work\1\s\src\fsharp\FSharp.Core\map.fs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.Collections.Generic.KeyValuePair`2&lt;TKey,TValue&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="KeyValue" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Collections.ListDebugView`1" filename="F:\workspace\_work\1\s\src\fsharp\FSharp.Core\prim-types.fs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Items" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="_FullList" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="count" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;b&gt;,System.Int32,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="items" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Collections.ListModule" filename="F:\workspace\_work\1\s\src\fsharp\FSharp.Core\list.fs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name="Length" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Last" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TryLast" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Reverse" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Concat" signature="(System.Collections.Generic.IEnumerable`1&lt;Microsoft.FSharp.Collections.FSharpList`1&lt;T&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="countByValueType" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,TKey&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="countByRefType" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,TKey&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CountBy" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,TKey&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Map" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,TResult&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MapIndexed" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Int32,Microsoft.FSharp.Core.FSharpFunc`2&lt;T,TResult&gt;&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Indexed" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MapFold" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;TState,Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.Tuple`2&lt;TResult,TState&gt;&gt;&gt;,TState,Microsoft.FSharp.Collections.FSharpList`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="loop@94-25" signature="(Microsoft.FSharp.Core.OptimizedClosures/FSharpFunc`3&lt;T,TState,System.Tuple`2&lt;TResult,TState&gt;&gt;,System.Tuple`2&lt;Microsoft.FSharp.Collections.FSharpList`1&lt;TResult&gt;,TState&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MapFoldBack" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,Microsoft.FSharp.Core.FSharpFunc`2&lt;TState,System.Tuple`2&lt;TResult,TState&gt;&gt;&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;T&gt;,TState)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Iterate" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,Microsoft.FSharp.Core.Unit&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Distinct" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DistinctBy" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,TKey&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="OfArray" signature="(T[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToArray" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Empty" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Head" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TryHead" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Tail" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Append" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;T&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Item" signature="(System.Int32,Microsoft.FSharp.Collections.FSharpList`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TryItem" signature="(System.Int32,Microsoft.FSharp.Collections.FSharpList`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Get" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;T&gt;,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Choose" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,Microsoft.FSharp.Core.FSharpOption`1&lt;TResult&gt;&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SplitAt" signature="(System.Int32,Microsoft.FSharp.Collections.FSharpList`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Take" signature="(System.Int32,Microsoft.FSharp.Collections.FSharpList`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TakeWhile" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.Boolean&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IterateIndexed" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Int32,Microsoft.FSharp.Core.FSharpFunc`2&lt;T,Microsoft.FSharp.Core.Unit&gt;&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Initialize" signature="(System.Int32,Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Int32,T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Replicate" signature="(System.Int32,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="loop@185-26" signature="(Microsoft.FSharp.Core.OptimizedClosures/FSharpFunc`3&lt;T1,T2,Microsoft.FSharp.Core.Unit&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;T1&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;T2&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Iterate2" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T1,Microsoft.FSharp.Core.FSharpFunc`2&lt;T2,Microsoft.FSharp.Core.Unit&gt;&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;T1&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;T2&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="loop@196-27" signature="(Microsoft.FSharp.Core.OptimizedClosures/FSharpFunc`4&lt;System.Int32,T1,T2,Microsoft.FSharp.Core.Unit&gt;,System.Int32,Microsoft.FSharp.Collections.FSharpList`1&lt;T1&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;T2&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IterateIndexed2" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Int32,Microsoft.FSharp.Core.FSharpFunc`2&lt;T1,Microsoft.FSharp.Core.FSharpFunc`2&lt;T2,Microsoft.FSharp.Core.Unit&gt;&gt;&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;T1&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;T2&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Map3" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T1,Microsoft.FSharp.Core.FSharpFunc`2&lt;T2,Microsoft.FSharp.Core.FSharpFunc`2&lt;T3,TResult&gt;&gt;&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;T1&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;T2&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;T3&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MapIndexed2" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Int32,Microsoft.FSharp.Core.FSharpFunc`2&lt;T1,Microsoft.FSharp.Core.FSharpFunc`2&lt;T2,TResult&gt;&gt;&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;T1&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;T2&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Map2" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T1,Microsoft.FSharp.Core.FSharpFunc`2&lt;T2,TResult&gt;&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;T1&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;T2&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Fold" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;TState,Microsoft.FSharp.Core.FSharpFunc`2&lt;T,TState&gt;&gt;,TState,Microsoft.FSharp.Collections.FSharpList`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Pairwise" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Reduce" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,Microsoft.FSharp.Core.FSharpFunc`2&lt;T,T&gt;&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Scan" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;TState,Microsoft.FSharp.Core.FSharpFunc`2&lt;T,TState&gt;&gt;,TState,Microsoft.FSharp.Collections.FSharpList`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Singleton" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="loop@246-28" signature="(Microsoft.FSharp.Core.OptimizedClosures/FSharpFunc`4&lt;TState,T1,T2,TState&gt;,TState,Microsoft.FSharp.Collections.FSharpList`1&lt;T1&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;T2&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Fold2" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;TState,Microsoft.FSharp.Core.FSharpFunc`2&lt;T1,Microsoft.FSharp.Core.FSharpFunc`2&lt;T2,TState&gt;&gt;&gt;,TState,Microsoft.FSharp.Collections.FSharpList`1&lt;T1&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;T2&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="foldArraySubRight" signature="(Microsoft.FSharp.Core.OptimizedClosures/FSharpFunc`3&lt;T,a,a&gt;,T[],System.Int32,System.Int32,a)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FoldBack" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,Microsoft.FSharp.Core.FSharpFunc`2&lt;TState,TState&gt;&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;T&gt;,TState)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ReduceBack" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,Microsoft.FSharp.Core.FSharpFunc`2&lt;T,T&gt;&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="scanArraySubRight" signature="(Microsoft.FSharp.Core.OptimizedClosures/FSharpFunc`3&lt;T,TState,TState&gt;,T[],System.Int32,System.Int32,TState)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ScanBack" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,Microsoft.FSharp.Core.FSharpFunc`2&lt;TState,TState&gt;&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;T&gt;,TState)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="foldBack2UsingArrays" signature="(Microsoft.FSharp.Core.OptimizedClosures/FSharpFunc`4&lt;a,b,c,c&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;a&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;b&gt;,c)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="foldBack2$cont@328" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T1,Microsoft.FSharp.Core.FSharpFunc`2&lt;T2,Microsoft.FSharp.Core.FSharpFunc`2&lt;TState,TState&gt;&gt;&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;T1&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;T2&gt;,TState,Microsoft.FSharp.Collections.FSharpList`1&lt;T2&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;T1&gt;,T2,T1,Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FoldBack2" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T1,Microsoft.FSharp.Core.FSharpFunc`2&lt;T2,Microsoft.FSharp.Core.FSharpFunc`2&lt;TState,TState&gt;&gt;&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;T1&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;T2&gt;,TState)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="forall2aux" signature="(Microsoft.FSharp.Core.OptimizedClosures/FSharpFunc`3&lt;a,b,System.Boolean&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;a&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;b&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ForAll2" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T1,Microsoft.FSharp.Core.FSharpFunc`2&lt;T2,System.Boolean&gt;&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;T1&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;T2&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ForAll" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.Boolean&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Exists" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.Boolean&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Contains" signature="(T,Microsoft.FSharp.Collections.FSharpList`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="exists2aux" signature="(Microsoft.FSharp.Core.OptimizedClosures/FSharpFunc`3&lt;a,b,System.Boolean&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;a&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;b&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Exists2" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T1,Microsoft.FSharp.Core.FSharpFunc`2&lt;T2,System.Boolean&gt;&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;T1&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;T2&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Find" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.Boolean&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TryFind" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.Boolean&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FindBack" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.Boolean&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TryFindBack" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.Boolean&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TryPick" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,Microsoft.FSharp.Core.FSharpOption`1&lt;TResult&gt;&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Pick" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,Microsoft.FSharp.Core.FSharpOption`1&lt;TResult&gt;&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Filter" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.Boolean&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Except" signature="(System.Collections.Generic.IEnumerable`1&lt;T&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Where" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.Boolean&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="groupByValueType" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,TKey&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="groupByRefType" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,TKey&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GroupBy" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,TKey&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Partition" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.Boolean&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Unzip" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;System.Tuple`2&lt;T1,T2&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Unzip3" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;System.Tuple`3&lt;T1,T2,T3&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Windowed" signature="(System.Int32,Microsoft.FSharp.Collections.FSharpList`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ChunkBySize" signature="(System.Int32,Microsoft.FSharp.Collections.FSharpList`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SplitInto" signature="(System.Int32,Microsoft.FSharp.Collections.FSharpList`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Zip" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;T1&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;T2&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Zip3" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;T1&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;T2&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;T3&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="loop@474-29" signature="(System.Int32,System.Int32,Microsoft.FSharp.Collections.FSharpList`1&lt;a&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Skip" signature="(System.Int32,Microsoft.FSharp.Collections.FSharpList`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SkipWhile" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.Boolean&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SortWith" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.Int32&gt;&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SortBy" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,TKey&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Sort" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SortByDescending" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,TKey&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SortDescending" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="OfSeq" signature="(System.Collections.Generic.IEnumerable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToSeq" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="loop@532-30" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.Boolean&gt;,System.Int32,Microsoft.FSharp.Collections.FSharpList`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FindIndex" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.Boolean&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="loop@541-31" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.Boolean&gt;,System.Int32,Microsoft.FSharp.Collections.FSharpList`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TryFindIndex" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.Boolean&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FindIndexBack" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.Boolean&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TryFindIndexBack" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.Boolean&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Sum" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Sum$W" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;Microsoft.FSharp.Core.Unit,T&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;T,Microsoft.FSharp.Core.FSharpFunc`2&lt;T,T&gt;&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SumBy" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,TResult&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SumBy$W" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;Microsoft.FSharp.Core.Unit,TResult&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;TResult,Microsoft.FSharp.Core.FSharpFunc`2&lt;TResult,TResult&gt;&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;T,TResult&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Max" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MaxBy" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,TResult&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Min" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MinBy" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,TResult&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Average" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Average$W" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Int32,T&gt;&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;Microsoft.FSharp.Core.Unit,T&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;T,Microsoft.FSharp.Core.FSharpFunc`2&lt;T,T&gt;&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AverageBy" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,TResult&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AverageBy$W" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;TResult,Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Int32,TResult&gt;&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;Microsoft.FSharp.Core.Unit,TResult&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;TResult,Microsoft.FSharp.Core.FSharpFunc`2&lt;TResult,TResult&gt;&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;T,TResult&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Collect" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,Microsoft.FSharp.Collections.FSharpList`1&lt;TResult&gt;&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AllPairs" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;T1&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;T2&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CompareWith" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.Int32&gt;&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;T&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Permute" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Int32,System.Int32&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExactlyOne" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TryExactlyOne" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Transpose" signature="(System.Collections.Generic.IEnumerable`1&lt;Microsoft.FSharp.Collections.FSharpList`1&lt;T&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Truncate" signature="(System.Int32,Microsoft.FSharp.Collections.FSharpList`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Unfold" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;TState,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Tuple`2&lt;T,TState&gt;&gt;&gt;,TState)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(TKey)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.CompilerServices.RuntimeHelpers/StructBox`1&lt;TKey&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(a,Microsoft.FSharp.Collections.FSharpList`1&lt;a&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(TKey)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.CompilerServices.RuntimeHelpers/StructBox`1&lt;TKey&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(T,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(T,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;T&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Collections.MapDebugView`2" filename="F:\workspace\_work\1\s\src\fsharp\FSharp.Core\map.fs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(Microsoft.FSharp.Collections.FSharpMap`2&lt;TKey,TValue&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Items" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Collections.Generic.KeyValuePair`2&lt;TKey,TValue&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Collections.MapModule" filename="F:\workspace\_work\1\s\src\fsharp\FSharp.Core\map.fs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name="Add" signature="(TKey,T,Microsoft.FSharp.Collections.FSharpMap`2&lt;TKey,T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Change" signature="(TKey,Microsoft.FSharp.Core.FSharpFunc`2&lt;Microsoft.FSharp.Core.FSharpOption`1&lt;T&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;T&gt;&gt;,Microsoft.FSharp.Collections.FSharpMap`2&lt;TKey,T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Find" signature="(TKey,Microsoft.FSharp.Collections.FSharpMap`2&lt;TKey,T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TryFind" signature="(TKey,Microsoft.FSharp.Collections.FSharpMap`2&lt;TKey,T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Remove" signature="(TKey,Microsoft.FSharp.Collections.FSharpMap`2&lt;TKey,T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ContainsKey" signature="(TKey,Microsoft.FSharp.Collections.FSharpMap`2&lt;TKey,T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Iterate" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;TKey,Microsoft.FSharp.Core.FSharpFunc`2&lt;T,Microsoft.FSharp.Core.Unit&gt;&gt;,Microsoft.FSharp.Collections.FSharpMap`2&lt;TKey,T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TryPick" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;TKey,Microsoft.FSharp.Core.FSharpFunc`2&lt;T,Microsoft.FSharp.Core.FSharpOption`1&lt;TResult&gt;&gt;&gt;,Microsoft.FSharp.Collections.FSharpMap`2&lt;TKey,T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Pick" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;TKey,Microsoft.FSharp.Core.FSharpFunc`2&lt;T,Microsoft.FSharp.Core.FSharpOption`1&lt;TResult&gt;&gt;&gt;,Microsoft.FSharp.Collections.FSharpMap`2&lt;TKey,T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Exists" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;TKey,Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.Boolean&gt;&gt;,Microsoft.FSharp.Collections.FSharpMap`2&lt;TKey,T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Filter" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;TKey,Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.Boolean&gt;&gt;,Microsoft.FSharp.Collections.FSharpMap`2&lt;TKey,T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Partition" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;TKey,Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.Boolean&gt;&gt;,Microsoft.FSharp.Collections.FSharpMap`2&lt;TKey,T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ForAll" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;TKey,Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.Boolean&gt;&gt;,Microsoft.FSharp.Collections.FSharpMap`2&lt;TKey,T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Map" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;TKey,Microsoft.FSharp.Core.FSharpFunc`2&lt;T,TResult&gt;&gt;,Microsoft.FSharp.Collections.FSharpMap`2&lt;TKey,T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Fold" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;TState,Microsoft.FSharp.Core.FSharpFunc`2&lt;TKey,Microsoft.FSharp.Core.FSharpFunc`2&lt;T,TState&gt;&gt;&gt;,TState,Microsoft.FSharp.Collections.FSharpMap`2&lt;TKey,T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FoldBack" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;TKey,Microsoft.FSharp.Core.FSharpFunc`2&lt;T,Microsoft.FSharp.Core.FSharpFunc`2&lt;TState,TState&gt;&gt;&gt;,Microsoft.FSharp.Collections.FSharpMap`2&lt;TKey,T&gt;,TState)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToSeq" signature="(Microsoft.FSharp.Collections.FSharpMap`2&lt;TKey,T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FindKey" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;TKey,Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.Boolean&gt;&gt;,Microsoft.FSharp.Collections.FSharpMap`2&lt;TKey,T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TryFindKey" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;TKey,Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.Boolean&gt;&gt;,Microsoft.FSharp.Collections.FSharpMap`2&lt;TKey,T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="OfList" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;System.Tuple`2&lt;TKey,T&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="OfSeq" signature="(System.Collections.Generic.IEnumerable`1&lt;System.Tuple`2&lt;TKey,T&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="OfArray" signature="(System.Tuple`2&lt;TKey,T&gt;[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToList" signature="(Microsoft.FSharp.Collections.FSharpMap`2&lt;TKey,T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToArray" signature="(Microsoft.FSharp.Collections.FSharpMap`2&lt;TKey,T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Empty" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Count" signature="(Microsoft.FSharp.Collections.FSharpMap`2&lt;TKey,T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Collections.Generic.KeyValuePair`2&lt;TKey,T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Tuple`2&lt;TKey,T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Tuple`2&lt;TKey,T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Collections.MapTreeModule" filename="F:\workspace\_work\1\s\src\fsharp\FSharp.Core\map.fs" line-rate="1" branch-rate="1" complexity="21">
          <methods>
            <method name="sizeAux" signature="(System.Int32,Microsoft.FSharp.Collections.MapTree`2&lt;a,b&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="height" signature="(Microsoft.FSharp.Collections.MapTree`2&lt;TKey,TValue&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="mk" signature="(Microsoft.FSharp.Collections.MapTree`2&lt;TKey,TValue&gt;,TKey,TValue,Microsoft.FSharp.Collections.MapTree`2&lt;TKey,TValue&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="rebalance" signature="(Microsoft.FSharp.Collections.MapTree`2&lt;TKey,TValue&gt;,TKey,TValue,Microsoft.FSharp.Collections.MapTree`2&lt;TKey,TValue&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="add" signature="(System.Collections.Generic.IComparer`1&lt;TKey&gt;,TKey,TValue,Microsoft.FSharp.Collections.MapTree`2&lt;TKey,TValue&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="tryGetValue" signature="(System.Collections.Generic.IComparer`1&lt;TKey&gt;,TKey,TValue&amp;,Microsoft.FSharp.Collections.MapTree`2&lt;TKey,TValue&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="find" signature="(System.Collections.Generic.IComparer`1&lt;TKey&gt;,TKey,Microsoft.FSharp.Collections.MapTree`2&lt;TKey,TValue&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="tryFind" signature="(System.Collections.Generic.IComparer`1&lt;TKey&gt;,TKey,Microsoft.FSharp.Collections.MapTree`2&lt;TKey,TValue&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="partition1" signature="(System.Collections.Generic.IComparer`1&lt;TKey&gt;,Microsoft.FSharp.Core.OptimizedClosures/FSharpFunc`3&lt;TKey,a,System.Boolean&gt;,TKey,a,Microsoft.FSharp.Collections.MapTree`2&lt;TKey,a&gt;,Microsoft.FSharp.Collections.MapTree`2&lt;TKey,a&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="partitionAux" signature="(System.Collections.Generic.IComparer`1&lt;TKey&gt;,Microsoft.FSharp.Core.OptimizedClosures/FSharpFunc`3&lt;TKey,a,System.Boolean&gt;,Microsoft.FSharp.Collections.MapTree`2&lt;TKey,a&gt;,Microsoft.FSharp.Collections.MapTree`2&lt;TKey,a&gt;,Microsoft.FSharp.Collections.MapTree`2&lt;TKey,a&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="partition" signature="(System.Collections.Generic.IComparer`1&lt;TKey&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;TKey,Microsoft.FSharp.Core.FSharpFunc`2&lt;a,System.Boolean&gt;&gt;,Microsoft.FSharp.Collections.MapTree`2&lt;TKey,a&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="filter1" signature="(System.Collections.Generic.IComparer`1&lt;TKey&gt;,Microsoft.FSharp.Core.OptimizedClosures/FSharpFunc`3&lt;TKey,a,System.Boolean&gt;,TKey,a,Microsoft.FSharp.Collections.MapTree`2&lt;TKey,a&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="filterAux" signature="(System.Collections.Generic.IComparer`1&lt;TKey&gt;,Microsoft.FSharp.Core.OptimizedClosures/FSharpFunc`3&lt;TKey,a,System.Boolean&gt;,Microsoft.FSharp.Collections.MapTree`2&lt;TKey,a&gt;,Microsoft.FSharp.Collections.MapTree`2&lt;TKey,a&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="spliceOutSuccessor" signature="(Microsoft.FSharp.Collections.MapTree`2&lt;TKey,TValue&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="remove" signature="(System.Collections.Generic.IComparer`1&lt;TKey&gt;,TKey,Microsoft.FSharp.Collections.MapTree`2&lt;TKey,TValue&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="change" signature="(System.Collections.Generic.IComparer`1&lt;TKey&gt;,TKey,Microsoft.FSharp.Core.FSharpFunc`2&lt;Microsoft.FSharp.Core.FSharpOption`1&lt;TValue&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;TValue&gt;&gt;,Microsoft.FSharp.Collections.MapTree`2&lt;TKey,TValue&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="mem" signature="(System.Collections.Generic.IComparer`1&lt;TKey&gt;,TKey,Microsoft.FSharp.Collections.MapTree`2&lt;TKey,TValue&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="iterOpt" signature="(Microsoft.FSharp.Core.OptimizedClosures/FSharpFunc`3&lt;TKey,TValue,Microsoft.FSharp.Core.Unit&gt;,Microsoft.FSharp.Collections.MapTree`2&lt;TKey,TValue&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="tryPickOpt" signature="(Microsoft.FSharp.Core.OptimizedClosures/FSharpFunc`3&lt;a,b,Microsoft.FSharp.Core.FSharpOption`1&lt;c&gt;&gt;,Microsoft.FSharp.Collections.MapTree`2&lt;a,b&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="existsOpt" signature="(Microsoft.FSharp.Core.OptimizedClosures/FSharpFunc`3&lt;a,b,System.Boolean&gt;,Microsoft.FSharp.Collections.MapTree`2&lt;a,b&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="forallOpt" signature="(Microsoft.FSharp.Core.OptimizedClosures/FSharpFunc`3&lt;a,b,System.Boolean&gt;,Microsoft.FSharp.Collections.MapTree`2&lt;a,b&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="map" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;a,b&gt;,Microsoft.FSharp.Collections.MapTree`2&lt;c,a&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="mapiOpt" signature="(Microsoft.FSharp.Core.OptimizedClosures/FSharpFunc`3&lt;a,b,c&gt;,Microsoft.FSharp.Collections.MapTree`2&lt;a,b&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="foldBackOpt" signature="(Microsoft.FSharp.Core.OptimizedClosures/FSharpFunc`4&lt;a,b,c,c&gt;,Microsoft.FSharp.Collections.MapTree`2&lt;a,b&gt;,c)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="foldOpt" signature="(Microsoft.FSharp.Core.OptimizedClosures/FSharpFunc`4&lt;a,b,c,a&gt;,a,Microsoft.FSharp.Collections.MapTree`2&lt;b,c&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="foldFromTo@358" signature="(System.Collections.Generic.IComparer`1&lt;TKey&gt;,TKey,TKey,Microsoft.FSharp.Core.OptimizedClosures/FSharpFunc`4&lt;TKey,c,d,d&gt;,Microsoft.FSharp.Collections.MapTree`2&lt;TKey,c&gt;,d)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="foldSectionOpt" signature="(System.Collections.Generic.IComparer`1&lt;TKey&gt;,TKey,TKey,Microsoft.FSharp.Core.OptimizedClosures/FSharpFunc`4&lt;TKey,a,b,b&gt;,Microsoft.FSharp.Collections.MapTree`2&lt;TKey,a&gt;,b)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="loop@380-42" signature="(Microsoft.FSharp.Collections.MapTree`2&lt;c,d&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;System.Tuple`2&lt;c,d&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="toList" signature="(Microsoft.FSharp.Collections.MapTree`2&lt;a,b&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="toArray" signature="(Microsoft.FSharp.Collections.MapTree`2&lt;a,b&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ofList" signature="(System.Collections.Generic.IComparer`1&lt;a&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;System.Tuple`2&lt;a,b&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="mkFromEnumerator" signature="(System.Collections.Generic.IComparer`1&lt;a&gt;,Microsoft.FSharp.Collections.MapTree`2&lt;a,b&gt;,System.Collections.Generic.IEnumerator`1&lt;System.Tuple`2&lt;a,b&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ofArray" signature="(System.Collections.Generic.IComparer`1&lt;a&gt;,System.Tuple`2&lt;a,b&gt;[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ofSeq" signature="(System.Collections.Generic.IComparer`1&lt;TKey&gt;,System.Collections.Generic.IEnumerable`1&lt;System.Tuple`2&lt;TKey,T&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="copyToArray" signature="(Microsoft.FSharp.Collections.MapTree`2&lt;a,b&gt;,System.Collections.Generic.KeyValuePair`2&lt;a,b&gt;[],System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="collapseLHS" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;Microsoft.FSharp.Collections.MapTree`2&lt;a,b&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="mkIterator" signature="(Microsoft.FSharp.Collections.MapTree`2&lt;a,b&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="notStarted" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="alreadyFinished" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="current" signature="(Microsoft.FSharp.Collections.MapTreeModule/MapIterator`2&lt;a,b&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="moveNext" signature="(Microsoft.FSharp.Collections.MapTreeModule/MapIterator`2&lt;a,b&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="mkIEnumerator" signature="(Microsoft.FSharp.Collections.MapTree`2&lt;a,b&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Collections.MapTree`2&lt;a,b&gt;,System.Tuple`2&lt;a,b&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(a,b)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="System.Collections.Generic.IEnumerator&lt;System.Collections.Generic.KeyValuePair&lt;'a, 'b&gt;&gt;.get_Current" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.Collections.IEnumerator.get_Current" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.Collections.IEnumerator.MoveNext" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.Collections.IEnumerator.Reset" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.IDisposable.Dispose" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Collections.Generic.KeyValuePair`2&lt;TKey,TValue&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Collections.Generic.KeyValuePair`2&lt;TKey,TValue&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Collections.Generic.KeyValuePair`2&lt;TKey,TValue&gt;,System.Collections.Generic.KeyValuePair`2&lt;TKey,TValue&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GenerateNext" signature="(System.Collections.Generic.IEnumerable`1&lt;TKey&gt;&amp;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Close" signature="()" line-rate="1" branch-rate="1" complexity="7">
              <lines />
            </method>
            <method name="GenerateNext" signature="(System.Collections.Generic.IEnumerable`1&lt;TValue&gt;&amp;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Close" signature="()" line-rate="1" branch-rate="1" complexity="7">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Collections.PrivateListHelpers" filename="F:\workspace\_work\1\s\src\fsharp\FSharp.Core\prim-types.fs" line-rate="1" branch-rate="1" complexity="12">
          <methods>
            <method name="notStarted" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="alreadyFinished" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="appendToFreshConsTail" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;a&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;a&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="lengthAcc" signature="(System.Int32,Microsoft.FSharp.Collections.FSharpList`1&lt;a&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="nth" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;a&gt;,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="sliceFreshConsTail" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;a&gt;,System.Int32,Microsoft.FSharp.Collections.FSharpList`1&lt;a&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="sliceTake" signature="(System.Int32,Microsoft.FSharp.Collections.FSharpList`1&lt;a&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="loop@3675" signature="(System.Int32,Microsoft.FSharp.Collections.FSharpList`1&lt;b&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="sliceSkip" signature="(System.Int32,Microsoft.FSharp.Collections.FSharpList`1&lt;a&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetCurrent" signature="()" line-rate="1" branch-rate="1" complexity="3">
              <lines />
            </method>
            <method name="System.Collections.Generic.IEnumerator&lt;'T&gt;.get_Current" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.Collections.IEnumerator.MoveNext" signature="()" line-rate="1" branch-rate="1" complexity="3">
              <lines />
            </method>
            <method name="System.Collections.IEnumerator.get_Current" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.Collections.IEnumerator.Reset" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.IDisposable.Dispose" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Collections.SeqModule" filename="F:\workspace\_work\1\s\src\fsharp\FSharp.Core\prim-types.fs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Invoke" signature="(System.Tuple`2&lt;T1,T2&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Collections.SeqModule" filename="F:\workspace\_work\1\s\src\fsharp\FSharp.Core\seq.fs" line-rate="1" branch-rate="1" complexity="97">
          <methods>
            <method name="mkDelayedSeq" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;Microsoft.FSharp.Core.Unit,System.Collections.Generic.IEnumerable`1&lt;T&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="mkUnfoldSeq" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;a,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Tuple`2&lt;b,a&gt;&gt;&gt;,a)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Delay" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;Microsoft.FSharp.Core.Unit,System.Collections.Generic.IEnumerable`1&lt;T&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Unfold" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;TState,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Tuple`2&lt;T,TState&gt;&gt;&gt;,TState)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Empty" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="InitializeInfinite" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Int32,T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Initialize" signature="(System.Int32,Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Int32,T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Iterate" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,Microsoft.FSharp.Core.Unit&gt;,System.Collections.Generic.IEnumerable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Item" signature="(System.Int32,System.Collections.Generic.IEnumerable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TryItem" signature="(System.Int32,System.Collections.Generic.IEnumerable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Get" signature="(System.Int32,System.Collections.Generic.IEnumerable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IterateIndexed" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Int32,Microsoft.FSharp.Core.FSharpFunc`2&lt;T,Microsoft.FSharp.Core.Unit&gt;&gt;,System.Collections.Generic.IEnumerable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Exists" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.Boolean&gt;,System.Collections.Generic.IEnumerable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Contains" signature="(T,System.Collections.Generic.IEnumerable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ForAll" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.Boolean&gt;,System.Collections.Generic.IEnumerable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Iterate2" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T1,Microsoft.FSharp.Core.FSharpFunc`2&lt;T2,Microsoft.FSharp.Core.Unit&gt;&gt;,System.Collections.Generic.IEnumerable`1&lt;T1&gt;,System.Collections.Generic.IEnumerable`1&lt;T2&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IterateIndexed2" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Int32,Microsoft.FSharp.Core.FSharpFunc`2&lt;T1,Microsoft.FSharp.Core.FSharpFunc`2&lt;T2,Microsoft.FSharp.Core.Unit&gt;&gt;&gt;,System.Collections.Generic.IEnumerable`1&lt;T1&gt;,System.Collections.Generic.IEnumerable`1&lt;T2&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="revamp" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Collections.Generic.IEnumerator`1&lt;a&gt;,System.Collections.Generic.IEnumerator`1&lt;b&gt;&gt;,System.Collections.Generic.IEnumerable`1&lt;a&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="revamp2" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Collections.Generic.IEnumerator`1&lt;a&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Collections.Generic.IEnumerator`1&lt;b&gt;,System.Collections.Generic.IEnumerator`1&lt;c&gt;&gt;&gt;,System.Collections.Generic.IEnumerable`1&lt;a&gt;,System.Collections.Generic.IEnumerable`1&lt;b&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="revamp3" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Collections.Generic.IEnumerator`1&lt;a&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Collections.Generic.IEnumerator`1&lt;b&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Collections.Generic.IEnumerator`1&lt;c&gt;,System.Collections.Generic.IEnumerator`1&lt;d&gt;&gt;&gt;&gt;,System.Collections.Generic.IEnumerable`1&lt;a&gt;,System.Collections.Generic.IEnumerable`1&lt;b&gt;,System.Collections.Generic.IEnumerable`1&lt;c&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Filter" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.Boolean&gt;,System.Collections.Generic.IEnumerable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Where" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.Boolean&gt;,System.Collections.Generic.IEnumerable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Map" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,TResult&gt;,System.Collections.Generic.IEnumerable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MapIndexed" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Int32,Microsoft.FSharp.Core.FSharpFunc`2&lt;T,TResult&gt;&gt;,System.Collections.Generic.IEnumerable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MapIndexed2" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Int32,Microsoft.FSharp.Core.FSharpFunc`2&lt;T1,Microsoft.FSharp.Core.FSharpFunc`2&lt;T2,TResult&gt;&gt;&gt;,System.Collections.Generic.IEnumerable`1&lt;T1&gt;,System.Collections.Generic.IEnumerable`1&lt;T2&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Map2" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T1,Microsoft.FSharp.Core.FSharpFunc`2&lt;T2,TResult&gt;&gt;,System.Collections.Generic.IEnumerable`1&lt;T1&gt;,System.Collections.Generic.IEnumerable`1&lt;T2&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Map3" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T1,Microsoft.FSharp.Core.FSharpFunc`2&lt;T2,Microsoft.FSharp.Core.FSharpFunc`2&lt;T3,TResult&gt;&gt;&gt;,System.Collections.Generic.IEnumerable`1&lt;T1&gt;,System.Collections.Generic.IEnumerable`1&lt;T2&gt;,System.Collections.Generic.IEnumerable`1&lt;T3&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Choose" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,Microsoft.FSharp.Core.FSharpOption`1&lt;TResult&gt;&gt;,System.Collections.Generic.IEnumerable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Indexed" signature="(System.Collections.Generic.IEnumerable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Zip" signature="(System.Collections.Generic.IEnumerable`1&lt;T1&gt;,System.Collections.Generic.IEnumerable`1&lt;T2&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Zip3" signature="(System.Collections.Generic.IEnumerable`1&lt;T1&gt;,System.Collections.Generic.IEnumerable`1&lt;T2&gt;,System.Collections.Generic.IEnumerable`1&lt;T3&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Cast" signature="(System.Collections.IEnumerable)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TryPick" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,Microsoft.FSharp.Core.FSharpOption`1&lt;TResult&gt;&gt;,System.Collections.Generic.IEnumerable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Pick" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,Microsoft.FSharp.Core.FSharpOption`1&lt;TResult&gt;&gt;,System.Collections.Generic.IEnumerable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TryFind" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.Boolean&gt;,System.Collections.Generic.IEnumerable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Find" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.Boolean&gt;,System.Collections.Generic.IEnumerable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Take" signature="(System.Int32,System.Collections.Generic.IEnumerable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsEmpty" signature="(System.Collections.Generic.IEnumerable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Concat" signature="(System.Collections.Generic.IEnumerable`1&lt;TCollection&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Length" signature="(System.Collections.Generic.IEnumerable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Fold" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;TState,Microsoft.FSharp.Core.FSharpFunc`2&lt;T,TState&gt;&gt;,TState,System.Collections.Generic.IEnumerable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Fold2" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;TState,Microsoft.FSharp.Core.FSharpFunc`2&lt;T1,Microsoft.FSharp.Core.FSharpFunc`2&lt;T2,TState&gt;&gt;&gt;,TState,System.Collections.Generic.IEnumerable`1&lt;T1&gt;,System.Collections.Generic.IEnumerable`1&lt;T2&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Reduce" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,Microsoft.FSharp.Core.FSharpFunc`2&lt;T,T&gt;&gt;,System.Collections.Generic.IEnumerable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="fromGenerator" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;Microsoft.FSharp.Core.Unit,a&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Replicate" signature="(System.Int32,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Append" signature="(System.Collections.Generic.IEnumerable`1&lt;T&gt;,System.Collections.Generic.IEnumerable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Collect" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,TCollection&gt;,System.Collections.Generic.IEnumerable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="go@784" signature="(System.Collections.Generic.IEnumerator`1&lt;T&gt;,System.Collections.Generic.IEnumerator`1&lt;T&gt;,Microsoft.FSharp.Core.OptimizedClosures/FSharpFunc`3&lt;T,T,System.Int32&gt;,Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CompareWith" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.Int32&gt;&gt;,System.Collections.Generic.IEnumerable`1&lt;T&gt;,System.Collections.Generic.IEnumerable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="OfList" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToList" signature="(System.Collections.Generic.IEnumerable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="OfArray" signature="(T[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToArray" signature="(System.Collections.Generic.IEnumerable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="foldArraySubRight" signature="(Microsoft.FSharp.Core.OptimizedClosures/FSharpFunc`3&lt;T,a,a&gt;,T[],System.Int32,System.Int32,a)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FoldBack" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,Microsoft.FSharp.Core.FSharpFunc`2&lt;TState,TState&gt;&gt;,System.Collections.Generic.IEnumerable`1&lt;T&gt;,TState)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FoldBack2" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T1,Microsoft.FSharp.Core.FSharpFunc`2&lt;T2,Microsoft.FSharp.Core.FSharpFunc`2&lt;TState,TState&gt;&gt;&gt;,System.Collections.Generic.IEnumerable`1&lt;T1&gt;,System.Collections.Generic.IEnumerable`1&lt;T2&gt;,TState)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ReduceBack" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,Microsoft.FSharp.Core.FSharpFunc`2&lt;T,T&gt;&gt;,System.Collections.Generic.IEnumerable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Singleton" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Truncate" signature="(System.Int32,System.Collections.Generic.IEnumerable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Pairwise" signature="(System.Collections.Generic.IEnumerable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Scan" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;TState,Microsoft.FSharp.Core.FSharpFunc`2&lt;T,TState&gt;&gt;,TState,System.Collections.Generic.IEnumerable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TryFindBack" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.Boolean&gt;,System.Collections.Generic.IEnumerable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FindBack" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.Boolean&gt;,System.Collections.Generic.IEnumerable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ScanBack" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,Microsoft.FSharp.Core.FSharpFunc`2&lt;TState,TState&gt;&gt;,System.Collections.Generic.IEnumerable`1&lt;T&gt;,TState)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="loop@913-21" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.Boolean&gt;,System.Collections.Generic.IEnumerator`1&lt;T&gt;,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FindIndex" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.Boolean&gt;,System.Collections.Generic.IEnumerable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="loop@926-22" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.Boolean&gt;,System.Collections.Generic.IEnumerator`1&lt;T&gt;,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TryFindIndex" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.Boolean&gt;,System.Collections.Generic.IEnumerable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TryFindIndexBack" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.Boolean&gt;,System.Collections.Generic.IEnumerable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FindIndexBack" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.Boolean&gt;,System.Collections.Generic.IEnumerable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Windowed" signature="(System.Int32,System.Collections.Generic.IEnumerable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="action@4737-2" signature="(System.Collections.Generic.List`1&lt;T&gt;,Microsoft.FSharp.Core.FSharpRef`1&lt;Microsoft.FSharp.Core.FSharpOption`1&lt;Microsoft.FSharp.Core.FSharpOption`1&lt;System.Collections.Generic.IEnumerator`1&lt;T&gt;&gt;&gt;&gt;,Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="action@4737-1" signature="(System.Collections.Generic.IEnumerable`1&lt;T&gt;,System.Collections.Generic.List`1&lt;T&gt;,Microsoft.FSharp.Core.FSharpRef`1&lt;Microsoft.FSharp.Core.FSharpOption`1&lt;Microsoft.FSharp.Core.FSharpOption`1&lt;System.Collections.Generic.IEnumerator`1&lt;T&gt;&gt;&gt;&gt;,System.Int32,Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="oneStepTo@987" signature="(System.Collections.Generic.IEnumerable`1&lt;T&gt;,System.Collections.Generic.List`1&lt;T&gt;,Microsoft.FSharp.Core.FSharpRef`1&lt;Microsoft.FSharp.Core.FSharpOption`1&lt;Microsoft.FSharp.Core.FSharpOption`1&lt;System.Collections.Generic.IEnumerator`1&lt;T&gt;&gt;&gt;&gt;,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Cache" signature="(System.Collections.Generic.IEnumerable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AllPairs" signature="(System.Collections.Generic.IEnumerable`1&lt;T1&gt;,System.Collections.Generic.IEnumerable`1&lt;T2&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ReadOnly" signature="(System.Collections.Generic.IEnumerable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="groupByValueType" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,TKey&gt;,System.Collections.Generic.IEnumerable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="groupByRefType" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,TKey&gt;,System.Collections.Generic.IEnumerable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GroupBy" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,TKey&gt;,System.Collections.Generic.IEnumerable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Transpose" signature="(System.Collections.Generic.IEnumerable`1&lt;TCollection&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Distinct" signature="(System.Collections.Generic.IEnumerable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DistinctBy" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,TKey&gt;,System.Collections.Generic.IEnumerable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SortBy" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,TKey&gt;,System.Collections.Generic.IEnumerable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Sort" signature="(System.Collections.Generic.IEnumerable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SortWith" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.Int32&gt;&gt;,System.Collections.Generic.IEnumerable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SortByDescending" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,TKey&gt;,System.Collections.Generic.IEnumerable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SortDescending" signature="(System.Collections.Generic.IEnumerable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="countByValueType" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,TKey&gt;,System.Collections.Generic.IEnumerable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="countByRefType" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,TKey&gt;,System.Collections.Generic.IEnumerable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CountBy" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,TKey&gt;,System.Collections.Generic.IEnumerable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Sum" signature="(System.Collections.Generic.IEnumerable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Sum$W" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;Microsoft.FSharp.Core.Unit,T&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;T,Microsoft.FSharp.Core.FSharpFunc`2&lt;T,T&gt;&gt;,System.Collections.Generic.IEnumerable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SumBy" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,TResult&gt;,System.Collections.Generic.IEnumerable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SumBy$W" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;Microsoft.FSharp.Core.Unit,TResult&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;TResult,Microsoft.FSharp.Core.FSharpFunc`2&lt;TResult,TResult&gt;&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;T,TResult&gt;,System.Collections.Generic.IEnumerable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Average" signature="(System.Collections.Generic.IEnumerable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Average$W" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Int32,T&gt;&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;Microsoft.FSharp.Core.Unit,T&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;T,Microsoft.FSharp.Core.FSharpFunc`2&lt;T,T&gt;&gt;,System.Collections.Generic.IEnumerable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AverageBy" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,TResult&gt;,System.Collections.Generic.IEnumerable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AverageBy$W" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;TResult,Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Int32,TResult&gt;&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;Microsoft.FSharp.Core.Unit,TResult&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;TResult,Microsoft.FSharp.Core.FSharpFunc`2&lt;TResult,TResult&gt;&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;T,TResult&gt;,System.Collections.Generic.IEnumerable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Min" signature="(System.Collections.Generic.IEnumerable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MinBy" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,TResult&gt;,System.Collections.Generic.IEnumerable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Max" signature="(System.Collections.Generic.IEnumerable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MaxBy" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,TResult&gt;,System.Collections.Generic.IEnumerable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TakeWhile" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.Boolean&gt;,System.Collections.Generic.IEnumerable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Skip" signature="(System.Int32,System.Collections.Generic.IEnumerable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SkipWhile" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.Boolean&gt;,System.Collections.Generic.IEnumerable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ForAll2" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T1,Microsoft.FSharp.Core.FSharpFunc`2&lt;T2,System.Boolean&gt;&gt;,System.Collections.Generic.IEnumerable`1&lt;T1&gt;,System.Collections.Generic.IEnumerable`1&lt;T2&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Exists2" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T1,Microsoft.FSharp.Core.FSharpFunc`2&lt;T2,System.Boolean&gt;&gt;,System.Collections.Generic.IEnumerable`1&lt;T1&gt;,System.Collections.Generic.IEnumerable`1&lt;T2&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Head" signature="(System.Collections.Generic.IEnumerable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TryHead" signature="(System.Collections.Generic.IEnumerable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Tail" signature="(System.Collections.Generic.IEnumerable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Last" signature="(System.Collections.Generic.IEnumerable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TryLast" signature="(System.Collections.Generic.IEnumerable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExactlyOne" signature="(System.Collections.Generic.IEnumerable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TryExactlyOne" signature="(System.Collections.Generic.IEnumerable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Reverse" signature="(System.Collections.Generic.IEnumerable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Permute" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Int32,System.Int32&gt;,System.Collections.Generic.IEnumerable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MapFold" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;TState,Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.Tuple`2&lt;TResult,TState&gt;&gt;&gt;,TState,System.Collections.Generic.IEnumerable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MapFoldBack" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,Microsoft.FSharp.Core.FSharpFunc`2&lt;TState,System.Tuple`2&lt;TResult,TState&gt;&gt;&gt;,System.Collections.Generic.IEnumerable`1&lt;T&gt;,TState)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Except" signature="(System.Collections.Generic.IEnumerable`1&lt;T&gt;,System.Collections.Generic.IEnumerable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="nextChunk@1470" signature="(System.Int32,System.Collections.Generic.IEnumerator`1&lt;T&gt;,Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ChunkBySize" signature="(System.Int32,System.Collections.Generic.IEnumerable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SplitInto" signature="(System.Int32,System.Collections.Generic.IEnumerable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Collections.Generic.IEnumerator`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Collections.Generic.IEnumerator`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Collections.Generic.IEnumerator`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Collections.Generic.IEnumerator`1&lt;T1&gt;,System.Collections.Generic.IEnumerator`1&lt;T2&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Collections.Generic.IEnumerator`1&lt;T1&gt;,System.Collections.Generic.IEnumerator`1&lt;T2&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Collections.Generic.IEnumerator`1&lt;T1&gt;,System.Collections.Generic.IEnumerator`1&lt;T2&gt;,System.Collections.Generic.IEnumerator`1&lt;T3&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Collections.Generic.IEnumerator`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Int32,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(T1,T2)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(T1,System.Tuple`2&lt;T2,T3&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GenerateNext" signature="(System.Collections.Generic.IEnumerable`1&lt;T&gt;&amp;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Close" signature="()" line-rate="1" branch-rate="1" complexity="8">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GenerateNext" signature="(System.Collections.Generic.IEnumerable`1&lt;T&gt;&amp;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Close" signature="()" line-rate="1" branch-rate="1" complexity="7">
              <lines />
            </method>
            <method name="GenerateNext" signature="(System.Collections.Generic.IEnumerable`1&lt;System.Tuple`2&lt;T,T&gt;&gt;&amp;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Close" signature="()" line-rate="1" branch-rate="1" complexity="7">
              <lines />
            </method>
            <method name="GenerateNext" signature="(System.Collections.Generic.IEnumerable`1&lt;TState&gt;&amp;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Close" signature="()" line-rate="1" branch-rate="1" complexity="8">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GenerateNext" signature="(System.Collections.Generic.IEnumerable`1&lt;T[]&gt;&amp;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Close" signature="()" line-rate="1" branch-rate="1" complexity="8">
              <lines />
            </method>
            <method name="Invoke" signature="(T2)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(T1)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Collections.Generic.KeyValuePair`2&lt;TKey,System.Collections.Generic.List`1&lt;T&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Collections.Generic.KeyValuePair`2&lt;Microsoft.FSharp.Core.CompilerServices.RuntimeHelpers/StructBox`1&lt;TKey&gt;,System.Collections.Generic.List`1&lt;T&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Tuple`2&lt;System.Int32,T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Collections.Generic.IEnumerable`1&lt;System.Tuple`2&lt;System.Int32,T&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Tuple`2&lt;System.Int32,System.Collections.Generic.IEnumerable`1&lt;System.Tuple`2&lt;System.Int32,T&gt;&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Tuple`2&lt;System.Int32,T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(TCollection)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GenerateNext" signature="(System.Collections.Generic.IEnumerable`1&lt;T&gt;&amp;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Close" signature="()" line-rate="1" branch-rate="1" complexity="7">
              <lines />
            </method>
            <method name="GenerateNext" signature="(System.Collections.Generic.IEnumerable`1&lt;T&gt;&amp;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Close" signature="()" line-rate="1" branch-rate="1" complexity="7">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(T,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(T,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Collections.Generic.KeyValuePair`2&lt;TKey,System.Int32&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Collections.Generic.KeyValuePair`2&lt;Microsoft.FSharp.Core.CompilerServices.RuntimeHelpers/StructBox`1&lt;TKey&gt;,System.Int32&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GenerateNext" signature="(System.Collections.Generic.IEnumerable`1&lt;T&gt;&amp;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Close" signature="()" line-rate="1" branch-rate="1" complexity="7">
              <lines />
            </method>
            <method name="GenerateNext" signature="(System.Collections.Generic.IEnumerable`1&lt;T&gt;&amp;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Close" signature="()" line-rate="1" branch-rate="1" complexity="8">
              <lines />
            </method>
            <method name="GenerateNext" signature="(System.Collections.Generic.IEnumerable`1&lt;T&gt;&amp;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Close" signature="()" line-rate="1" branch-rate="1" complexity="7">
              <lines />
            </method>
            <method name="GenerateNext" signature="(System.Collections.Generic.IEnumerable`1&lt;T&gt;&amp;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Close" signature="()" line-rate="1" branch-rate="1" complexity="7">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GenerateNext" signature="(System.Collections.Generic.IEnumerable`1&lt;T&gt;&amp;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Close" signature="()" line-rate="1" branch-rate="1" complexity="8">
              <lines />
            </method>
            <method name="GenerateNext" signature="(System.Collections.Generic.IEnumerable`1&lt;T[]&gt;&amp;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Close" signature="()" line-rate="1" branch-rate="1" complexity="7">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Collections.SetDebugView`1" filename="F:\workspace\_work\1\s\src\fsharp\FSharp.Core\set.fs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(Microsoft.FSharp.Collections.FSharpSet`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Items" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Collections.SetModule" filename="F:\workspace\_work\1\s\src\fsharp\FSharp.Core\set.fs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name="Contains" signature="(T,Microsoft.FSharp.Collections.FSharpSet`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Add" signature="(T,Microsoft.FSharp.Collections.FSharpSet`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Singleton" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Remove" signature="(T,Microsoft.FSharp.Collections.FSharpSet`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Union" signature="(Microsoft.FSharp.Collections.FSharpSet`1&lt;T&gt;,Microsoft.FSharp.Collections.FSharpSet`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="UnionMany" signature="(System.Collections.Generic.IEnumerable`1&lt;Microsoft.FSharp.Collections.FSharpSet`1&lt;T&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Intersect" signature="(Microsoft.FSharp.Collections.FSharpSet`1&lt;T&gt;,Microsoft.FSharp.Collections.FSharpSet`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IntersectMany" signature="(System.Collections.Generic.IEnumerable`1&lt;Microsoft.FSharp.Collections.FSharpSet`1&lt;T&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Iterate" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,Microsoft.FSharp.Core.Unit&gt;,Microsoft.FSharp.Collections.FSharpSet`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Empty" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="ForAll" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.Boolean&gt;,Microsoft.FSharp.Collections.FSharpSet`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Exists" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.Boolean&gt;,Microsoft.FSharp.Collections.FSharpSet`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Filter" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.Boolean&gt;,Microsoft.FSharp.Collections.FSharpSet`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Partition" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.Boolean&gt;,Microsoft.FSharp.Collections.FSharpSet`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Fold" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;TState,Microsoft.FSharp.Core.FSharpFunc`2&lt;T,TState&gt;&gt;,TState,Microsoft.FSharp.Collections.FSharpSet`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FoldBack" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,Microsoft.FSharp.Core.FSharpFunc`2&lt;TState,TState&gt;&gt;,Microsoft.FSharp.Collections.FSharpSet`1&lt;T&gt;,TState)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Map" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,TResult&gt;,Microsoft.FSharp.Collections.FSharpSet`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Count" signature="(Microsoft.FSharp.Collections.FSharpSet`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="OfList" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="OfArray" signature="(T[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToList" signature="(Microsoft.FSharp.Collections.FSharpSet`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToArray" signature="(Microsoft.FSharp.Collections.FSharpSet`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToSeq" signature="(Microsoft.FSharp.Collections.FSharpSet`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="OfSeq" signature="(System.Collections.Generic.IEnumerable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Difference" signature="(Microsoft.FSharp.Collections.FSharpSet`1&lt;T&gt;,Microsoft.FSharp.Collections.FSharpSet`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsSubset" signature="(Microsoft.FSharp.Collections.FSharpSet`1&lt;T&gt;,Microsoft.FSharp.Collections.FSharpSet`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsSuperset" signature="(Microsoft.FSharp.Collections.FSharpSet`1&lt;T&gt;,Microsoft.FSharp.Collections.FSharpSet`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsProperSubset" signature="(Microsoft.FSharp.Collections.FSharpSet`1&lt;T&gt;,Microsoft.FSharp.Collections.FSharpSet`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsProperSuperset" signature="(Microsoft.FSharp.Collections.FSharpSet`1&lt;T&gt;,Microsoft.FSharp.Collections.FSharpSet`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MinElement" signature="(Microsoft.FSharp.Collections.FSharpSet`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MaxElement" signature="(Microsoft.FSharp.Collections.FSharpSet`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Collections.SetTreeModule" filename="F:\workspace\_work\1\s\src\fsharp\FSharp.Core\set.fs" line-rate="1" branch-rate="1" complexity="7">
          <methods>
            <method name="countAux" signature="(Microsoft.FSharp.Collections.SetTree`1&lt;a&gt;,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="height" signature="(Microsoft.FSharp.Collections.SetTree`1&lt;a&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="mk" signature="(Microsoft.FSharp.Collections.SetTree`1&lt;a&gt;,a,Microsoft.FSharp.Collections.SetTree`1&lt;a&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="rebalance" signature="(Microsoft.FSharp.Collections.SetTree`1&lt;a&gt;,a,Microsoft.FSharp.Collections.SetTree`1&lt;a&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="add" signature="(System.Collections.Generic.IComparer`1&lt;T&gt;,T,Microsoft.FSharp.Collections.SetTree`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="balance" signature="(System.Collections.Generic.IComparer`1&lt;a&gt;,Microsoft.FSharp.Collections.SetTree`1&lt;a&gt;,a,Microsoft.FSharp.Collections.SetTree`1&lt;a&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="split" signature="(System.Collections.Generic.IComparer`1&lt;T&gt;,T,Microsoft.FSharp.Collections.SetTree`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="spliceOutSuccessor" signature="(Microsoft.FSharp.Collections.SetTree`1&lt;a&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="remove" signature="(System.Collections.Generic.IComparer`1&lt;T&gt;,T,Microsoft.FSharp.Collections.SetTree`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="mem" signature="(System.Collections.Generic.IComparer`1&lt;T&gt;,T,Microsoft.FSharp.Collections.SetTree`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="iter" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;a,Microsoft.FSharp.Core.Unit&gt;,Microsoft.FSharp.Collections.SetTree`1&lt;a&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="foldBackOpt" signature="(Microsoft.FSharp.Core.OptimizedClosures/FSharpFunc`3&lt;a,b,b&gt;,Microsoft.FSharp.Collections.SetTree`1&lt;a&gt;,b)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="foldOpt" signature="(Microsoft.FSharp.Core.OptimizedClosures/FSharpFunc`3&lt;a,b,a&gt;,a,Microsoft.FSharp.Collections.SetTree`1&lt;b&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="forall" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;a,System.Boolean&gt;,Microsoft.FSharp.Collections.SetTree`1&lt;a&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="exists" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;a,System.Boolean&gt;,Microsoft.FSharp.Collections.SetTree`1&lt;a&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="subset" signature="(System.Collections.Generic.IComparer`1&lt;a&gt;,Microsoft.FSharp.Collections.SetTree`1&lt;a&gt;,Microsoft.FSharp.Collections.SetTree`1&lt;a&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="filterAux" signature="(System.Collections.Generic.IComparer`1&lt;a&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;a,System.Boolean&gt;,Microsoft.FSharp.Collections.SetTree`1&lt;a&gt;,Microsoft.FSharp.Collections.SetTree`1&lt;a&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="diffAux" signature="(System.Collections.Generic.IComparer`1&lt;a&gt;,Microsoft.FSharp.Collections.SetTree`1&lt;a&gt;,Microsoft.FSharp.Collections.SetTree`1&lt;a&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="union" signature="(System.Collections.Generic.IComparer`1&lt;a&gt;,Microsoft.FSharp.Collections.SetTree`1&lt;a&gt;,Microsoft.FSharp.Collections.SetTree`1&lt;a&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="intersectionAux" signature="(System.Collections.Generic.IComparer`1&lt;a&gt;,Microsoft.FSharp.Collections.SetTree`1&lt;a&gt;,Microsoft.FSharp.Collections.SetTree`1&lt;a&gt;,Microsoft.FSharp.Collections.SetTree`1&lt;a&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="partition1" signature="(System.Collections.Generic.IComparer`1&lt;a&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;a,System.Boolean&gt;,a,Microsoft.FSharp.Collections.SetTree`1&lt;a&gt;,Microsoft.FSharp.Collections.SetTree`1&lt;a&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="partitionAux" signature="(System.Collections.Generic.IComparer`1&lt;a&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;a,System.Boolean&gt;,Microsoft.FSharp.Collections.SetTree`1&lt;a&gt;,Microsoft.FSharp.Collections.SetTree`1&lt;a&gt;,Microsoft.FSharp.Collections.SetTree`1&lt;a&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="minimumElementAux" signature="(Microsoft.FSharp.Collections.SetTree`1&lt;a&gt;,a)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="minimumElementOpt" signature="(Microsoft.FSharp.Collections.SetTree`1&lt;a&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="maximumElementAux" signature="(Microsoft.FSharp.Collections.SetTree`1&lt;a&gt;,a)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="maximumElementOpt" signature="(Microsoft.FSharp.Collections.SetTree`1&lt;a&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="minimumElement" signature="(Microsoft.FSharp.Collections.SetTree`1&lt;a&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="maximumElement" signature="(Microsoft.FSharp.Collections.SetTree`1&lt;a&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="collapseLHS" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;Microsoft.FSharp.Collections.SetTree`1&lt;a&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="mkIterator" signature="(Microsoft.FSharp.Collections.SetTree`1&lt;a&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="notStarted" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="alreadyFinished" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="current" signature="(Microsoft.FSharp.Collections.SetTreeModule/SetIterator`1&lt;a&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="moveNext" signature="(Microsoft.FSharp.Collections.SetTreeModule/SetIterator`1&lt;a&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="mkIEnumerator" signature="(Microsoft.FSharp.Collections.SetTree`1&lt;a&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="compareStacks" signature="(System.Collections.Generic.IComparer`1&lt;T&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;Microsoft.FSharp.Collections.SetTree`1&lt;T&gt;&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;Microsoft.FSharp.Collections.SetTree`1&lt;T&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="compare" signature="(System.Collections.Generic.IComparer`1&lt;a&gt;,Microsoft.FSharp.Collections.SetTree`1&lt;a&gt;,Microsoft.FSharp.Collections.SetTree`1&lt;a&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="loop@481-44" signature="(Microsoft.FSharp.Collections.SetTree`1&lt;b&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;b&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="toList" signature="(Microsoft.FSharp.Collections.SetTree`1&lt;a&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="copyToArray" signature="(Microsoft.FSharp.Collections.SetTree`1&lt;a&gt;,a[],System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="toArray" signature="(Microsoft.FSharp.Collections.SetTree`1&lt;a&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="mkFromEnumerator" signature="(System.Collections.Generic.IComparer`1&lt;a&gt;,Microsoft.FSharp.Collections.SetTree`1&lt;a&gt;,System.Collections.Generic.IEnumerator`1&lt;a&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ofSeq" signature="(System.Collections.Generic.IComparer`1&lt;a&gt;,System.Collections.Generic.IEnumerable`1&lt;a&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ofArray" signature="(System.Collections.Generic.IComparer`1&lt;a&gt;,a[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(a)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(a)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="System.Collections.Generic.IEnumerator&lt;'a&gt;.get_Current" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.Collections.IEnumerator.get_Current" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.Collections.IEnumerator.MoveNext" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.Collections.IEnumerator.Reset" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.IDisposable.Dispose" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Invoke" signature="(a)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Collections.SetTree`1&lt;a&gt;,a)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Control.AsyncActivation`1" filename="F:\workspace\_work\1\s\src\fsharp\FSharp.Core\async.fs" line-rate="1" branch-rate="1" complexity="3">
          <methods>
            <method name=".ctor" signature="(Microsoft.FSharp.Control.AsyncActivationContents`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="WithCancellationContinuation" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;System.OperationCanceledException,Microsoft.FSharp.Control.AsyncReturn&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="WithExceptionContinuation" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Runtime.ExceptionServices.ExceptionDispatchInfo,Microsoft.FSharp.Control.AsyncReturn&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="WithContinuation" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;TResult,Microsoft.FSharp.Control.AsyncReturn&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="WithContinuations" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;TResult,Microsoft.FSharp.Control.AsyncReturn&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Runtime.ExceptionServices.ExceptionDispatchInfo,Microsoft.FSharp.Control.AsyncReturn&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="WithContinuations" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,Microsoft.FSharp.Control.AsyncReturn&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Runtime.ExceptionServices.ExceptionDispatchInfo,Microsoft.FSharp.Control.AsyncReturn&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;System.OperationCanceledException,Microsoft.FSharp.Control.AsyncReturn&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="aux" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="cont" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="econt" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ccont" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="token" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="trampolineHolder" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsCancellationRequested" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="OnCancellation" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="HijackCheckThenCall" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;a,Microsoft.FSharp.Control.AsyncReturn&gt;,a)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="OnSuccess" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="OnExceptionRaised" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="Create" signature="(System.Threading.CancellationToken,Microsoft.FSharp.Control.TrampolineHolder,Microsoft.FSharp.Core.FSharpFunc`2&lt;T,Microsoft.FSharp.Control.AsyncReturn&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Runtime.ExceptionServices.ExceptionDispatchInfo,Microsoft.FSharp.Control.AsyncReturn&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;System.OperationCanceledException,Microsoft.FSharp.Control.AsyncReturn&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="QueueContinuationWithTrampoline" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CallContinuation" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Control.AsyncHelpers" filename="F:\workspace\_work\1\s\src\fsharp\FSharp.Core\mailbox.fs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="start@21-2" signature="(Microsoft.FSharp.Control.AsyncPrimitives/ResultCell`1&lt;Microsoft.FSharp.Control.AsyncResult`1&lt;Microsoft.FSharp.Core.FSharpChoice`2&lt;a,b&gt;&gt;&gt;,System.Threading.CancellationToken,Microsoft.FSharp.Control.FSharpAsync`1&lt;c&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;c,Microsoft.FSharp.Core.FSharpChoice`2&lt;a,b&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="awaitEither" signature="(Microsoft.FSharp.Control.FSharpAsync`1&lt;a&gt;,Microsoft.FSharp.Control.FSharpAsync`1&lt;b&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="timeout" signature="(System.Int32,System.Threading.CancellationToken)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(a)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(b)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Control.AsyncResult`1&lt;Microsoft.FSharp.Core.FSharpChoice`2&lt;a,b&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Control.AsyncActivation`1&lt;Microsoft.FSharp.Core.FSharpChoice`2&lt;a,b&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Threading.CancellationToken)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Control.AsyncActivation`1&lt;Microsoft.FSharp.Core.FSharpChoice`2&lt;a,b&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(c)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Runtime.ExceptionServices.ExceptionDispatchInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.OperationCanceledException)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Exception)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.OperationCanceledException)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Control.AsyncPrimitives" filename="F:\workspace\_work\1\s\src\fsharp\FSharp.Core\async.fs" line-rate="1" branch-rate="1" complexity="23">
          <methods>
            <method name="Invoke" signature="(Microsoft.FSharp.Control.FSharpAsync`1&lt;T&gt;,Microsoft.FSharp.Control.AsyncActivation`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CallThenContinue" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;a,b&gt;,a,Microsoft.FSharp.Control.AsyncActivation`1&lt;b&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CallThenInvoke" signature="(Microsoft.FSharp.Control.AsyncActivation`1&lt;T&gt;,TResult,Microsoft.FSharp.Core.FSharpFunc`2&lt;TResult,Microsoft.FSharp.Control.FSharpAsync`1&lt;T&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CallThenInvokeNoHijackCheck" signature="(Microsoft.FSharp.Control.AsyncActivation`1&lt;a&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;b,Microsoft.FSharp.Control.FSharpAsync`1&lt;a&gt;&gt;,b)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CallFilterThenInvoke" signature="(Microsoft.FSharp.Control.AsyncActivation`1&lt;T&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Exception,Microsoft.FSharp.Core.FSharpOption`1&lt;Microsoft.FSharp.Control.FSharpAsync`1&lt;T&gt;&gt;&gt;,System.Runtime.ExceptionServices.ExceptionDispatchInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ProtectedCode" signature="(Microsoft.FSharp.Control.AsyncActivation`1&lt;T&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;Microsoft.FSharp.Control.AsyncActivation`1&lt;T&gt;,Microsoft.FSharp.Control.AsyncReturn&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MakeAsync" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;Microsoft.FSharp.Control.AsyncActivation`1&lt;T&gt;,Microsoft.FSharp.Control.AsyncReturn&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Bind" signature="(Microsoft.FSharp.Control.AsyncActivation`1&lt;T&gt;,Microsoft.FSharp.Control.FSharpAsync`1&lt;TResult&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;TResult,Microsoft.FSharp.Control.FSharpAsync`1&lt;T&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TryFinally" signature="(Microsoft.FSharp.Control.AsyncActivation`1&lt;T&gt;,Microsoft.FSharp.Control.FSharpAsync`1&lt;T&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TryWith" signature="(Microsoft.FSharp.Control.AsyncActivation`1&lt;T&gt;,Microsoft.FSharp.Control.FSharpAsync`1&lt;T&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Exception,Microsoft.FSharp.Core.FSharpOption`1&lt;Microsoft.FSharp.Control.FSharpAsync`1&lt;T&gt;&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CreateProtectedAsync" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;Microsoft.FSharp.Control.AsyncActivation`1&lt;a&gt;,Microsoft.FSharp.Control.AsyncReturn&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CreateAsyncResultAsync" signature="(Microsoft.FSharp.Control.AsyncResult`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CreateWhenCancelledAsync" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;System.OperationCanceledException,Microsoft.FSharp.Core.Unit&gt;,Microsoft.FSharp.Control.FSharpAsync`1&lt;a&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="disposeFunction@582" signature="(T,Microsoft.FSharp.Core.FSharpRef`1&lt;System.Int32&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CreateUsingAsync" signature="(T,Microsoft.FSharp.Core.FSharpFunc`2&lt;T,Microsoft.FSharp.Control.FSharpAsync`1&lt;a&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CreateWhileAsync" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;Microsoft.FSharp.Core.Unit,System.Boolean&gt;,Microsoft.FSharp.Control.FSharpAsync`1&lt;Microsoft.FSharp.Core.Unit&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CreateForLoopAsync" signature="(System.Collections.Generic.IEnumerable`1&lt;a&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;a,Microsoft.FSharp.Control.FSharpAsync`1&lt;Microsoft.FSharp.Core.Unit&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CreateSwitchToAsync" signature="(System.Threading.SynchronizationContext)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CreateSwitchToNewThreadAsync" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="CreateSwitchToThreadPoolAsync" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="DelimitSyncContext" signature="(Microsoft.FSharp.Control.AsyncActivation`1&lt;a&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CreateDelimitedUserCodeAsync" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;Microsoft.FSharp.Control.AsyncActivation`1&lt;a&gt;,Microsoft.FSharp.Control.AsyncReturn&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="action@4737-13" signature="(Microsoft.FSharp.Control.AsyncPrimitives/ResultCell`1&lt;T&gt;,Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="action@4737-14" signature="(Microsoft.FSharp.Control.AsyncPrimitives/ResultCell`1&lt;T&gt;,Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="action@4737-15" signature="(Microsoft.FSharp.Control.AsyncPrimitives/ResultCell`1&lt;T&gt;,T,Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="action@4737-16" signature="(Microsoft.FSharp.Control.AsyncPrimitives/ResultCell`1&lt;T&gt;,Microsoft.FSharp.Control.AsyncActivation`1&lt;T&gt;,Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="QueueAsync" signature="(System.Threading.CancellationToken,Microsoft.FSharp.Core.FSharpFunc`2&lt;a,Microsoft.FSharp.Control.AsyncReturn&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Runtime.ExceptionServices.ExceptionDispatchInfo,Microsoft.FSharp.Control.AsyncReturn&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;System.OperationCanceledException,Microsoft.FSharp.Control.AsyncReturn&gt;,Microsoft.FSharp.Control.FSharpAsync`1&lt;a&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="RunSynchronouslyInAnotherThread" signature="(System.Threading.CancellationToken,Microsoft.FSharp.Control.FSharpAsync`1&lt;a&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="RunSynchronouslyInCurrentThread" signature="(System.Threading.CancellationToken,Microsoft.FSharp.Control.FSharpAsync`1&lt;a&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="RunSynchronously" signature="(System.Threading.CancellationToken,Microsoft.FSharp.Control.FSharpAsync`1&lt;T&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Start" signature="(System.Threading.CancellationToken,Microsoft.FSharp.Control.FSharpAsync`1&lt;Microsoft.FSharp.Core.Unit&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="StartWithContinuations" signature="(System.Threading.CancellationToken,Microsoft.FSharp.Control.FSharpAsync`1&lt;T&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;T,Microsoft.FSharp.Core.Unit&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Runtime.ExceptionServices.ExceptionDispatchInfo,Microsoft.FSharp.Core.Unit&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;System.OperationCanceledException,Microsoft.FSharp.Core.Unit&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="StartAsTask" signature="(System.Threading.CancellationToken,Microsoft.FSharp.Control.FSharpAsync`1&lt;T&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Threading.Tasks.TaskCreationOptions&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="continuation@930" signature="(Microsoft.FSharp.Control.AsyncActivation`1&lt;T&gt;,System.Boolean,System.Threading.Tasks.Task`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="taskContinueWith" signature="(System.Threading.Tasks.Task`1&lt;T&gt;,Microsoft.FSharp.Control.AsyncActivation`1&lt;T&gt;,System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="continuation@949-2" signature="(Microsoft.FSharp.Control.AsyncActivation`1&lt;Microsoft.FSharp.Core.Unit&gt;,System.Boolean,System.Threading.Tasks.Task)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="taskContinueWithUnit" signature="(System.Threading.Tasks.Task,Microsoft.FSharp.Control.AsyncActivation`1&lt;Microsoft.FSharp.Core.Unit&gt;,System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(TResult)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Runtime.ExceptionServices.ExceptionDispatchInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Runtime.ExceptionServices.ExceptionDispatchInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.OperationCanceledException)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Runtime.ExceptionServices.ExceptionDispatchInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Control.AsyncActivation`1&lt;a&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Control.AsyncActivation`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Runtime.ExceptionServices.ExceptionDispatchInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.OperationCanceledException)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Control.AsyncActivation`1&lt;a&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Control.AsyncActivation`1&lt;System.Threading.CancellationToken&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Control.AsyncActivation`1&lt;Microsoft.FSharp.Core.Unit&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Control.AsyncActivation`1&lt;a&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(b)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Control.AsyncActivation`1&lt;Microsoft.FSharp.Core.Unit&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Collections.Generic.IEnumerator`1&lt;a&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Control.AsyncActivation`1&lt;Microsoft.FSharp.Core.Unit&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Control.AsyncActivation`1&lt;Microsoft.FSharp.Core.Unit&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Control.AsyncActivation`1&lt;Microsoft.FSharp.Core.Unit&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(a)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Runtime.ExceptionServices.ExceptionDispatchInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.OperationCanceledException)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Control.AsyncActivation`1&lt;a&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(Microsoft.FSharp.Control.AsyncActivation`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ContinueImmediate" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ContinueWithPostOrQueue" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetWaitHandle" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="Close" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="GrabResult" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="RegisterResult" signature="(T,System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AwaitResult_NoDirectCancelOrTimeout" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TryWaitForResultSynchronously" signature="(Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="System.IDisposable.Dispose" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Control.AsyncActivation`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,Microsoft.FSharp.Core.Unit&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Object,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Create" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,Microsoft.FSharp.Core.Unit&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(a)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Runtime.ExceptionServices.ExceptionDispatchInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.OperationCanceledException)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(a)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Runtime.ExceptionServices.ExceptionDispatchInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.OperationCanceledException)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Runtime.ExceptionServices.ExceptionDispatchInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.OperationCanceledException)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Runtime.ExceptionServices.ExceptionDispatchInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.OperationCanceledException)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Runtime.ExceptionServices.ExceptionDispatchInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.OperationCanceledException)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Threading.Tasks.Task`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Threading.Tasks.Task)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.AsyncCallback,System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetResult" signature="(Microsoft.FSharp.Control.AsyncResult`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetResult" signature="()" line-rate="1" branch-rate="1" complexity="4">
              <lines />
            </method>
            <method name="IsClosed" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Close" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="Token" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CancelAsync" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="CheckForNotSynchronous" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="System.IAsyncResult.get_IsCompleted" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.IAsyncResult.get_CompletedSynchronously" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.IAsyncResult.get_AsyncWaitHandle" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.IAsyncResult.get_AsyncState" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.IDisposable.Dispose" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="beginAction" signature="(Microsoft.FSharp.Control.FSharpAsync`1&lt;T&gt;,System.AsyncCallback,a)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="endAction" signature="(System.IAsyncResult)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="cancelAction" signature="(System.IAsyncResult)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Runtime.ExceptionServices.ExceptionDispatchInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.OperationCanceledException)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Control.AsyncResult`1" filename="F:\workspace\_work\1\s\src\fsharp\FSharp.Core\async.fs" line-rate="1" branch-rate="1" complexity="3">
          <methods>
            <method name="Commit" signature="()" line-rate="1" branch-rate="1" complexity="3">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Control.AsyncReturn" filename="F:\workspace\_work\1\s\src\fsharp\FSharp.Core\async.fs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name="Fake" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Control.CommonExtensions" filename="F:\workspace\_work\1\s\src\fsharp\FSharp.Core\async.fs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name="AsyncRead" signature="(System.IO.Stream,System.Byte[],Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AsyncReadBytes" signature="(System.IO.Stream,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AsyncWrite" signature="(System.IO.Stream,System.Byte[],Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AddToObservable" signature="(System.IObservable`1&lt;T&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;T,Microsoft.FSharp.Core.Unit&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SubscribeToObservable" signature="(System.IObservable`1&lt;T&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;T,Microsoft.FSharp.Core.Unit&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Tuple`5&lt;System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.IAsyncResult)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Control.AsyncActivation`1&lt;Microsoft.FSharp.Core.Unit&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Control.AsyncActivation`1&lt;System.Byte[]&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Control.AsyncActivation`1&lt;System.Byte[]&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Tuple`5&lt;System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.IAsyncResult)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="System.IObserver&lt;'T&gt;.OnNext" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="System.IObserver&lt;'T&gt;.OnError" signature="(System.Exception)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="System.IObserver&lt;'T&gt;.OnCompleted" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Control.EventDelegee`1" filename="F:\workspace\_work\1\s\src\fsharp\FSharp.Core\event.fs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.IObserver`1&lt;TArgs&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Object,TArgs)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Object,a,b)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Object,a,b,c)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Object,a,b,c,d)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Object,a,b,c,d,e)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Object,a,b,c,d,e,f)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Control.EventModule" filename="F:\workspace\_work\1\s\src\fsharp\FSharp.Core\eventmodule.fs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Map" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,TResult&gt;,Microsoft.FSharp.Control.IEvent`2&lt;TDel,T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Filter" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.Boolean&gt;,Microsoft.FSharp.Control.IEvent`2&lt;TDel,T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Partition" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.Boolean&gt;,Microsoft.FSharp.Control.IEvent`2&lt;TDel,T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Choose" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,Microsoft.FSharp.Core.FSharpOption`1&lt;TResult&gt;&gt;,Microsoft.FSharp.Control.IEvent`2&lt;TDel,T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Scan" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;TResult,Microsoft.FSharp.Core.FSharpFunc`2&lt;T,TResult&gt;&gt;,TResult,Microsoft.FSharp.Control.IEvent`2&lt;TDel,T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Add" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,Microsoft.FSharp.Core.Unit&gt;,Microsoft.FSharp.Control.IEvent`2&lt;TDel,T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Pairwise" signature="(Microsoft.FSharp.Control.IEvent`2&lt;TDel,T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Merge" signature="(Microsoft.FSharp.Control.IEvent`2&lt;TDel1,T&gt;,Microsoft.FSharp.Control.IEvent`2&lt;TDel2,T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Split" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,Microsoft.FSharp.Core.FSharpChoice`2&lt;TResult1,TResult2&gt;&gt;,Microsoft.FSharp.Control.IEvent`2&lt;TDel,T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Control.ExceptionDispatchInfoHelpers" filename="F:\workspace\_work\1\s\src\fsharp\FSharp.Core\async.fs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="ExceptionDispatchInfo.GetAssociatedSourceException" signature="(System.Runtime.ExceptionServices.ExceptionDispatchInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExceptionDispatchInfo.RestoreOrCapture.Static" signature="(System.Exception)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExceptionDispatchInfo.ThrowAny" signature="(System.Runtime.ExceptionServices.ExceptionDispatchInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Control.FSharpAsync" filename="F:\workspace\_work\1\s\src\fsharp\FSharp.Core\async.fs" line-rate="1" branch-rate="1" complexity="18">
          <methods>
            <method name="CancellationToken" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CancelCheck" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="FromContinuations" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Tuple`3&lt;Microsoft.FSharp.Core.FSharpFunc`2&lt;T,Microsoft.FSharp.Core.Unit&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Exception,Microsoft.FSharp.Core.Unit&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;System.OperationCanceledException,Microsoft.FSharp.Core.Unit&gt;&gt;,Microsoft.FSharp.Core.Unit&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DefaultCancellationToken" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CancelDefaultToken" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Catch" signature="(Microsoft.FSharp.Control.FSharpAsync`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="RunSynchronously" signature="(Microsoft.FSharp.Control.FSharpAsync`1&lt;T&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Threading.CancellationToken&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Start" signature="(Microsoft.FSharp.Control.FSharpAsync`1&lt;Microsoft.FSharp.Core.Unit&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Threading.CancellationToken&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="StartAsTask" signature="(Microsoft.FSharp.Control.FSharpAsync`1&lt;T&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Threading.Tasks.TaskCreationOptions&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Threading.CancellationToken&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="StartChildAsTask" signature="(Microsoft.FSharp.Control.FSharpAsync`1&lt;T&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Threading.Tasks.TaskCreationOptions&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Parallel" signature="(System.Collections.Generic.IEnumerable`1&lt;Microsoft.FSharp.Control.FSharpAsync`1&lt;T&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Parallel" signature="(System.Collections.Generic.IEnumerable`1&lt;Microsoft.FSharp.Control.FSharpAsync`1&lt;T&gt;&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Sequential" signature="(System.Collections.Generic.IEnumerable`1&lt;Microsoft.FSharp.Control.FSharpAsync`1&lt;T&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Choice" signature="(System.Collections.Generic.IEnumerable`1&lt;Microsoft.FSharp.Control.FSharpAsync`1&lt;Microsoft.FSharp.Core.FSharpOption`1&lt;T&gt;&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="StartWithContinuationsUsingDispatchInfo" signature="(Microsoft.FSharp.Control.FSharpAsync`1&lt;T&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;T,Microsoft.FSharp.Core.Unit&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Runtime.ExceptionServices.ExceptionDispatchInfo,Microsoft.FSharp.Core.Unit&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;System.OperationCanceledException,Microsoft.FSharp.Core.Unit&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Threading.CancellationToken&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="StartWithContinuations" signature="(Microsoft.FSharp.Control.FSharpAsync`1&lt;T&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;T,Microsoft.FSharp.Core.Unit&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Exception,Microsoft.FSharp.Core.Unit&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;System.OperationCanceledException,Microsoft.FSharp.Core.Unit&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Threading.CancellationToken&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="StartImmediateAsTask" signature="(Microsoft.FSharp.Control.FSharpAsync`1&lt;T&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Threading.CancellationToken&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="StartImmediate" signature="(Microsoft.FSharp.Control.FSharpAsync`1&lt;Microsoft.FSharp.Core.Unit&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Threading.CancellationToken&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Sleep" signature="(System.Int64)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Sleep" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Sleep" signature="(System.TimeSpan)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AwaitWaitHandle" signature="(System.Threading.WaitHandle,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AwaitIAsyncResult" signature="(System.IAsyncResult,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BindResult" signature="(Microsoft.FSharp.Control.AsyncResult`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AwaitAndBindResult_NoDirectCancelOrTimeout" signature="(Microsoft.FSharp.Control.AsyncPrimitives/ResultCell`1&lt;Microsoft.FSharp.Control.AsyncResult`1&lt;T&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AwaitAndBindChildResult" signature="(System.Threading.CancellationTokenSource,Microsoft.FSharp.Control.AsyncPrimitives/ResultCell`1&lt;Microsoft.FSharp.Control.AsyncResult`1&lt;T&gt;&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FromBeginEnd" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Tuple`2&lt;System.AsyncCallback,System.Object&gt;,System.IAsyncResult&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;System.IAsyncResult,T&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;Microsoft.FSharp.Core.FSharpFunc`2&lt;Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FromBeginEnd" signature="(TArg1,Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Tuple`3&lt;TArg1,System.AsyncCallback,System.Object&gt;,System.IAsyncResult&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;System.IAsyncResult,T&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;Microsoft.FSharp.Core.FSharpFunc`2&lt;Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FromBeginEnd" signature="(TArg1,TArg2,Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Tuple`4&lt;TArg1,TArg2,System.AsyncCallback,System.Object&gt;,System.IAsyncResult&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;System.IAsyncResult,T&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;Microsoft.FSharp.Core.FSharpFunc`2&lt;Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FromBeginEnd" signature="(TArg1,TArg2,TArg3,Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Tuple`5&lt;TArg1,TArg2,TArg3,System.AsyncCallback,System.Object&gt;,System.IAsyncResult&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;System.IAsyncResult,T&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;Microsoft.FSharp.Core.FSharpFunc`2&lt;Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AsBeginEnd" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;TArg,Microsoft.FSharp.Control.FSharpAsync`1&lt;T&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AwaitEvent" signature="(Microsoft.FSharp.Control.IEvent`2&lt;TDel,T&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;Microsoft.FSharp.Core.FSharpFunc`2&lt;Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SwitchToNewThread" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="SwitchToThreadPool" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="StartChild" signature="(Microsoft.FSharp.Control.FSharpAsync`1&lt;T&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SwitchToContext" signature="(System.Threading.SynchronizationContext)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="OnCancel" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TryCancelled" signature="(Microsoft.FSharp.Control.FSharpAsync`1&lt;T&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;System.OperationCanceledException,Microsoft.FSharp.Core.Unit&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AwaitTask" signature="(System.Threading.Tasks.Task`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AwaitTask" signature="(System.Threading.Tasks.Task)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;a,Microsoft.FSharp.Control.AsyncReturn&gt;,a)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Exception)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Control.AsyncActivation`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Runtime.ExceptionServices.ExceptionDispatchInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Control.AsyncActivation`1&lt;Microsoft.FSharp.Core.FSharpChoice`2&lt;T,System.Exception&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Control.AsyncActivation`1&lt;System.Threading.Tasks.Task`1&lt;T&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Threading.CancellationToken)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Control.AsyncActivation`1&lt;System.Threading.Tasks.Task`1&lt;T&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Runtime.ExceptionServices.ExceptionDispatchInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.OperationCanceledException)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Int32,Microsoft.FSharp.Control.FSharpAsync`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Control.AsyncActivation`1&lt;T[]&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Control.AsyncActivation`1&lt;T[]&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Runtime.ExceptionServices.ExceptionDispatchInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.OperationCanceledException)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.FSharpOption`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Runtime.ExceptionServices.ExceptionDispatchInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.OperationCanceledException)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Control.AsyncActivation`1&lt;Microsoft.FSharp.Core.FSharpOption`1&lt;T&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Control.AsyncActivation`1&lt;Microsoft.FSharp.Core.FSharpOption`1&lt;T&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Runtime.ExceptionServices.ExceptionDispatchInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Exception)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.OperationCanceledException)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Runtime.ExceptionServices.ExceptionDispatchInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.OperationCanceledException)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="()" line-rate="1" branch-rate="1" complexity="3">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Control.AsyncActivation`1&lt;Microsoft.FSharp.Core.Unit&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Control.AsyncActivation`1&lt;System.Boolean&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="()" line-rate="1" branch-rate="1" complexity="3">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Control.AsyncActivation`1&lt;System.Boolean&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Object,System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Control.AsyncActivation`1&lt;System.Boolean&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Control.AsyncActivation`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Control.AsyncResult`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Control.AsyncActivation`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Control.AsyncActivation`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Control.AsyncActivation`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Control.AsyncActivation`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Control.AsyncActivation`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Control.AsyncActivation`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Control.AsyncActivation`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Control.AsyncActivation`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Control.AsyncActivation`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.IAsyncResult)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Control.AsyncActivation`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Threading.CancellationToken)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Control.AsyncActivation`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Tuple`2&lt;System.AsyncCallback,System.Object&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Tuple`2&lt;System.AsyncCallback,System.Object&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Tuple`2&lt;System.AsyncCallback,System.Object&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.IAsyncResult)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Tuple`3&lt;TArg,System.AsyncCallback,a&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Threading.CancellationToken)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Control.AsyncActivation`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Control.AsyncActivation`1&lt;Microsoft.FSharp.Core.Unit&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="Invoke" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Runtime.ExceptionServices.ExceptionDispatchInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.OperationCanceledException)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Control.AsyncActivation`1&lt;Microsoft.FSharp.Control.FSharpAsync`1&lt;T&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Threading.CancellationToken)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Control.AsyncActivation`1&lt;Microsoft.FSharp.Control.FSharpAsync`1&lt;T&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Control.AsyncActivation`1&lt;Microsoft.FSharp.Core.Unit&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="System.IDisposable.Dispose" signature="()" line-rate="1" branch-rate="1" complexity="3">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Control.AsyncActivation`1&lt;System.IDisposable&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Threading.CancellationToken)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Control.AsyncActivation`1&lt;System.IDisposable&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Control.AsyncActivation`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Control.AsyncActivation`1&lt;Microsoft.FSharp.Core.Unit&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Control.FSharpAsyncBuilder" filename="F:\workspace\_work\1\s\src\fsharp\FSharp.Core\async.fs" line-rate="1" branch-rate="1" complexity="2">
          <methods>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Zero" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Delay" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Control.FSharpAsync`1&lt;T&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Return" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ReturnFrom" signature="(Microsoft.FSharp.Control.FSharpAsync`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Bind" signature="(Microsoft.FSharp.Control.FSharpAsync`1&lt;T&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;T,Microsoft.FSharp.Control.FSharpAsync`1&lt;TResult&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Using" signature="(T,Microsoft.FSharp.Core.FSharpFunc`2&lt;T,Microsoft.FSharp.Control.FSharpAsync`1&lt;TResult&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="While" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;Microsoft.FSharp.Core.Unit,System.Boolean&gt;,Microsoft.FSharp.Control.FSharpAsync`1&lt;Microsoft.FSharp.Core.Unit&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="For" signature="(System.Collections.Generic.IEnumerable`1&lt;T&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;T,Microsoft.FSharp.Control.FSharpAsync`1&lt;Microsoft.FSharp.Core.Unit&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TryFinally" signature="(Microsoft.FSharp.Control.FSharpAsync`1&lt;T&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Control.AsyncActivation`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Control.AsyncActivation`1&lt;TResult&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Control.AsyncActivation`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Control.AsyncActivation`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Exception)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Control.AsyncActivation`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Control.FSharpAsyncReplyChannel`1" filename="F:\workspace\_work\1\s\src\fsharp\FSharp.Core\mailbox.fs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;TReply,Microsoft.FSharp.Core.Unit&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Reply" signature="(TReply)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Control.FSharpDelegateEvent`1" filename="F:\workspace\_work\1\s\src\fsharp\FSharp.Core\event.fs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Trigger" signature="(System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Publish" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Microsoft.FSharp.Control.IDelegateEvent&lt;'Delegate&gt;.AddHandler" signature="(TDelegate)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Microsoft.FSharp.Control.IDelegateEvent&lt;'Delegate&gt;.RemoveHandler" signature="(TDelegate)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Control.FSharpEvent`1" filename="F:\workspace\_work\1\s\src\fsharp\FSharp.Core\event.fs" line-rate="1" branch-rate="1" complexity="3">
          <methods>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Trigger" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Publish" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Object,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="System.IDisposable.Dispose" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="ToString" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Microsoft.FSharp.Control.IDelegateEvent&lt;Microsoft.FSharp.Control.Handler&lt;'T&gt;&gt;.AddHandler" signature="(Microsoft.FSharp.Control.FSharpHandler`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Microsoft.FSharp.Control.IDelegateEvent&lt;Microsoft.FSharp.Control.Handler&lt;'T&gt;&gt;.RemoveHandler" signature="(Microsoft.FSharp.Control.FSharpHandler`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="System.IObservable&lt;'T&gt;.Subscribe" signature="(System.IObserver`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Control.FSharpEvent`2" filename="F:\workspace\_work\1\s\src\fsharp\FSharp.Core\event.fs" line-rate="1" branch-rate="1" complexity="2">
          <methods>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Trigger" signature="(System.Object,TArgs)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Publish" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="System.IDisposable.Dispose" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="ToString" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Microsoft.FSharp.Control.IDelegateEvent&lt;'Delegate&gt;.AddHandler" signature="(TDelegate)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Microsoft.FSharp.Control.IDelegateEvent&lt;'Delegate&gt;.RemoveHandler" signature="(TDelegate)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="System.IObservable&lt;'Args&gt;.Subscribe" signature="(System.IObserver`1&lt;TArgs&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Control.FSharpMailboxProcessor`1" filename="F:\workspace\_work\1\s\src\fsharp\FSharp.Core\mailbox.fs" line-rate="1" branch-rate="1" complexity="3">
          <methods>
            <method name=".ctor" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;Microsoft.FSharp.Control.FSharpMailboxProcessor`1&lt;TMsg&gt;,Microsoft.FSharp.Control.FSharpAsync`1&lt;Microsoft.FSharp.Core.Unit&gt;&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Threading.CancellationToken&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CurrentQueueLength" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DefaultTimeout" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DefaultTimeout" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="add_Error" signature="(Microsoft.FSharp.Control.FSharpHandler`1&lt;System.Exception&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="remove_Error" signature="(Microsoft.FSharp.Control.FSharpHandler`1&lt;System.Exception&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Start" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="Post" signature="(TMsg)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TryPostAndReply" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;Microsoft.FSharp.Control.FSharpAsyncReplyChannel`1&lt;TReply&gt;,TMsg&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="PostAndReply" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;Microsoft.FSharp.Control.FSharpAsyncReplyChannel`1&lt;TReply&gt;,TMsg&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="PostAndTryAsyncReply" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;Microsoft.FSharp.Control.FSharpAsyncReplyChannel`1&lt;TReply&gt;,TMsg&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="PostAndAsyncReply" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;Microsoft.FSharp.Control.FSharpAsyncReplyChannel`1&lt;TReply&gt;,TMsg&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Receive" signature="(Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TryReceive" signature="(Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Scan" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;TMsg,Microsoft.FSharp.Core.FSharpOption`1&lt;Microsoft.FSharp.Control.FSharpAsync`1&lt;T&gt;&gt;&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TryScan" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;TMsg,Microsoft.FSharp.Core.FSharpOption`1&lt;Microsoft.FSharp.Control.FSharpAsync`1&lt;T&gt;&gt;&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Start" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;Microsoft.FSharp.Control.FSharpMailboxProcessor`1&lt;TMsg&gt;,Microsoft.FSharp.Control.FSharpAsync`1&lt;Microsoft.FSharp.Core.Unit&gt;&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Threading.CancellationToken&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="System.IDisposable.Dispose" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Control.AsyncActivation`1&lt;Microsoft.FSharp.Core.Unit&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Exception)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Control.AsyncActivation`1&lt;Microsoft.FSharp.Core.Unit&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(TReply)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(TReply)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Control.AsyncActivation`1&lt;Microsoft.FSharp.Core.FSharpOption`1&lt;TReply&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Control.AsyncActivation`1&lt;Microsoft.FSharp.Core.FSharpOption`1&lt;TReply&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Control.AsyncPrimitives/ResultCell`1&lt;TReply&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Control.AsyncActivation`1&lt;Microsoft.FSharp.Core.FSharpOption`1&lt;TReply&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(TReply)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Control.AsyncActivation`1&lt;Microsoft.FSharp.Core.FSharpOption`1&lt;TReply&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Control.AsyncActivation`1&lt;TReply&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.FSharpOption`1&lt;TReply&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Control.AsyncActivation`1&lt;TReply&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(TReply)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Control.Latch" filename="F:\workspace\_work\1\s\src\fsharp\FSharp.Core\async.fs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Enter" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Control.LazyExtensions" filename="F:\workspace\_work\1\s\src\fsharp\FSharp.Core\prim-types.fs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name="Create" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;Microsoft.FSharp.Core.Unit,T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CreateFromValue" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Lazy`1.get_IsForced" signature="(System.Lazy`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Force" signature="(System.Lazy`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SynchronizedForceDeprecated" signature="(System.Lazy`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="UnsynchronizedForceDeprecated" signature="(System.Lazy`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Control.LinkedSubSource" filename="F:\workspace\_work\1\s\src\fsharp\FSharp.Core\async.fs" line-rate="1" branch-rate="1" complexity="3">
          <methods>
            <method name=".ctor" signature="(System.Threading.CancellationToken)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Token" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Cancel" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Dispose" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.IDisposable.Dispose" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Control.Mailbox`1" filename="F:\workspace\_work\1\s\src\fsharp\FSharp.Core\mailbox.fs" line-rate="1" branch-rate="1" complexity="11">
          <methods>
            <method name=".ctor" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="inbox" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CurrentQueueLength" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ScanArrivalsUnsafe" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;TMsg,Microsoft.FSharp.Core.FSharpOption`1&lt;a&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ScanArrivals" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;TMsg,Microsoft.FSharp.Core.FSharpOption`1&lt;a&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ScanInbox" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;TMsg,Microsoft.FSharp.Core.FSharpOption`1&lt;a&gt;&gt;,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ReceiveFromArrivalsUnsafe" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="ReceiveFromArrivals" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="ReceiveFromInbox" signature="()" line-rate="1" branch-rate="1" complexity="3">
              <lines />
            </method>
            <method name="Post" signature="(TMsg)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TryScan" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;TMsg,Microsoft.FSharp.Core.FSharpOption`1&lt;Microsoft.FSharp.Control.FSharpAsync`1&lt;T&gt;&gt;&gt;,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Scan" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;TMsg,Microsoft.FSharp.Core.FSharpOption`1&lt;Microsoft.FSharp.Control.FSharpAsync`1&lt;T&gt;&gt;&gt;,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TryReceive" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Receive" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="System.IDisposable.Dispose" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="ensurePulse" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="waitOneWithCancellation" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="waitOne" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Control.AsyncActivation`1&lt;System.Boolean&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Control.AsyncActivation`1&lt;Microsoft.FSharp.Core.FSharpOption`1&lt;T&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Control.AsyncActivation`1&lt;Microsoft.FSharp.Core.FSharpOption`1&lt;T&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Threading.CancellationToken)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Control.AsyncActivation`1&lt;Microsoft.FSharp.Core.FSharpOption`1&lt;T&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Control.AsyncActivation`1&lt;Microsoft.FSharp.Core.FSharpOption`1&lt;T&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Control.AsyncActivation`1&lt;Microsoft.FSharp.Core.FSharpOption`1&lt;T&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Control.AsyncActivation`1&lt;Microsoft.FSharp.Core.FSharpOption`1&lt;T&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Control.AsyncActivation`1&lt;Microsoft.FSharp.Core.FSharpOption`1&lt;T&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.FSharpChoice`2&lt;System.Boolean,Microsoft.FSharp.Core.Unit&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Control.AsyncActivation`1&lt;Microsoft.FSharp.Core.FSharpOption`1&lt;T&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Control.AsyncActivation`1&lt;Microsoft.FSharp.Core.FSharpOption`1&lt;T&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Control.AsyncActivation`1&lt;Microsoft.FSharp.Core.FSharpOption`1&lt;T&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Control.AsyncActivation`1&lt;Microsoft.FSharp.Core.FSharpOption`1&lt;T&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Control.AsyncActivation`1&lt;Microsoft.FSharp.Core.FSharpOption`1&lt;T&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Control.AsyncActivation`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Control.AsyncActivation`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.FSharpOption`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Control.AsyncActivation`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Control.AsyncActivation`1&lt;Microsoft.FSharp.Core.FSharpOption`1&lt;TMsg&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Control.AsyncActivation`1&lt;Microsoft.FSharp.Core.FSharpOption`1&lt;TMsg&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Control.AsyncActivation`1&lt;Microsoft.FSharp.Core.FSharpOption`1&lt;TMsg&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Control.AsyncActivation`1&lt;Microsoft.FSharp.Core.FSharpOption`1&lt;TMsg&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Control.AsyncActivation`1&lt;TMsg&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Control.AsyncActivation`1&lt;TMsg&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Control.AsyncActivation`1&lt;TMsg&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Control.AsyncActivation`1&lt;TMsg&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Control.ObservableModule" filename="F:\workspace\_work\1\s\src\fsharp\FSharp.Core\observable.fs" line-rate="1" branch-rate="1" complexity="15">
          <methods>
            <method name="Map" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,TResult&gt;,System.IObservable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="succeed@14" signature="(System.IObserver`1&lt;TResult&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;TResult&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Choose" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,Microsoft.FSharp.Core.FSharpOption`1&lt;TResult&gt;&gt;,System.IObservable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Filter" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.Boolean&gt;,System.IObservable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Partition" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.Boolean&gt;,System.IObservable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Scan" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;TResult,Microsoft.FSharp.Core.FSharpFunc`2&lt;T,TResult&gt;&gt;,TResult,System.IObservable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Add" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,Microsoft.FSharp.Core.Unit&gt;,System.IObservable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Subscribe" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,Microsoft.FSharp.Core.Unit&gt;,System.IObservable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Pairwise" signature="(System.IObservable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Merge" signature="(System.IObservable`1&lt;T&gt;,System.IObservable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Split" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,Microsoft.FSharp.Core.FSharpChoice`2&lt;TResult1,TResult2&gt;&gt;,System.IObservable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="System.IObserver&lt;'T&gt;.OnNext" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="System.IObserver&lt;'T&gt;.OnError" signature="(System.Exception)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="System.IObserver&lt;'T&gt;.OnCompleted" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="Next" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Error" signature="(System.Exception)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Completed" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.IObservable&lt;'U&gt;.Subscribe" signature="(System.IObserver`1&lt;TResult&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Next" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Error" signature="(System.Exception)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Completed" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.IObservable&lt;'U&gt;.Subscribe" signature="(System.IObserver`1&lt;TResult&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Next" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Error" signature="(System.Exception)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Completed" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.IObservable&lt;'U&gt;.Subscribe" signature="(System.IObserver`1&lt;TResult&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Next" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Error" signature="(System.Exception)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Completed" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.IObservable&lt;System.Tuple&lt;'T, 'T&gt;&gt;.Subscribe" signature="(System.IObserver`1&lt;System.Tuple`2&lt;T,T&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="System.IObserver&lt;'T&gt;.OnNext" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="System.IObserver&lt;'T&gt;.OnError" signature="(System.Exception)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="System.IObserver&lt;'T&gt;.OnCompleted" signature="()" line-rate="1" branch-rate="1" complexity="4">
              <lines />
            </method>
            <method name="System.IObserver&lt;'T&gt;.OnNext" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="System.IObserver&lt;'T&gt;.OnError" signature="(System.Exception)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="System.IObserver&lt;'T&gt;.OnCompleted" signature="()" line-rate="1" branch-rate="1" complexity="4">
              <lines />
            </method>
            <method name="System.IDisposable.Dispose" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.IObservable&lt;'T&gt;.Subscribe" signature="(System.IObserver`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Control.Once" filename="F:\workspace\_work\1\s\src\fsharp\FSharp.Core\async.fs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Do" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Control.Trampoline" filename="F:\workspace\_work\1\s\src\fsharp\FSharp.Core\async.fs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ThisThreadHasTrampoline" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Execute" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Control.AsyncReturn&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IncrementBindCount" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Set" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Control.AsyncReturn&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="OnExceptionRaised" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Runtime.ExceptionServices.ExceptionDispatchInfo,Microsoft.FSharp.Control.AsyncReturn&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Control.TrampolineHolder" filename="F:\workspace\_work\1\s\src\fsharp\FSharp.Core\async.fs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="ExecuteWithTrampoline" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Control.AsyncReturn&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="PostWithTrampoline" signature="(System.Threading.SynchronizationContext,Microsoft.FSharp.Core.FSharpFunc`2&lt;Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Control.AsyncReturn&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="QueueWorkItemWithTrampoline" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Control.AsyncReturn&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="PostOrQueueWithTrampoline" signature="(System.Threading.SynchronizationContext,Microsoft.FSharp.Core.FSharpFunc`2&lt;Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Control.AsyncReturn&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="StartThreadWithTrampoline" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Control.AsyncReturn&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="OnExceptionRaised" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Runtime.ExceptionServices.ExceptionDispatchInfo,Microsoft.FSharp.Control.AsyncReturn&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HijackCheckThenCall" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,Microsoft.FSharp.Control.AsyncReturn&gt;,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Control.WebExtensions" filename="F:\workspace\_work\1\s\src\fsharp\FSharp.Core\async.fs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="catchFunction@554" signature="(Microsoft.FSharp.Core.FSharpRef`1&lt;System.Boolean&gt;,System.Exception)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AsyncGetResponse" signature="(System.Net.WebRequest)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="WebClient.Download" signature="(System.Net.WebClient,Microsoft.FSharp.Control.IEvent`2&lt;T,a&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;Microsoft.FSharp.Core.FSharpFunc`2&lt;b,Microsoft.FSharp.Core.FSharpFunc`2&lt;c,Microsoft.FSharp.Core.Unit&gt;&gt;,T&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Object,Microsoft.FSharp.Core.Unit&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;c,d&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="handler@1761-1" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Object,Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Net.DownloadStringCompletedEventArgs,Microsoft.FSharp.Core.Unit&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AsyncDownloadString" signature="(System.Net.WebClient,System.Uri)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="handler@1761-2" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Object,Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Net.DownloadDataCompletedEventArgs,Microsoft.FSharp.Core.Unit&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AsyncDownloadData" signature="(System.Net.WebClient,System.Uri)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="handler@1761-3" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Object,Microsoft.FSharp.Core.FSharpFunc`2&lt;System.ComponentModel.AsyncCompletedEventArgs,Microsoft.FSharp.Core.Unit&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AsyncDownloadFile" signature="(System.Net.WebClient,System.Uri,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Tuple`2&lt;System.AsyncCallback,System.Object&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.IAsyncResult)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Exception)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Control.AsyncActivation`1&lt;System.Net.WebResponse&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Object,c)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(c)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(b)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Tuple`3&lt;Microsoft.FSharp.Core.FSharpFunc`2&lt;d,Microsoft.FSharp.Core.Unit&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Exception,Microsoft.FSharp.Core.Unit&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;System.OperationCanceledException,Microsoft.FSharp.Core.Unit&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.IDisposable)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.IDisposable)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Control.AsyncActivation`1&lt;d&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Net.DownloadStringCompletedEventHandler)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Object,System.Net.DownloadStringCompletedEventArgs)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Object,Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Net.DownloadStringCompletedEventArgs,Microsoft.FSharp.Core.Unit&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Net.DownloadStringCompletedEventArgs)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Tuple`3&lt;Microsoft.FSharp.Core.FSharpFunc`2&lt;System.String,Microsoft.FSharp.Core.Unit&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Exception,Microsoft.FSharp.Core.Unit&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;System.OperationCanceledException,Microsoft.FSharp.Core.Unit&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.IDisposable)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Control.AsyncActivation`1&lt;System.String&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Object,System.Net.DownloadStringCompletedEventArgs)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Net.DownloadDataCompletedEventHandler)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Object,System.Net.DownloadDataCompletedEventArgs)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Object,Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Net.DownloadDataCompletedEventArgs,Microsoft.FSharp.Core.Unit&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Net.DownloadDataCompletedEventArgs)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Tuple`3&lt;Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Byte[],Microsoft.FSharp.Core.Unit&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Exception,Microsoft.FSharp.Core.Unit&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;System.OperationCanceledException,Microsoft.FSharp.Core.Unit&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.IDisposable)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Control.AsyncActivation`1&lt;System.Byte[]&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Object,System.Net.DownloadDataCompletedEventArgs)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.ComponentModel.AsyncCompletedEventHandler)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Object,System.ComponentModel.AsyncCompletedEventArgs)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Object,Microsoft.FSharp.Core.FSharpFunc`2&lt;System.ComponentModel.AsyncCompletedEventArgs,Microsoft.FSharp.Core.Unit&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.ComponentModel.AsyncCompletedEventArgs)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Tuple`3&lt;Microsoft.FSharp.Core.FSharpFunc`2&lt;Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Exception,Microsoft.FSharp.Core.Unit&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;System.OperationCanceledException,Microsoft.FSharp.Core.Unit&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.IDisposable)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Control.AsyncActivation`1&lt;Microsoft.FSharp.Core.Unit&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Object,System.ComponentModel.AsyncCompletedEventArgs)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Core.AbstractClassAttribute" filename="F:\workspace\_work\1\s\src\fsharp\FSharp.Core\prim-types.fs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Core.AllowNullLiteralAttribute" filename="F:\workspace\_work\1\s\src\fsharp\FSharp.Core\prim-types.fs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name=".ctor" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Value" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Core.AutoOpenAttribute" filename="F:\workspace\_work\1\s\src\fsharp\FSharp.Core\prim-types.fs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name=".ctor" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Path" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Core.AutoSerializableAttribute" filename="F:\workspace\_work\1\s\src\fsharp\FSharp.Core\prim-types.fs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Value" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Core.ByRefKinds" filename="F:\workspace\_work\1\s\src\fsharp\FSharp.Core\prim-types.fs" line-rate="1" branch-rate="1" complexity="2">
          <methods>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Core.ClassAttribute" filename="F:\workspace\_work\1\s\src\fsharp\FSharp.Core\prim-types.fs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Core.CLIEventAttribute" filename="F:\workspace\_work\1\s\src\fsharp\FSharp.Core\prim-types.fs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Core.CLIMutableAttribute" filename="F:\workspace\_work\1\s\src\fsharp\FSharp.Core\prim-types.fs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Core.ComparisonConditionalOnAttribute" filename="F:\workspace\_work\1\s\src\fsharp\FSharp.Core\prim-types.fs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" filename="F:\workspace\_work\1\s\src\fsharp\FSharp.Core\prim-types.fs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.Int32[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Counts" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Core.CompilationMappingAttribute" filename="F:\workspace\_work\1\s\src\fsharp\FSharp.Core\prim-types.fs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(Microsoft.FSharp.Core.SourceConstructFlags,System.Int32,System.Int32,System.String,System.Type[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SourceConstructFlags" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SequenceNumber" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="VariantNumber" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(Microsoft.FSharp.Core.SourceConstructFlags)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(Microsoft.FSharp.Core.SourceConstructFlags,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(Microsoft.FSharp.Core.SourceConstructFlags,System.Int32,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String,System.Type[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TypeDefinitions" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ResourceName" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Core.CompilationRepresentationAttribute" filename="F:\workspace\_work\1\s\src\fsharp\FSharp.Core\prim-types.fs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(Microsoft.FSharp.Core.CompilationRepresentationFlags)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Flags" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Core.CompilationSourceNameAttribute" filename="F:\workspace\_work\1\s\src\fsharp\FSharp.Core\prim-types.fs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SourceName" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Core.CompiledNameAttribute" filename="F:\workspace\_work\1\s\src\fsharp\FSharp.Core\prim-types.fs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CompiledName" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Core.CompilerMessageAttribute" filename="F:\workspace\_work\1\s\src\fsharp\FSharp.Core\prim-types.fs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.String,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Message" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MessageNumber" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsError" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsError" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsHidden" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsHidden" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Core.CompilerServices.GeneratedSequenceBase`1" filename="F:\workspace\_work\1\s\src\fsharp\FSharp.Core\seqcore.fs" line-rate="1" branch-rate="1" complexity="20">
          <methods>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MoveNextImpl" signature="()" line-rate="1" branch-rate="1" complexity="6">
              <lines />
            </method>
            <method name="System.Collections.Generic.IEnumerable&lt;'T&gt;.GetEnumerator" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.Collections.IEnumerable.GetEnumerator" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.Collections.Generic.IEnumerator&lt;'T&gt;.get_Current" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="System.IDisposable.Dispose" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="System.Collections.IEnumerator.get_Current" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="System.Collections.IEnumerator.MoveNext" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.Collections.IEnumerator.Reset" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="GetFreshEnumerator" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="GenerateNext" signature="(System.Collections.Generic.IEnumerable`1&lt;T&gt;&amp;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Close" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="get_CheckClose" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="get_LastGenerated" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Core.CompilerServices.MeasureProduct`2" filename="F:\workspace\_work\1\s\src\fsharp\FSharp.Core\fslib-extra-pervasives.fs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Core.CompilerServices.RuntimeHelpers" filename="F:\workspace\_work\1\s\src\fsharp\FSharp.Core\seqcore.fs" line-rate="1" branch-rate="1" complexity="25">
          <methods>
            <method name="Generate" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;Microsoft.FSharp.Core.Unit,a&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;a,Microsoft.FSharp.Core.FSharpOption`1&lt;b&gt;&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;a,Microsoft.FSharp.Core.Unit&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="EnumerateFromFunctions" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;Microsoft.FSharp.Core.Unit,T&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.Boolean&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;T,TResult&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="iter@238" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;Microsoft.FSharp.Core.FSharpFunc`2&lt;Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="takeOuter@273" signature="(Microsoft.FSharp.Core.CompilerServices.RuntimeHelpers/ConcatEnumerator`2&lt;T,TResult&gt;,Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="takeInner@266" signature="(Microsoft.FSharp.Core.CompilerServices.RuntimeHelpers/ConcatEnumerator`2&lt;T,TResult&gt;,Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="EnumerateUsing" signature="(T,Microsoft.FSharp.Core.FSharpFunc`2&lt;T,TCollection&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="mkConcatSeq" signature="(System.Collections.Generic.IEnumerable`1&lt;?&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="start@314-1" signature="(Microsoft.FSharp.Core.FSharpRef`1&lt;System.Boolean&gt;,Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="getCurr@311-1" signature="(Microsoft.FSharp.Core.FSharpRef`1&lt;System.Boolean&gt;,Microsoft.FSharp.Core.FSharpRef`1&lt;Microsoft.FSharp.Core.FSharpOption`1&lt;System.Collections.Generic.IEnumerable`1&lt;T&gt;&gt;&gt;,Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="EnumerateWhile" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;Microsoft.FSharp.Core.Unit,System.Boolean&gt;,System.Collections.Generic.IEnumerable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="EnumerateThenFinally" signature="(System.Collections.Generic.IEnumerable`1&lt;T&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CreateEvent" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;TDelegate,Microsoft.FSharp.Core.Unit&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;TDelegate,Microsoft.FSharp.Core.Unit&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Object,Microsoft.FSharp.Core.FSharpFunc`2&lt;TArgs,Microsoft.FSharp.Core.Unit&gt;&gt;,TDelegate&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Value" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Comparer" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="System.Collections.Generic.IEqualityComparer&lt;Microsoft.FSharp.Core.CompilerServices.RuntimeHelpers.StructBox&lt;'T&gt;&gt;.GetHashCode" signature="(Microsoft.FSharp.Core.CompilerServices.RuntimeHelpers/StructBox`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="System.Collections.Generic.IEqualityComparer&lt;Microsoft.FSharp.Core.CompilerServices.RuntimeHelpers.StructBox&lt;'T&gt;&gt;.Equals" signature="(Microsoft.FSharp.Core.CompilerServices.RuntimeHelpers/StructBox`1&lt;T&gt;,Microsoft.FSharp.Core.CompilerServices.RuntimeHelpers/StructBox`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;Microsoft.FSharp.Core.Unit,System.Collections.Generic.IEnumerable`1&lt;T&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="System.Collections.Generic.IEnumerable&lt;'T&gt;.GetEnumerator" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="System.Collections.IEnumerable.GetEnumerator" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Collections.Generic.IEnumerable`1&lt;TResult&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Finish" signature="()" line-rate="1" branch-rate="1" complexity="3">
              <lines />
            </method>
            <method name="GetCurrent" signature="()" line-rate="1" branch-rate="1" complexity="3">
              <lines />
            </method>
            <method name="Microsoft.FSharp.Core.CompilerServices.RuntimeHelpers.IFinallyEnumerator.AppendFinallyAction" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="System.Collections.Generic.IEnumerator&lt;'T&gt;.get_Current" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.Collections.IEnumerator.get_Current" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.Collections.IEnumerator.MoveNext" signature="()" line-rate="1" branch-rate="1" complexity="3">
              <lines />
            </method>
            <method name="System.Collections.IEnumerator.Reset" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.IDisposable.Dispose" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="System.Collections.Generic.IEnumerator&lt;System.Collections.Generic.IEnumerable&lt;'T&gt;&gt;.get_Current" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.Collections.IEnumerator.get_Current" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.Collections.IEnumerator.MoveNext" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="System.Collections.IEnumerator.Reset" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.IDisposable.Dispose" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Object,TArgs)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="System.IDisposable.Dispose" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="ToString" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Microsoft.FSharp.Control.IDelegateEvent&lt;'Delegate&gt;.AddHandler" signature="(TDelegate)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Microsoft.FSharp.Control.IDelegateEvent&lt;'Delegate&gt;.RemoveHandler" signature="(TDelegate)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="System.IObservable&lt;'Args&gt;.Subscribe" signature="(System.IObserver`1&lt;TArgs&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Core.CompilerServices.TypeProviderAssemblyAttribute" filename="F:\workspace\_work\1\s\src\fsharp\FSharp.Core\fslib-extra-pervasives.fs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name=".ctor" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="AssemblyName" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Core.CompilerServices.TypeProviderAttribute" filename="F:\workspace\_work\1\s\src\fsharp\FSharp.Core\fslib-extra-pervasives.fs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Core.CompilerServices.TypeProviderConfig" filename="F:\workspace\_work\1\s\src\fsharp\FSharp.Core\fslib-extra-pervasives.fs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;System.String,System.Boolean&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ResolutionFolder" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ResolutionFolder" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="RuntimeAssembly" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="RuntimeAssembly" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ReferencedAssemblies" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ReferencedAssemblies" signature="(System.String[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TemporaryFolder" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TemporaryFolder" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsInvalidationSupported" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsInvalidationSupported" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsHostedExecution" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsHostedExecution" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SystemRuntimeAssemblyVersion" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SystemRuntimeAssemblyVersion" signature="(System.Version)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SystemRuntimeContainsType" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Core.CompilerServices.TypeProviderDefinitionLocationAttribute" filename="F:\workspace\_work\1\s\src\fsharp\FSharp.Core\fslib-extra-pervasives.fs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FilePath" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FilePath" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Line" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Line" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Column" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Column" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Core.CompilerServices.TypeProviderEditorHideMethodsAttribute" filename="F:\workspace\_work\1\s\src\fsharp\FSharp.Core\fslib-extra-pervasives.fs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Core.CompilerServices.TypeProviderXmlDocAttribute" filename="F:\workspace\_work\1\s\src\fsharp\FSharp.Core\fslib-extra-pervasives.fs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CommentText" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Core.CustomComparisonAttribute" filename="F:\workspace\_work\1\s\src\fsharp\FSharp.Core\prim-types.fs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Core.CustomEqualityAttribute" filename="F:\workspace\_work\1\s\src\fsharp\FSharp.Core\prim-types.fs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Core.CustomOperationAttribute" filename="F:\workspace\_work\1\s\src\fsharp\FSharp.Core\prim-types.fs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Name" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AllowIntoPattern" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AllowIntoPattern" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsLikeZip" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsLikeZip" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsLikeJoin" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsLikeJoin" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsLikeGroupJoin" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsLikeGroupJoin" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="JoinConditionWord" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="JoinConditionWord" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MaintainsVariableSpace" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MaintainsVariableSpace" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MaintainsVariableSpaceUsingBind" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MaintainsVariableSpaceUsingBind" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Core.DefaultAugmentationAttribute" filename="F:\workspace\_work\1\s\src\fsharp\FSharp.Core\prim-types.fs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Value" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Core.DefaultValueAttribute" filename="F:\workspace\_work\1\s\src\fsharp\FSharp.Core\prim-types.fs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name=".ctor" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Check" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Core.DetailedExceptions" filename="F:\workspace\_work\1\s\src\fsharp\FSharp.Core\local.fs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="invalidArgFmt" signature="(System.String,System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="invalidOpFmt" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="invalidArgDifferentListLength" signature="(System.String,System.String,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="invalidArg3ListsDifferent" signature="(System.String,System.String,System.String,System.Int32,System.Int32,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="invalidOpListNotEnoughElements" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="invalidOpExceededSeqLength" signature="(System.String,System.Int32,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="invalidArgInputMustBeNonNegative" signature="(System.String,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="invalidArgInputMustBePositive" signature="(System.String,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="invalidArgOutOfRange" signature="(System.String,System.Int32,System.String,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="invalidArgDifferentArrayLength" signature="(System.String,System.Int32,System.String,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="invalidArg3ArraysDifferent" signature="(System.String,System.String,System.String,System.Int32,System.Int32,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Core.EntryPointAttribute" filename="F:\workspace\_work\1\s\src\fsharp\FSharp.Core\prim-types.fs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Core.EqualityConditionalOnAttribute" filename="F:\workspace\_work\1\s\src\fsharp\FSharp.Core\prim-types.fs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Core.ExperimentalAttribute" filename="F:\workspace\_work\1\s\src\fsharp\FSharp.Core\prim-types.fs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Message" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Core.ExtraTopLevelOperators" filename="F:\workspace\_work\1\s\src\fsharp\FSharp.Core\fslib-extra-pervasives.fs" line-rate="1" branch-rate="1" complexity="22">
          <methods>
            <method name="CreateSet" signature="(System.Collections.Generic.IEnumerable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="current@125-10" signature="(System.Int32,System.Collections.Generic.KeyValuePair`2&lt;TKey,T&gt;[],Microsoft.FSharp.Core.FSharpRef`1&lt;System.Int32&gt;,Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="dictValueType" signature="(System.Collections.Generic.IEnumerable`1&lt;System.Tuple`2&lt;TKey,T&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="dictRefType" signature="(System.Collections.Generic.IEnumerable`1&lt;System.Tuple`2&lt;TKey,T&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CreateDictionary" signature="(System.Collections.Generic.IEnumerable`1&lt;System.Tuple`2&lt;TKey,TValue&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CreateReadOnlyDictionary" signature="(System.Collections.Generic.IEnumerable`1&lt;System.Tuple`2&lt;TKey,TValue&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="getArray" signature="(System.Collections.Generic.IEnumerable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="array2D$cont@192" signature="(?[],System.Int32,Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CreateArray2D" signature="(System.Collections.Generic.IEnumerable`1&lt;?&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="PrintFormatToString" signature="(Microsoft.FSharp.Core.PrintfFormat`4&lt;T,Microsoft.FSharp.Core.Unit,System.String,System.String&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="PrintFormatToStringThenFail" signature="(Microsoft.FSharp.Core.PrintfFormat`4&lt;T,Microsoft.FSharp.Core.Unit,System.String,TResult&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="PrintFormatToTextWriter" signature="(System.IO.TextWriter,Microsoft.FSharp.Core.PrintfFormat`4&lt;T,System.IO.TextWriter,Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="PrintFormatLineToTextWriter" signature="(System.IO.TextWriter,Microsoft.FSharp.Core.PrintfFormat`4&lt;T,System.IO.TextWriter,Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="PrintFormat" signature="(Microsoft.FSharp.Core.PrintfFormat`4&lt;T,System.IO.TextWriter,Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="PrintFormatToError" signature="(Microsoft.FSharp.Core.PrintfFormat`4&lt;T,System.IO.TextWriter,Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="PrintFormatLine" signature="(Microsoft.FSharp.Core.PrintfFormat`4&lt;T,System.IO.TextWriter,Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="PrintFormatLineToError" signature="(Microsoft.FSharp.Core.PrintfFormat`4&lt;T,System.IO.TextWriter,Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToSingle" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToSingle$W" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.Single&gt;,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToDouble" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToDouble$W" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.Double&gt;,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToByte" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToByte$W" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.Byte&gt;,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToSByte" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToSByte$W" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.SByte&gt;,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SpliceExpression" signature="(Microsoft.FSharp.Quotations.FSharpExpr`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SpliceUntypedExpression" signature="(Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="LazyPattern" signature="(System.Lazy`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Collections.Generic.Dictionary`2&lt;TSafeKey,T&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;TKey,TSafeKey&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;TSafeKey,TKey&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Count" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="System.Collections.Generic.IDictionary&lt;'Key, 'T&gt;.get_Item" signature="(TKey)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="System.Collections.Generic.IDictionary&lt;'Key, 'T&gt;.set_Item" signature="(TKey,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="System.Collections.Generic.IDictionary&lt;'Key, 'T&gt;.get_Keys" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.Collections.Generic.IDictionary&lt;'Key, 'T&gt;.get_Values" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.Collections.Generic.IDictionary&lt;'Key, 'T&gt;.Add" signature="(TKey,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="System.Collections.Generic.IDictionary&lt;'Key, 'T&gt;.ContainsKey" signature="(TKey)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="System.Collections.Generic.IDictionary&lt;'Key, 'T&gt;.TryGetValue" signature="(TKey,T&amp;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="System.Collections.Generic.IDictionary&lt;'Key, 'T&gt;.Remove" signature="(TKey)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="System.Collections.Generic.IReadOnlyDictionary&lt;'Key, 'T&gt;.get_Item" signature="(TKey)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="System.Collections.Generic.IReadOnlyDictionary&lt;'Key, 'T&gt;.get_Keys" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.Collections.Generic.IReadOnlyDictionary&lt;'Key, 'T&gt;.TryGetValue" signature="(TKey,T&amp;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="System.Collections.Generic.IReadOnlyDictionary&lt;'Key, 'T&gt;.get_Values" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.Collections.Generic.IReadOnlyDictionary&lt;'Key, 'T&gt;.ContainsKey" signature="(TKey)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;'Key, 'T&gt;&gt;.Add" signature="(System.Collections.Generic.KeyValuePair`2&lt;TKey,T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;'Key, 'T&gt;&gt;.Clear" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;'Key, 'T&gt;&gt;.Remove" signature="(System.Collections.Generic.KeyValuePair`2&lt;TKey,T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;'Key, 'T&gt;&gt;.Contains" signature="(System.Collections.Generic.KeyValuePair`2&lt;TKey,T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;'Key, 'T&gt;&gt;.CopyTo" signature="(System.Collections.Generic.KeyValuePair`2&lt;TKey,T&gt;[],System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;'Key, 'T&gt;&gt;.get_IsReadOnly" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;'Key, 'T&gt;&gt;.get_Count" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.Collections.Generic.IReadOnlyCollection&lt;System.Collections.Generic.KeyValuePair&lt;'Key, 'T&gt;&gt;.get_Count" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;'Key, 'T&gt;&gt;.GetEnumerator" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="System.Collections.IEnumerable.GetEnumerator" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name=".ctor" signature="(Microsoft.FSharp.Core.ExtraTopLevelOperators/DictImpl`3&lt;TSafeKey,TKey,T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Items" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="System.Collections.Generic.ICollection&lt;'Key&gt;.Add" signature="(TKey)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="System.Collections.Generic.ICollection&lt;'Key&gt;.Clear" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.Collections.Generic.ICollection&lt;'Key&gt;.Remove" signature="(TKey)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="System.Collections.Generic.ICollection&lt;'Key&gt;.Contains" signature="(TKey)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="System.Collections.Generic.ICollection&lt;'Key&gt;.CopyTo" signature="(TKey[],System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="System.Collections.Generic.ICollection&lt;'Key&gt;.get_IsReadOnly" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.Collections.Generic.ICollection&lt;'Key&gt;.get_Count" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.Collections.Generic.IEnumerable&lt;'Key&gt;.GetEnumerator" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.Collections.IEnumerable.GetEnumerator" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Collections.Generic.KeyValuePair`2&lt;TSafeKey,T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="System.Collections.Generic.IEnumerator&lt;System.Collections.Generic.KeyValuePair&lt;'Key, 'T&gt;&gt;.get_Current" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.Collections.IEnumerator.get_Current" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.Collections.IEnumerator.MoveNext" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="System.Collections.IEnumerator.Reset" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.IDisposable.Dispose" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Collections.Generic.KeyValuePair`2&lt;TSafeKey,T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(TKey)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(TKey)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.CompilerServices.RuntimeHelpers/StructBox`1&lt;TKey&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToByte" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToByte$W" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.Byte&gt;,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToSByte" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToSByte$W" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.SByte&gt;,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Core.FSharpFunc`2" filename="F:\workspace\_work\1\s\src\fsharp\FSharp.Core\prim-types.fs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="op_Implicit" signature="(System.Func`2&lt;T,TResult&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="op_Implicit" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,TResult&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="op_Implicit" signature="(System.Converter`2&lt;T,TResult&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="op_Implicit" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,TResult&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FromConverter" signature="(System.Converter`2&lt;T,TResult&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToConverter" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,TResult&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Core.FSharpInterfaceDataVersionAttribute" filename="F:\workspace\_work\1\s\src\fsharp\FSharp.Core\prim-types.fs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.Int32,System.Int32,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Major" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Minor" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Release" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Core.FSharpOption`1" filename="F:\workspace\_work\1\s\src\fsharp\FSharp.Core\prim-types.fs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name="op_Implicit" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DebugDisplay" signature="(Microsoft.FSharp.Core.FSharpOption`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToString" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Core.FSharpRef`1" filename="F:\workspace\_work\1\s\src\fsharp\FSharp.Core\prim-types.fs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Value" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Value" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Core.FSharpTypeFunc" filename="F:\workspace\_work\1\s\src\fsharp\FSharp.Core\prim-types.fs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Core.FSharpValueOption`1" filename="F:\workspace\_work\1\s\src\fsharp\FSharp.Core\prim-types.fs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Value" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="None" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Some" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="op_Implicit" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DebugDisplay" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToString" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Core.FuncConvert" filename="F:\workspace\_work\1\s\src\fsharp\FSharp.Core\prim-types.fs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="ToFSharpFunc" signature="(System.Action`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToFSharpFunc" signature="(System.Converter`2&lt;T,TResult&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToFSharpFunc" signature="(System.Func`2&lt;a,b&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FromFunc" signature="(System.Func`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FromFunc" signature="(System.Func`2&lt;T,TResult&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FromFunc" signature="(System.Func`3&lt;T1,T2,TResult&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FromFunc" signature="(System.Func`4&lt;T1,T2,T3,TResult&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FromFunc" signature="(System.Func`5&lt;T1,T2,T3,T4,TResult&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FromFunc" signature="(System.Func`6&lt;T1,T2,T3,T4,T5,TResult&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FromAction" signature="(System.Action)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FromAction" signature="(System.Action`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FromAction" signature="(System.Action`2&lt;T1,T2&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FromAction" signature="(System.Action`3&lt;T1,T2,T3&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FromAction" signature="(System.Action`4&lt;T1,T2,T3,T4&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FromAction" signature="(System.Action`5&lt;T1,T2,T3,T4,T5&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FuncFromTupled" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Tuple`2&lt;T1,T2&gt;,TResult&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FuncFromTupled" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Tuple`3&lt;T1,T2,T3&gt;,TResult&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FuncFromTupled" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Tuple`4&lt;T1,T2,T3,T4&gt;,TResult&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FuncFromTupled" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Tuple`5&lt;T1,T2,T3,T4,T5&gt;,TResult&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(a)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(T1,T2)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(T1,T2,T3)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(T1,T2,T3,T4)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(T1,T2,T3,T4,T5)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(T1,T2)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(T1,T2,T3)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(T1,T2,T3,T4)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(T1,T2,T3,T4,T5)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(T1,T2)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(T1,T2,T3)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(T1,T2,T3,T4)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(T1,T2,T3,T4,T5)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Core.GeneralizableValueAttribute" filename="F:\workspace\_work\1\s\src\fsharp\FSharp.Core\prim-types.fs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Core.InterfaceAttribute" filename="F:\workspace\_work\1\s\src\fsharp\FSharp.Core\prim-types.fs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Core.LanguagePrimitives" filename="F:\workspace\_work\1\s\src\fsharp\FSharp.Core\prim-types.fs" line-rate="1" branch-rate="1" complexity="23">
          <methods>
            <method name="anyToStringShowingNull" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GenericEquality" signature="(T,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GenericEqualityER" signature="(T,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GenericEqualityWithComparer" signature="(System.Collections.IEqualityComparer,T,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GenericComparison" signature="(T,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GenericComparisonWithComparer" signature="(System.Collections.IComparer,T,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GenericLessThan" signature="(T,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GenericGreaterThan" signature="(T,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GenericLessOrEqual" signature="(T,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GenericGreaterOrEqual" signature="(T,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GenericMinimum" signature="(T,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GenericMaximum" signature="(T,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="PhysicalEquality" signature="(T,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="PhysicalHash" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GenericHash" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GenericLimitedHash" signature="(System.Int32,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GenericHashWithComparer" signature="(System.Collections.IEqualityComparer,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".cctor$cont@2055-1" signature="(System.Type,Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".cctor$cont@2055" signature="(System.Type,Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FastGenericEqualityComparerFromTable" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="FastGenericEqualityComparer" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="FastLimitedGenericEqualityComparer" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".cctor$cont@2171-4" signature="(System.Type,Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".cctor$cont@2171-3" signature="(System.Type,Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".cctor$cont@2151-2" signature="(System.Type,Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FastGenericComparerFromTable" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="FastGenericComparer" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="FastGenericComparerCanBeNull" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="EnumOfValue" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="EnumToValue" signature="(TEnum)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FloatWithMeasure" signature="(System.Double)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Float32WithMeasure" signature="(System.Single)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DecimalWithMeasure" signature="(System.Decimal)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Int32WithMeasure" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Int16WithMeasure" signature="(System.Int16)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SByteWithMeasure" signature="(System.SByte)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Int64WithMeasure" signature="(System.Int64)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="isOXB" signature="(System.Char)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="get0OXB" signature="(System.String,System.Int32&amp;,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="getSign32" signature="(System.String,System.Int32&amp;,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="getSign64" signature="(System.String,System.Int32&amp;,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ParseUInt32" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ParseInt32" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ParseInt64" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ParseUInt64" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".cctor$cont@2399-5" signature="(System.Type,Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".cctor$cont@2423-6" signature="(System.Type,Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GenericZeroDynamic" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="GenericOneDynamic" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="GenericZero" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="GenericZero$W" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;Microsoft.FSharp.Core.Unit,T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GenericOne" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="GenericOne$W" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;Microsoft.FSharp.Core.Unit,T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Type.GetSingleStaticMethodByTypes" signature="(System.Type,System.String,System.Type[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="UnaryDynamicImpl" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BinaryDynamicImpl" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AdditionDynamic" signature="(T1,T2)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SubtractionDynamic" signature="(T1,T2)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MultiplyDynamic" signature="(T1,T2)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DivisionDynamic" signature="(T1,T2)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ModulusDynamic" signature="(T1,T2)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="UnaryNegationDynamic" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CheckedAdditionDynamic" signature="(T1,T2)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CheckedSubtractionDynamic" signature="(T1,T2)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CheckedMultiplyDynamic" signature="(T1,T2)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CheckedUnaryNegationDynamic" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="LeftShiftDynamic" signature="(T1,T2)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="RightShiftDynamic" signature="(T1,T2)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BitwiseAndDynamic" signature="(T1,T2)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BitwiseOrDynamic" signature="(T1,T2)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExclusiveOrDynamic" signature="(T1,T2)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="LogicalNotDynamic" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExplicitDynamic" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="LessThanDynamic" signature="(T1,T2)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GreaterThanDynamic" signature="(T1,T2)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="LessThanOrEqualDynamic" signature="(T1,T2)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GreaterThanOrEqualDynamic" signature="(T1,T2)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="EqualityDynamic" signature="(T1,T2)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="InequalityDynamic" signature="(T1,T2)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DivideByIntDynamic" signature="(T,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DivideByInt" signature="(T,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DivideByInt$W" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Int32,T&gt;&gt;,T,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="System.Collections.Generic.IEqualityComparer&lt;System.Boolean&gt;.GetHashCode" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="System.Collections.Generic.IEqualityComparer&lt;System.Boolean&gt;.Equals" signature="(System.Boolean,System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="System.Collections.Generic.IEqualityComparer&lt;System.Char&gt;.GetHashCode" signature="(System.Char)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="System.Collections.Generic.IEqualityComparer&lt;System.Char&gt;.Equals" signature="(System.Char,System.Char)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="System.Collections.Generic.IEqualityComparer&lt;System.String&gt;.Equals" signature="(System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="System.Collections.Generic.IEqualityComparer&lt;System.SByte&gt;.GetHashCode" signature="(System.SByte)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="System.Collections.Generic.IEqualityComparer&lt;System.SByte&gt;.Equals" signature="(System.SByte,System.SByte)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="System.Collections.Generic.IEqualityComparer&lt;System.Int16&gt;.GetHashCode" signature="(System.Int16)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="System.Collections.Generic.IEqualityComparer&lt;System.Int16&gt;.Equals" signature="(System.Int16,System.Int16)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="System.Collections.Generic.IEqualityComparer&lt;System.Int32&gt;.GetHashCode" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="System.Collections.Generic.IEqualityComparer&lt;System.Int32&gt;.Equals" signature="(System.Int32,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="System.Collections.Generic.IEqualityComparer&lt;System.Int64&gt;.GetHashCode" signature="(System.Int64)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="System.Collections.Generic.IEqualityComparer&lt;System.Int64&gt;.Equals" signature="(System.Int64,System.Int64)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="System.Collections.Generic.IEqualityComparer&lt;System.IntPtr&gt;.GetHashCode" signature="(System.IntPtr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="System.Collections.Generic.IEqualityComparer&lt;System.IntPtr&gt;.Equals" signature="(System.IntPtr,System.IntPtr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="System.Collections.Generic.IEqualityComparer&lt;System.Byte&gt;.GetHashCode" signature="(System.Byte)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="System.Collections.Generic.IEqualityComparer&lt;System.Byte&gt;.Equals" signature="(System.Byte,System.Byte)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="System.Collections.Generic.IEqualityComparer&lt;System.UInt16&gt;.GetHashCode" signature="(System.UInt16)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="System.Collections.Generic.IEqualityComparer&lt;System.UInt16&gt;.Equals" signature="(System.UInt16,System.UInt16)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="System.Collections.Generic.IEqualityComparer&lt;System.UInt32&gt;.GetHashCode" signature="(System.UInt32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="System.Collections.Generic.IEqualityComparer&lt;System.UInt32&gt;.Equals" signature="(System.UInt32,System.UInt32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="System.Collections.Generic.IEqualityComparer&lt;System.UInt64&gt;.GetHashCode" signature="(System.UInt64)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="System.Collections.Generic.IEqualityComparer&lt;System.UInt64&gt;.Equals" signature="(System.UInt64,System.UInt64)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="System.Collections.Generic.IEqualityComparer&lt;System.UIntPtr&gt;.GetHashCode" signature="(System.UIntPtr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="System.Collections.Generic.IEqualityComparer&lt;System.UIntPtr&gt;.Equals" signature="(System.UIntPtr,System.UIntPtr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="System.Collections.Generic.IEqualityComparer&lt;System.Double&gt;.GetHashCode" signature="(System.Double)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="System.Collections.Generic.IEqualityComparer&lt;System.Double&gt;.Equals" signature="(System.Double,System.Double)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="System.Collections.Generic.IEqualityComparer&lt;System.Single&gt;.GetHashCode" signature="(System.Single)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="System.Collections.Generic.IEqualityComparer&lt;System.Single&gt;.Equals" signature="(System.Single,System.Single)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="System.Collections.Generic.IEqualityComparer&lt;System.Decimal&gt;.GetHashCode" signature="(System.Decimal)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="System.Collections.Generic.IEqualityComparer&lt;System.Decimal&gt;.Equals" signature="(System.Decimal,System.Decimal)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Function" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="System.Collections.Generic.IEqualityComparer&lt;'T&gt;.GetHashCode" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="System.Collections.Generic.IEqualityComparer&lt;'T&gt;.Equals" signature="(T,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="System.Collections.Generic.IEqualityComparer&lt;'T&gt;.GetHashCode" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="System.Collections.Generic.IEqualityComparer&lt;'T&gt;.Equals" signature="(T,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="System.Collections.Generic.IComparer&lt;System.String&gt;.Compare" signature="(System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="System.Collections.Generic.IComparer&lt;System.Decimal&gt;.Compare" signature="(System.Decimal,System.Decimal)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Value" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ValueCanBeNullIfDefaultSemantics" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="System.Collections.Generic.IComparer&lt;'T&gt;.Compare" signature="(T,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="System.Collections.Generic.IComparer&lt;'T&gt;.Compare" signature="(T,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Result" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Result" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(T,TResult)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.String,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.String,T1,T2)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="PhysicalEqualityIntrinsic" signature="(T,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="PhysicalHashIntrinsic" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FailGenericComparison" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GenericCompare$cont@856" signature="(Microsoft.FSharp.Core.LanguagePrimitives/HashCompare/GenericComparer,System.Object,System.Object,System.Array,Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GenericCompare" signature="(Microsoft.FSharp.Core.LanguagePrimitives/HashCompare/GenericComparer,System.Object,System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="check1@936" signature="(Microsoft.FSharp.Core.LanguagePrimitives/HashCompare/GenericComparer,System.Array,System.Array,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="check@969-1" signature="(Microsoft.FSharp.Core.LanguagePrimitives/HashCompare/GenericComparer,System.Array,System.Array,System.Int32,System.Int64[],System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="checkN@960" signature="(Microsoft.FSharp.Core.LanguagePrimitives/HashCompare/GenericComparer,System.Array,System.Array,System.Int32,System.Int64[],System.Int32,System.Int64,System.Int64,System.Int64)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="precheck@950" signature="(System.Array,System.Array,System.Int32,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="check0@935" signature="(Microsoft.FSharp.Core.LanguagePrimitives/HashCompare/GenericComparer,System.Array,System.Array,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="check@913" signature="(Microsoft.FSharp.Core.LanguagePrimitives/HashCompare/GenericComparer,System.Array,System.Array,System.Int64,System.Int64,System.Int64,System.Int64)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GenericComparisonArbArrayWithComparer" signature="(Microsoft.FSharp.Core.LanguagePrimitives/HashCompare/GenericComparer,System.Array,System.Array)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GenericComparisonObjArrayWithComparer" signature="(Microsoft.FSharp.Core.LanguagePrimitives/HashCompare/GenericComparer,System.Object[],System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GenericComparisonByteArray" signature="(System.Byte[],System.Byte[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GenericComparisonWithComparerIntrinsic" signature="(System.Collections.IComparer,T,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GenericComparisonIntrinsic" signature="(T,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GenericLessThanIntrinsic" signature="(T,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GenericGreaterThanIntrinsic" signature="(T,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GenericGreaterOrEqualIntrinsic" signature="(T,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GenericLessOrEqualIntrinsic" signature="(T,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GenericEqualityByteArray" signature="(System.Byte[],System.Byte[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GenericEqualityInt32Array" signature="(System.Int32[],System.Int32[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="f32eq@1259" signature="(System.Boolean,System.Single,System.Single)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GenericEqualitySingleArray" signature="(System.Boolean,System.Single[],System.Single[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="feq@1276" signature="(System.Boolean,System.Double,System.Double)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GenericEqualityDoubleArray" signature="(System.Boolean,System.Double[],System.Double[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GenericEqualityCharArray" signature="(System.Char[],System.Char[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GenericEqualityInt64Array" signature="(System.Int64[],System.Int64[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GenericEqualityObj$cont@1336" signature="(System.Boolean,System.Collections.IEqualityComparer,System.Object,System.Object,System.Array,Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GenericEqualityObj" signature="(System.Boolean,System.Collections.IEqualityComparer,System.Object,System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="check@1409-3" signature="(System.Boolean,System.Collections.IEqualityComparer,System.Array,System.Array,System.Int32,System.Int64[],System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="checkN@1402-1" signature="(System.Boolean,System.Collections.IEqualityComparer,System.Array,System.Array,System.Int32,System.Int64[],System.Int32,System.Int64,System.Int64,System.Int64)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="check0@1386-1" signature="(System.Boolean,System.Collections.IEqualityComparer,System.Array,System.Array,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GenericEqualityArbArray" signature="(System.Boolean,System.Collections.IEqualityComparer,System.Array,System.Array)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GenericEqualityObjArray" signature="(System.Boolean,System.Collections.IEqualityComparer,System.Object[],System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GenericEqualityIntrinsic" signature="(T,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GenericEqualityERIntrinsic" signature="(T,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GenericEqualityWithComparerIntrinsic" signature="(System.Collections.IEqualityComparer,T,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GenericHashObjArray" signature="(System.Collections.IEqualityComparer,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GenericHashByteArray" signature="(System.Byte[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GenericHashInt32Array" signature="(System.Int32[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GenericHashInt64Array" signature="(System.Int64[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GenericHashArbArray" signature="(System.Collections.IEqualityComparer,System.Array)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GenericHashParamObj" signature="(System.Collections.IEqualityComparer,System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GenericHashIntrinsic" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="LimitedGenericHashIntrinsic" signature="(System.Int32,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GenericHashWithComparerIntrinsic" signature="(System.Collections.IEqualityComparer,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FastHashTuple2" signature="(System.Collections.IEqualityComparer,System.Tuple`2&lt;T1,T2&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FastHashTuple3" signature="(System.Collections.IEqualityComparer,System.Tuple`3&lt;T1,T2,T3&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FastHashTuple4" signature="(System.Collections.IEqualityComparer,System.Tuple`4&lt;T1,T2,T3,T4&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FastHashTuple5" signature="(System.Collections.IEqualityComparer,System.Tuple`5&lt;T1,T2,T3,T4,T5&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FastCompareTuple2" signature="(System.Collections.IComparer,System.Tuple`2&lt;T1,T2&gt;,System.Tuple`2&lt;T1,T2&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FastCompareTuple3" signature="(System.Collections.IComparer,System.Tuple`3&lt;T1,T2,T3&gt;,System.Tuple`3&lt;T1,T2,T3&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FastCompareTuple4" signature="(System.Collections.IComparer,System.Tuple`4&lt;T1,T2,T3,T4&gt;,System.Tuple`4&lt;T1,T2,T3,T4&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FastCompareTuple5" signature="(System.Collections.IComparer,System.Tuple`5&lt;T1,T2,T3,T4,T5&gt;,System.Tuple`5&lt;T1,T2,T3,T4,T5&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ThrowsOnPER" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="System.Collections.IComparer.Compare" signature="(System.Object,System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="System.Collections.IEqualityComparer.Equals" signature="(System.Object,System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="System.Collections.IEqualityComparer.GetHashCode" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="System.Collections.IEqualityComparer.Equals" signature="(System.Object,System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="System.Collections.IEqualityComparer.GetHashCode" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Fresh" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="System.Collections.IEqualityComparer.Equals" signature="(System.Object,System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="System.Collections.IEqualityComparer.GetHashCode" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.Collections.IEqualityComparer.Equals" signature="(System.Object,System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="System.Collections.IEqualityComparer.GetHashCode" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.Collections.IEqualityComparer.Equals" signature="(System.Object,System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="System.Collections.IEqualityComparer.GetHashCode" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="getTypeInfo" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="UnboxGeneric" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="UnboxFast" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TypeTestGeneric" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TypeTestFast" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Dispose" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FailInit" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="FailStaticInit" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="CheckThis" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MakeDecimal" signature="(System.Int32,System.Int32,System.Int32,System.Boolean,System.Byte)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetString" signature="(System.String,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CreateInstance" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="GetArray" signature="(T[],System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetArray" signature="(T[],System.Int32,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetArray2D" signature="(T[0...,0...],System.Int32,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetArray2D" signature="(T[0...,0...],System.Int32,System.Int32,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetArray3D" signature="(T[0...,0...,0...],System.Int32,System.Int32,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetArray3D" signature="(T[0...,0...,0...],System.Int32,System.Int32,System.Int32,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetArray4D" signature="(T[0...,0...,0...,0...],System.Int32,System.Int32,System.Int32,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetArray4D" signature="(T[0...,0...,0...,0...],System.Int32,System.Int32,System.Int32,System.Int32,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TypeInfo" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="op_Amp" signature="(System.Boolean,System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="op_BooleanAnd" signature="(System.Boolean,System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Or" signature="(System.Boolean,System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="op_BooleanOr" signature="(System.Boolean,System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="op_AddressOf" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="op_IntegerAddressOf" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Core.LiteralAttribute" filename="F:\workspace\_work\1\s\src\fsharp\FSharp.Core\prim-types.fs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Core.MatchFailureException" filename="F:\workspace\_work\1\s\src\fsharp\FSharp.Core\prim-types.fs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name="GetHashCode" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Message" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Equals" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Core.MeasureAnnotatedAbbreviationAttribute" filename="F:\workspace\_work\1\s\src\fsharp\FSharp.Core\prim-types.fs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Core.MeasureAttribute" filename="F:\workspace\_work\1\s\src\fsharp\FSharp.Core\prim-types.fs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Core.NoComparisonAttribute" filename="F:\workspace\_work\1\s\src\fsharp\FSharp.Core\prim-types.fs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Core.NoDynamicInvocationAttribute" filename="F:\workspace\_work\1\s\src\fsharp\FSharp.Core\prim-types.fs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name=".ctor" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="IsLegacy" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Core.NoEqualityAttribute" filename="F:\workspace\_work\1\s\src\fsharp\FSharp.Core\prim-types.fs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Core.NumericLiterals" filename="F:\workspace\_work\1\s\src\fsharp\FSharp.Core\math\z.fs" line-rate="1" branch-rate="1" complexity="2">
          <methods>
            <method name="action@4737-4" signature="(System.Int64,Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FromZero" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="FromOne" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="FromInt32" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FromInt64" signature="(System.Int64)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="action@4737-5" signature="(System.String,Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FromStringDynamic" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FromString" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Core.Operators" filename="F:\workspace\_work\1\s\src\fsharp\FSharp.Core\prim-types.fs" line-rate="1" branch-rate="1" complexity="145">
          <methods>
            <method name="CreateSequence" signature="(System.Collections.Generic.IEnumerable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Unbox" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Box" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TryUnbox" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsNull" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsNotNull" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Raise" signature="(System.Exception)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Failure" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FailurePattern" signature="(System.Exception)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="op_LessThan" signature="(T,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="op_GreaterThan" signature="(T,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="op_GreaterThanOrEqual" signature="(T,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="op_LessThanOrEqual" signature="(T,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="op_Equality" signature="(T,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="op_Inequality" signature="(T,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Compare" signature="(T,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Max" signature="(T,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Min" signature="(T,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FailWith" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="InvalidArg" signature="(System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NullArg" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="InvalidOp" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Rethrow" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Reraise" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Fst" signature="(System.Tuple`2&lt;T1,T2&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Snd" signature="(System.Tuple`2&lt;T1,T2&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Ignore" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Ref" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="op_ColonEquals" signature="(Microsoft.FSharp.Core.FSharpRef`1&lt;T&gt;,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="op_Dereference" signature="(Microsoft.FSharp.Core.FSharpRef`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="op_PipeRight" signature="(T1,Microsoft.FSharp.Core.FSharpFunc`2&lt;T1,TResult&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="op_PipeRight2" signature="(T1,T2,Microsoft.FSharp.Core.FSharpFunc`2&lt;T1,Microsoft.FSharp.Core.FSharpFunc`2&lt;T2,TResult&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="op_PipeRight3" signature="(T1,T2,T3,Microsoft.FSharp.Core.FSharpFunc`2&lt;T1,Microsoft.FSharp.Core.FSharpFunc`2&lt;T2,Microsoft.FSharp.Core.FSharpFunc`2&lt;T3,TResult&gt;&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="op_PipeLeft" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,TResult&gt;,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="op_PipeLeft2" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T1,Microsoft.FSharp.Core.FSharpFunc`2&lt;T2,TResult&gt;&gt;,T1,T2)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="op_PipeLeft3" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T1,Microsoft.FSharp.Core.FSharpFunc`2&lt;T2,Microsoft.FSharp.Core.FSharpFunc`2&lt;T3,TResult&gt;&gt;&gt;,T1,T2,T3)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="op_ComposeRight" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T1,T2&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;T2,T3&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="op_ComposeLeft" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T2,T3&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;T1,T2&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="op_Concatenate" signature="(System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DefaultArg" signature="(Microsoft.FSharp.Core.FSharpOption`1&lt;T&gt;,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DefaultValueArg" signature="(Microsoft.FSharp.Core.FSharpValueOption`1&lt;T&gt;,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="op_UnaryNegation" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="op_UnaryNegation$W" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,T&gt;,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="op_Addition" signature="(T1,T2)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="op_Addition$W" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T1,Microsoft.FSharp.Core.FSharpFunc`2&lt;T2,T3&gt;&gt;,T1,T2)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="op_Subtraction" signature="(T1,T2)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="op_Subtraction$W" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T1,Microsoft.FSharp.Core.FSharpFunc`2&lt;T2,T3&gt;&gt;,T1,T2)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="op_Multiply" signature="(T1,T2)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="op_Multiply$W" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T1,Microsoft.FSharp.Core.FSharpFunc`2&lt;T2,T3&gt;&gt;,T1,T2)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="op_Division" signature="(T1,T2)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="op_Division$W" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T1,Microsoft.FSharp.Core.FSharpFunc`2&lt;T2,T3&gt;&gt;,T1,T2)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="op_Modulus" signature="(T1,T2)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="op_Modulus$W" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T1,Microsoft.FSharp.Core.FSharpFunc`2&lt;T2,T3&gt;&gt;,T1,T2)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="op_UnaryPlus" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="op_UnaryPlus$W" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,T&gt;,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="op_LeftShift" signature="(T,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="op_LeftShift$W" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Int32,T&gt;&gt;,T,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="op_RightShift" signature="(T,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="op_RightShift$W" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Int32,T&gt;&gt;,T,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="op_BitwiseAnd" signature="(T,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="op_BitwiseAnd$W" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,Microsoft.FSharp.Core.FSharpFunc`2&lt;T,T&gt;&gt;,T,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="op_BitwiseOr" signature="(T,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="op_BitwiseOr$W" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,Microsoft.FSharp.Core.FSharpFunc`2&lt;T,T&gt;&gt;,T,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="op_ExclusiveOr" signature="(T,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="op_ExclusiveOr$W" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,Microsoft.FSharp.Core.FSharpFunc`2&lt;T,T&gt;&gt;,T,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="op_LogicalNot" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="op_LogicalNot$W" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,T&gt;,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="op_Append" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;T&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Increment" signature="(Microsoft.FSharp.Core.FSharpRef`1&lt;System.Int32&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Decrement" signature="(Microsoft.FSharp.Core.FSharpRef`1&lt;System.Int32&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Exit" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToByte" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToByte$W" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.Byte&gt;,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToSByte" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToSByte$W" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.SByte&gt;,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToUInt16" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToUInt16$W" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.UInt16&gt;,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToInt16" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToInt16$W" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.Int16&gt;,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToUInt32" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToUInt32$W" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.UInt32&gt;,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToInt32" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToInt32$W" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.Int32&gt;,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToInt" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToInt$W" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.Int32&gt;,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToUInt" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToUInt$W" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.UInt32&gt;,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToEnum" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="KeyValuePattern" signature="(System.Collections.Generic.KeyValuePair`2&lt;TKey,TValue&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToUInt64" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToUInt64$W" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.UInt64&gt;,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToInt64" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToInt64$W" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.Int64&gt;,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToSingle" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToSingle$W" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.Single&gt;,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToDouble" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToDouble$W" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.Double&gt;,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToDecimal" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToDecimal$W" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.Decimal&gt;,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToUIntPtr" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToUIntPtr$W" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.UIntPtr&gt;,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToIntPtr" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToIntPtr$W" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.IntPtr&gt;,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToString" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToChar" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToChar$W" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.Char&gt;,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Lock" signature="(TLock,Microsoft.FSharp.Core.FSharpFunc`2&lt;Microsoft.FSharp.Core.Unit,T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Using" signature="(T,Microsoft.FSharp.Core.FSharpFunc`2&lt;T,TResult&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TypeOf" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="NameOf" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MethodHandleOf" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,TResult&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TypeDefOf" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="SizeOf" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Hash" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="limitedHash" signature="(System.Int32,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Identity" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ConsoleIn" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="ConsoleOut" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="ConsoleError" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="op_Range" signature="(T,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="op_Range$W" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;Microsoft.FSharp.Core.Unit,T&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;T,Microsoft.FSharp.Core.FSharpFunc`2&lt;T,T&gt;&gt;,T,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="op_RangeStep" signature="(T,TStep,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="op_RangeStep$W" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;Microsoft.FSharp.Core.Unit,TStep&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;T,Microsoft.FSharp.Core.FSharpFunc`2&lt;TStep,T&gt;&gt;,T,TStep,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Abs" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Abs$W" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,T&gt;,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Acos" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Acos$W" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,T&gt;,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Asin" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Asin$W" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,T&gt;,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Atan" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Atan$W" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,T&gt;,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Atan2" signature="(T1,T1)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Atan2$W" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T1,Microsoft.FSharp.Core.FSharpFunc`2&lt;T1,T2&gt;&gt;,T1,T1)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Ceiling" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Ceiling$W" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,T&gt;,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Exp" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Exp$W" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,T&gt;,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Floor" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Floor$W" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,T&gt;,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Truncate" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Truncate$W" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,T&gt;,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Round" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Round$W" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,T&gt;,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Sign" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Sign$W" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.Int32&gt;,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Log" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Log$W" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,T&gt;,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Log10" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Log10$W" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,T&gt;,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Sqrt" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Sqrt$W" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,TResult&gt;,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Cos" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Cos$W" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,T&gt;,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Cosh" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Cosh$W" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,T&gt;,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Sin" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Sin$W" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,T&gt;,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Sinh" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Sinh$W" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,T&gt;,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Tan" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Tan$W" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,T&gt;,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Tanh" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Tanh$W" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,T&gt;,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="op_Exponentiation" signature="(T,TResult)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="op_Exponentiation$W" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,Microsoft.FSharp.Core.FSharpFunc`2&lt;TResult,T&gt;&gt;,T,TResult)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="PowInteger" signature="(T,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="PowInteger$W" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;Microsoft.FSharp.Core.Unit,T&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;T,Microsoft.FSharp.Core.FSharpFunc`2&lt;T,T&gt;&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;T,Microsoft.FSharp.Core.FSharpFunc`2&lt;T,T&gt;&gt;,T,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(T1)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(T1)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(T,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(T,TStep)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(T,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="[,,,]`1.GetReverseIndex" signature="(T[0...,0...,0...,0...],System.Int32,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="[,,]`1.GetReverseIndex" signature="(T[0...,0...,0...],System.Int32,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="[,]`1.GetReverseIndex" signature="(T[0...,0...],System.Int32,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="[]`1.GetReverseIndex" signature="(T[],System.Int32,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="String.GetReverseIndex" signature="(System.String,System.Int32,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="notStarted" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="alreadyFinished" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="singleStepRangeEnumerator@5300" signature="(System.Int32,System.Int32,Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="variableStepRangeEnumerator@5238" signature="(System.Int32,System.Int32,System.Int32,Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="singleStepRangeEnumerator@5300-1" signature="(System.Int64,System.Int64,Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="variableStepRangeEnumerator@5238-1" signature="(System.Int64,System.Int64,System.Int64,Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="singleStepRangeEnumerator@5300-2" signature="(System.UInt64,System.UInt64,Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="variableStepRangeEnumerator@5238-2" signature="(System.UInt64,System.UInt64,System.UInt64,Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="singleStepRangeEnumerator@5300-3" signature="(System.UInt32,System.UInt32,Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="variableStepRangeEnumerator@5238-3" signature="(System.UInt32,System.UInt32,System.UInt32,Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="variableStepRangeEnumerator@5238-4" signature="(System.IntPtr,System.IntPtr,System.IntPtr,Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="variableStepRangeEnumerator@5238-5" signature="(System.UIntPtr,System.UIntPtr,System.UIntPtr,Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="singleStepRangeEnumerator@5300-4" signature="(System.Int16,System.Int16,Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="variableStepRangeEnumerator@5238-6" signature="(System.Int16,System.Int16,System.Int16,Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="singleStepRangeEnumerator@5300-5" signature="(System.UInt16,System.UInt16,Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="variableStepRangeEnumerator@5238-7" signature="(System.UInt16,System.UInt16,System.UInt16,Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="singleStepRangeEnumerator@5300-6" signature="(System.SByte,System.SByte,Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="variableStepRangeEnumerator@5238-8" signature="(System.SByte,System.SByte,System.SByte,Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="singleStepRangeEnumerator@5300-7" signature="(System.Byte,System.Byte,Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="variableStepRangeEnumerator@5238-9" signature="(System.Byte,System.Byte,System.Byte,Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="gen@5414" signature="(System.Double,System.Double,System.Double,Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="gen@5414-1" signature="(System.Single,System.Single,System.Single,Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="RangeChar" signature="(System.Char,System.Char)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="PowByte" signature="(System.Byte,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="PowSByte" signature="(System.SByte,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="PowInt16" signature="(System.Int16,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="PowUInt16" signature="(System.UInt16,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="PowInt32" signature="(System.Int32,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="PowUInt32" signature="(System.UInt32,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="PowInt64" signature="(System.Int64,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="PowUInt64" signature="(System.UInt64,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="PowIntPtr" signature="(System.IntPtr,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="PowUIntPtr" signature="(System.UIntPtr,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="PowSingle" signature="(System.Single,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="PowDouble" signature="(System.Double,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="PowDecimal" signature="(System.Decimal,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="PowGeneric" signature="(T,Microsoft.FSharp.Core.FSharpFunc`2&lt;T,Microsoft.FSharp.Core.FSharpFunc`2&lt;T,T&gt;&gt;,T,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetArraySlice" signature="(T[],Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetArraySlice" signature="(T[],Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,T[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetArraySlice2D" signature="(T[0...,0...],Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetArraySlice2DFixed1" signature="(T[0...,0...],System.Int32,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetArraySlice2DFixed2" signature="(T[0...,0...],Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetArraySlice2DFixed1" signature="(T[0...,0...],System.Int32,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,T[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetArraySlice2DFixed2" signature="(T[0...,0...],Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,System.Int32,T[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetArraySlice2D" signature="(T[0...,0...],Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,T[0...,0...])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetArraySlice3D" signature="(T[0...,0...,0...],Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetArraySlice3DFixedSingle1" signature="(T[0...,0...,0...],System.Int32,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetArraySlice3DFixedSingle2" signature="(T[0...,0...,0...],Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,System.Int32,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetArraySlice3DFixedSingle3" signature="(T[0...,0...,0...],Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetArraySlice3DFixedDouble1" signature="(T[0...,0...,0...],System.Int32,System.Int32,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetArraySlice3DFixedDouble2" signature="(T[0...,0...,0...],System.Int32,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetArraySlice3DFixedDouble3" signature="(T[0...,0...,0...],Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,System.Int32,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetArraySlice3D" signature="(T[0...,0...,0...],Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,T[0...,0...,0...])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetArraySlice3DFixedSingle1" signature="(T[0...,0...,0...],System.Int32,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,T[0...,0...])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetArraySlice3DFixedSingle2" signature="(T[0...,0...,0...],Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,System.Int32,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,T[0...,0...])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetArraySlice3DFixedSingle3" signature="(T[0...,0...,0...],Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,System.Int32,T[0...,0...])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetArraySlice3DFixedDouble1" signature="(T[0...,0...,0...],System.Int32,System.Int32,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,T[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetArraySlice3DFixedDouble2" signature="(T[0...,0...,0...],System.Int32,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,System.Int32,T[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetArraySlice3DFixedDouble3" signature="(T[0...,0...,0...],Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,System.Int32,System.Int32,T[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetArraySlice4D" signature="(T[0...,0...,0...,0...],Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetArraySlice4DFixedSingle1" signature="(T[0...,0...,0...,0...],System.Int32,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetArraySlice4DFixedSingle2" signature="(T[0...,0...,0...,0...],Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,System.Int32,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetArraySlice4DFixedSingle3" signature="(T[0...,0...,0...,0...],Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,System.Int32,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetArraySlice4DFixedSingle4" signature="(T[0...,0...,0...,0...],Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetArraySlice4DFixedDouble1" signature="(T[0...,0...,0...,0...],System.Int32,System.Int32,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetArraySlice4DFixedDouble2" signature="(T[0...,0...,0...,0...],System.Int32,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,System.Int32,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetArraySlice4DFixedDouble3" signature="(T[0...,0...,0...,0...],System.Int32,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetArraySlice4DFixedDouble4" signature="(T[0...,0...,0...,0...],Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,System.Int32,System.Int32,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetArraySlice4DFixedDouble5" signature="(T[0...,0...,0...,0...],Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,System.Int32,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetArraySlice4DFixedDouble6" signature="(T[0...,0...,0...,0...],Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,System.Int32,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetArraySlice4DFixedTriple1" signature="(T[0...,0...,0...,0...],Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,System.Int32,System.Int32,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetArraySlice4DFixedTriple2" signature="(T[0...,0...,0...,0...],System.Int32,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,System.Int32,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetArraySlice4DFixedTriple3" signature="(T[0...,0...,0...,0...],System.Int32,System.Int32,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetArraySlice4DFixedTriple4" signature="(T[0...,0...,0...,0...],System.Int32,System.Int32,System.Int32,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetArraySlice4D" signature="(T[0...,0...,0...,0...],Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,T[0...,0...,0...,0...])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetArraySlice4DFixedSingle1" signature="(T[0...,0...,0...,0...],System.Int32,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,T[0...,0...,0...])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetArraySlice4DFixedSingle2" signature="(T[0...,0...,0...,0...],Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,System.Int32,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,T[0...,0...,0...])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetArraySlice4DFixedSingle3" signature="(T[0...,0...,0...,0...],Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,System.Int32,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,T[0...,0...,0...])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetArraySlice4DFixedSingle4" signature="(T[0...,0...,0...,0...],Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,System.Int32,T[0...,0...,0...])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetArraySlice4DFixedDouble1" signature="(T[0...,0...,0...,0...],System.Int32,System.Int32,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,T[0...,0...])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetArraySlice4DFixedDouble2" signature="(T[0...,0...,0...,0...],System.Int32,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,System.Int32,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,T[0...,0...])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetArraySlice4DFixedDouble3" signature="(T[0...,0...,0...,0...],System.Int32,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,System.Int32,T[0...,0...])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetArraySlice4DFixedDouble4" signature="(T[0...,0...,0...,0...],Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,System.Int32,System.Int32,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,T[0...,0...])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetArraySlice4DFixedDouble5" signature="(T[0...,0...,0...,0...],Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,System.Int32,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,System.Int32,T[0...,0...])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetArraySlice4DFixedDouble6" signature="(T[0...,0...,0...,0...],Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,System.Int32,System.Int32,T[0...,0...])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetArraySlice4DFixedTriple1" signature="(T[0...,0...,0...,0...],Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,System.Int32,System.Int32,System.Int32,T[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetArraySlice4DFixedTriple2" signature="(T[0...,0...,0...,0...],System.Int32,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,System.Int32,System.Int32,T[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetArraySlice4DFixedTriple3" signature="(T[0...,0...,0...,0...],System.Int32,System.Int32,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,System.Int32,T[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetArraySlice4DFixedTriple4" signature="(T[0...,0...,0...,0...],System.Int32,System.Int32,System.Int32,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,T[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetStringSlice" signature="(System.String,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Int32&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AbsDynamic" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AcosDynamic" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AsinDynamic" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AtanDynamic" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Atan2Dynamic" signature="(T1,T1)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CeilingDynamic" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExpDynamic" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FloorDynamic" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TruncateDynamic" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="RoundDynamic" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SignDynamic" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="LogDynamic" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Log10Dynamic" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SqrtDynamic" signature="(T1)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CosDynamic" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CoshDynamic" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SinDynamic" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SinhDynamic" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TanDynamic" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TanhDynamic" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="PowDynamic" signature="(T,TResult)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="System.Collections.Generic.IEnumerator&lt;'T&gt;.get_Current" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.Collections.IEnumerator.get_Current" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.Collections.IEnumerator.MoveNext" signature="()" line-rate="1" branch-rate="1" complexity="5">
              <lines />
            </method>
            <method name="System.Collections.IEnumerator.Reset" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.IDisposable.Dispose" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="getCurrent" signature="(Microsoft.FSharp.Core.Operators/OperatorIntrinsics/BaseRangeEnumerator`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CanStart" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CanStep" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DoReset" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Current" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CanStart" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CanStep" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DoReset" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Current" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(TState,TState)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DoReset" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Current" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CanStep" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(T,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DoReset" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Current" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CanStep" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="System.Collections.Generic.IEnumerable&lt;System.Int32&gt;.GetEnumerator" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.Collections.IEnumerable.GetEnumerator" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.Collections.Generic.IEnumerator&lt;System.Int32&gt;.get_Current" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.IDisposable.Dispose" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.Collections.IEnumerator.get_Current" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.Collections.IEnumerator.Reset" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.Collections.IEnumerator.MoveNext" signature="()" line-rate="1" branch-rate="1" complexity="3">
              <lines />
            </method>
            <method name="System.Collections.Generic.IEnumerable&lt;System.Int64&gt;.GetEnumerator" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.Collections.IEnumerable.GetEnumerator" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.Collections.Generic.IEnumerator&lt;System.Int64&gt;.get_Current" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.IDisposable.Dispose" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.Collections.IEnumerator.get_Current" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.Collections.IEnumerator.Reset" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.Collections.IEnumerator.MoveNext" signature="()" line-rate="1" branch-rate="1" complexity="3">
              <lines />
            </method>
            <method name="System.Collections.Generic.IEnumerable&lt;System.UInt64&gt;.GetEnumerator" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.Collections.IEnumerable.GetEnumerator" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.Collections.Generic.IEnumerator&lt;System.UInt64&gt;.get_Current" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.IDisposable.Dispose" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.Collections.IEnumerator.get_Current" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.Collections.IEnumerator.Reset" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.Collections.IEnumerator.MoveNext" signature="()" line-rate="1" branch-rate="1" complexity="3">
              <lines />
            </method>
            <method name="System.Collections.Generic.IEnumerable&lt;System.UInt32&gt;.GetEnumerator" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.Collections.IEnumerable.GetEnumerator" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.Collections.Generic.IEnumerator&lt;System.UInt32&gt;.get_Current" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.IDisposable.Dispose" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.Collections.IEnumerator.get_Current" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.Collections.IEnumerator.Reset" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.Collections.IEnumerator.MoveNext" signature="()" line-rate="1" branch-rate="1" complexity="3">
              <lines />
            </method>
            <method name="System.Collections.Generic.IEnumerable&lt;System.IntPtr&gt;.GetEnumerator" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.Collections.IEnumerable.GetEnumerator" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.Collections.Generic.IEnumerator&lt;System.IntPtr&gt;.get_Current" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.IDisposable.Dispose" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.Collections.IEnumerator.get_Current" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.Collections.IEnumerator.Reset" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.Collections.Generic.IEnumerable&lt;System.UIntPtr&gt;.GetEnumerator" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.Collections.IEnumerable.GetEnumerator" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.Collections.Generic.IEnumerator&lt;System.UIntPtr&gt;.get_Current" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.IDisposable.Dispose" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.Collections.IEnumerator.get_Current" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.Collections.IEnumerator.Reset" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.Collections.Generic.IEnumerable&lt;System.Int16&gt;.GetEnumerator" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.Collections.IEnumerable.GetEnumerator" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.Collections.Generic.IEnumerator&lt;System.Int16&gt;.get_Current" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.IDisposable.Dispose" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.Collections.IEnumerator.get_Current" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.Collections.IEnumerator.Reset" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.Collections.IEnumerator.MoveNext" signature="()" line-rate="1" branch-rate="1" complexity="3">
              <lines />
            </method>
            <method name="System.Collections.Generic.IEnumerable&lt;System.UInt16&gt;.GetEnumerator" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.Collections.IEnumerable.GetEnumerator" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.Collections.Generic.IEnumerator&lt;System.UInt16&gt;.get_Current" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.IDisposable.Dispose" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.Collections.IEnumerator.get_Current" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.Collections.IEnumerator.Reset" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.Collections.IEnumerator.MoveNext" signature="()" line-rate="1" branch-rate="1" complexity="3">
              <lines />
            </method>
            <method name="System.Collections.Generic.IEnumerable&lt;System.SByte&gt;.GetEnumerator" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.Collections.IEnumerable.GetEnumerator" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.Collections.Generic.IEnumerator&lt;System.SByte&gt;.get_Current" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.IDisposable.Dispose" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.Collections.IEnumerator.get_Current" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.Collections.IEnumerator.Reset" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.Collections.IEnumerator.MoveNext" signature="()" line-rate="1" branch-rate="1" complexity="3">
              <lines />
            </method>
            <method name="System.Collections.Generic.IEnumerable&lt;System.Byte&gt;.GetEnumerator" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.Collections.IEnumerable.GetEnumerator" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.Collections.Generic.IEnumerator&lt;System.Byte&gt;.get_Current" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.IDisposable.Dispose" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.Collections.IEnumerator.get_Current" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.Collections.IEnumerator.Reset" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.Collections.IEnumerator.MoveNext" signature="()" line-rate="1" branch-rate="1" complexity="3">
              <lines />
            </method>
            <method name="System.Collections.Generic.IEnumerable&lt;System.Double&gt;.GetEnumerator" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.Collections.IEnumerable.GetEnumerator" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="get_CanStart" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Equal" signature="(System.Int32,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Step" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Result" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Equal" signature="(System.Double,System.Double)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Step" signature="(System.Double)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="System.Collections.Generic.IEnumerable&lt;System.Single&gt;.GetEnumerator" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.Collections.IEnumerable.GetEnumerator" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="get_CanStart" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Equal" signature="(System.Int32,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Step" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Result" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Equal" signature="(System.Single,System.Single)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Step" signature="(System.Single)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="System.Collections.Generic.IEnumerable&lt;'T&gt;.GetEnumerator" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.Collections.IEnumerable.GetEnumerator" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="get_CanStart" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Before" signature="(T,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Equal" signature="(T,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Step" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Result" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="System.Collections.Generic.IEnumerable&lt;'T&gt;.GetEnumerator" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.Collections.IEnumerable.GetEnumerator" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="get_CanStart" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Equal" signature="(T,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Step" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Result" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="System.Collections.Generic.IEnumerable&lt;System.Char&gt;.GetEnumerator" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.Collections.IEnumerable.GetEnumerator" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="get_CanStart" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Before" signature="(System.Char,System.Char)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Equal" signature="(System.Char,System.Char)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Step" signature="(System.Char)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Result" signature="(System.Char)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Int32,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Int32,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Int32,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Int32,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Int32,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Int32,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Int32,System.Int32,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Int32,System.Int32,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Int32,System.Int32,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Int32,System.Int32,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Int32,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Int32,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Int32,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Int32,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Int32,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Int32,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Int32,System.Int32,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Int32,System.Int32,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Int32,System.Int32,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Int32,System.Int32,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Int32,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Int32,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Int32,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Int32,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Int32,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Int32,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Result" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.SByte)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Int16)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Int64)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Double)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Single)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Decimal)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Result" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Double)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Single)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Result" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Double)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Single)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Result" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Double)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Single)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Result" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Double,System.Double)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Single,System.Single)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Result" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Double)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Single)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Result" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Double)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Single)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Result" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Double)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Single)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Result" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Double)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Single)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Result" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Double)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Single)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Result" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Double)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Single)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Decimal)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Int16)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Int64)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.SByte)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Result" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Double)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Single)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Result" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Double)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Single)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Result" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Double)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Single)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Result" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Double)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Single)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Result" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Double)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Single)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Result" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Double)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Single)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Result" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Double)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Single)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Result" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Double)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Single)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Result" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Double)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Single)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Result" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Double,System.Double)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(TResult)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Single,System.Single)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(TResult)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="op_Addition" signature="(T1,T2)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="op_Addition$W" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T1,Microsoft.FSharp.Core.FSharpFunc`2&lt;T2,T3&gt;&gt;,T1,T2)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="op_Subtraction" signature="(T1,T2)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="op_Subtraction$W" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T1,Microsoft.FSharp.Core.FSharpFunc`2&lt;T2,T3&gt;&gt;,T1,T2)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="op_UnaryNegation" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="op_UnaryNegation$W" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,T&gt;,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="op_Multiply" signature="(T1,T2)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="op_Multiply$W" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T1,Microsoft.FSharp.Core.FSharpFunc`2&lt;T2,T3&gt;&gt;,T1,T2)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToByte" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToByte$W" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.Byte&gt;,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToSByte" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToSByte$W" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.SByte&gt;,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToUInt16" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToUInt16$W" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.UInt16&gt;,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToChar" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToChar$W" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.Char&gt;,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToInt16" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToInt16$W" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.Int16&gt;,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToUInt32" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToUInt32$W" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.UInt32&gt;,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToInt32" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToInt32$W" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.Int32&gt;,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToInt" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToInt$W" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.Int32&gt;,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToUInt64" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToUInt64$W" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.UInt64&gt;,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToInt64" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToInt64$W" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.Int64&gt;,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToUIntPtr" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToUIntPtr$W" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.UIntPtr&gt;,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToIntPtr" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToIntPtr$W" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.IntPtr&gt;,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Unbox" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DefaultOf" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Compare" signature="(T,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Equals" signature="(T,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Hash" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="op_LessThan" signature="(T,TResult)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="op_LessThan$W" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,Microsoft.FSharp.Core.FSharpFunc`2&lt;TResult,System.Boolean&gt;&gt;,T,TResult)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="op_GreaterThan" signature="(T,TResult)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="op_GreaterThan$W" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,Microsoft.FSharp.Core.FSharpFunc`2&lt;TResult,System.Boolean&gt;&gt;,T,TResult)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="op_LessThanOrEqual" signature="(T,TResult)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="op_LessThanOrEqual$W" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,Microsoft.FSharp.Core.FSharpFunc`2&lt;TResult,System.Boolean&gt;&gt;,T,TResult)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="op_GreaterThanOrEqual" signature="(T,TResult)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="op_GreaterThanOrEqual$W" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,Microsoft.FSharp.Core.FSharpFunc`2&lt;TResult,System.Boolean&gt;&gt;,T,TResult)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="op_Equality" signature="(T,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="op_Equality$W" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.Boolean&gt;&gt;,T,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="op_Inequality" signature="(T,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="op_Inequality$W" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.Boolean&gt;&gt;,T,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Compare" signature="(T,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Compare$W" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.Boolean&gt;&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;T,Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.Boolean&gt;&gt;,T,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Max" signature="(T,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Max$W" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.Boolean&gt;&gt;,T,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Min" signature="(T,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Min$W" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.Boolean&gt;&gt;,T,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Hash" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Core.OptimizedClosures" filename="F:\workspace\_work\1\s\src\fsharp\FSharp.Core\prim-types.fs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(T1)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Adapt" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T1,Microsoft.FSharp.Core.FSharpFunc`2&lt;T2,TResult&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(T2)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(T1,T2)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(T1)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Adapt" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T1,Microsoft.FSharp.Core.FSharpFunc`2&lt;T2,Microsoft.FSharp.Core.FSharpFunc`2&lt;T3,TResult&gt;&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(T2,T3)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(T1,T2,T3)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(T1,T2,T3)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Adapt" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T1,Microsoft.FSharp.Core.FSharpFunc`2&lt;T2,Microsoft.FSharp.Core.FSharpFunc`2&lt;T3,Microsoft.FSharp.Core.FSharpFunc`2&lt;T4,TResult&gt;&gt;&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(T1)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(T1,T2,T3,T4)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(T1,T2,T3,T4)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(T1,T2,T3,T4)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(T2,T3,T4)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(T1)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Adapt" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T1,Microsoft.FSharp.Core.FSharpFunc`2&lt;T2,Microsoft.FSharp.Core.FSharpFunc`2&lt;T3,Microsoft.FSharp.Core.FSharpFunc`2&lt;T4,Microsoft.FSharp.Core.FSharpFunc`2&lt;T5,TResult&gt;&gt;&gt;&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(T2,T3,T4,T5)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(T1,T2,T3,T4,T5)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(T1,T2,T3,T4,T5)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(T1,T2,T3,T4,T5)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(T1,T2,T3,T4,T5)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Core.OptionalArgumentAttribute" filename="F:\workspace\_work\1\s\src\fsharp\FSharp.Core\prim-types.fs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Core.OptionModule" filename="F:\workspace\_work\1\s\src\fsharp\FSharp.Core\option.fs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="GetValue" signature="(Microsoft.FSharp.Core.FSharpOption`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DefaultValue" signature="(T,Microsoft.FSharp.Core.FSharpOption`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DefaultWith" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;Microsoft.FSharp.Core.Unit,T&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="OrElse" signature="(Microsoft.FSharp.Core.FSharpOption`1&lt;T&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="OrElseWith" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.FSharpOption`1&lt;T&gt;&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Count" signature="(Microsoft.FSharp.Core.FSharpOption`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Fold" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;TState,Microsoft.FSharp.Core.FSharpFunc`2&lt;T,TState&gt;&gt;,TState,Microsoft.FSharp.Core.FSharpOption`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FoldBack" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,Microsoft.FSharp.Core.FSharpFunc`2&lt;TState,TState&gt;&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;T&gt;,TState)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Exists" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.Boolean&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ForAll" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.Boolean&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Contains" signature="(T,Microsoft.FSharp.Core.FSharpOption`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Iterate" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,Microsoft.FSharp.Core.Unit&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Map" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,TResult&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Map2" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T1,Microsoft.FSharp.Core.FSharpFunc`2&lt;T2,TResult&gt;&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;T1&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;T2&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Map3" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T1,Microsoft.FSharp.Core.FSharpFunc`2&lt;T2,Microsoft.FSharp.Core.FSharpFunc`2&lt;T3,TResult&gt;&gt;&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;T1&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;T2&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;T3&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Bind" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,Microsoft.FSharp.Core.FSharpOption`1&lt;TResult&gt;&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Flatten" signature="(Microsoft.FSharp.Core.FSharpOption`1&lt;Microsoft.FSharp.Core.FSharpOption`1&lt;T&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Filter" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.Boolean&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToArray" signature="(Microsoft.FSharp.Core.FSharpOption`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToList" signature="(Microsoft.FSharp.Core.FSharpOption`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToNullable" signature="(Microsoft.FSharp.Core.FSharpOption`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="OfNullable" signature="(System.Nullable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="OfObj" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToObj" signature="(Microsoft.FSharp.Core.FSharpOption`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Core.PrintfFormat`4" filename="F:\workspace\_work\1\s\src\fsharp\FSharp.Core\printf.fs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name=".ctor" signature="(System.String,System.Object[],System.Type[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Value" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Captures" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CaptureTypes" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToString" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Core.PrintfFormat`5" filename="F:\workspace\_work\1\s\src\fsharp\FSharp.Core\printf.fs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.String,System.Object[],System.Type[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Core.PrintfImpl" filename="F:\workspace\_work\1\s\src\fsharp\FSharp.Core\printf.fs" line-rate="1" branch-rate="1" complexity="29">
          <methods>
            <method name="valueOf@120" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="revToArray" signature="(System.Int32,Microsoft.FSharp.Collections.FSharpList`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="normalizePrecision" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="basicFloatToString" signature="(Microsoft.FSharp.Core.PrintfImpl/FormatSpecifier)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="getValueConverter" signature="(System.Type,Microsoft.FSharp.Core.PrintfImpl/FormatSpecifier)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="go@1004-3" signature="(System.Int32,System.Type[],System.Type,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="extractCurriedArguments" signature="(System.Type,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="StringPrintfEnv" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="StringBuilderPrintfEnv" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;Microsoft.FSharp.Core.Unit,TResult&gt;,System.Text.StringBuilder)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TextWriterPrintfEnv" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;Microsoft.FSharp.Core.Unit,TResult&gt;,System.IO.TextWriter)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="buildCaptureFunc$cont@1088" signature="(System.Type,System.Type[],a,System.Type,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Object&gt;,System.Boolean,System.Type[],System.Object,System.Int32,System.Int32,Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="convFunc@1149" signature="(Microsoft.FSharp.Core.PrintfImpl/FormatSpecifier)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="buildStep$cont@1128" signature="(Microsoft.FSharp.Core.PrintfImpl/FormatSpecifier,System.Type[],System.String,Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsStarPrecision" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsPrecisionSpecified" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsStarWidth" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsWidthSpecified" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ArgCount" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToString" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="IsDecimalFormat" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetPadAndPrefix" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BlockCount" signature="(Microsoft.FSharp.Core.PrintfImpl/Step[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(TState)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="State" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="WriteSkipEmpty" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="RunSteps" signature="(System.Object[],System.Type[],Microsoft.FSharp.Core.PrintfImpl/Step[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Final0" signature="(Microsoft.FSharp.Core.PrintfImpl/Step[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CaptureFinal1" signature="(Microsoft.FSharp.Core.PrintfImpl/Step[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CaptureFinal2" signature="(Microsoft.FSharp.Core.PrintfImpl/Step[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CaptureFinal3" signature="(Microsoft.FSharp.Core.PrintfImpl/Step[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Capture1" signature="(Microsoft.FSharp.Core.PrintfImpl/PrintfFuncFactory`4&lt;TTail,TState,TResidue,TResult&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CaptureLittleA" signature="(Microsoft.FSharp.Core.PrintfImpl/PrintfFuncFactory`4&lt;TTail,TState,TResidue,TResult&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Capture2" signature="(Microsoft.FSharp.Core.PrintfImpl/PrintfFuncFactory`4&lt;TTail,TState,TResidue,TResult&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Capture3" signature="(Microsoft.FSharp.Core.PrintfImpl/PrintfFuncFactory`4&lt;TTail,TState,TResidue,TResult&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="OneStepWithArg" signature="(System.String,Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Object,System.String&gt;,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TwoStepWithArg" signature="(System.String,Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Object,System.String&gt;,System.String,Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Object,System.String&gt;,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;System.Object&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.PrintfImpl/PrintfEnv`3&lt;TState,TResidue,TResult&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(A)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;System.Object&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.PrintfImpl/PrintfEnv`3&lt;TState,TResidue,TResult&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(A,B)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;System.Object&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.PrintfImpl/PrintfEnv`3&lt;TState,TResidue,TResult&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(A,B,C)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;System.Object&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.PrintfImpl/PrintfEnv`3&lt;TState,TResidue,TResult&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(A)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;System.Object&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.PrintfImpl/PrintfEnv`3&lt;TState,TResidue,TResult&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(TState,System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;TState,Microsoft.FSharp.Core.FSharpFunc`2&lt;A,TResidue&gt;&gt;,A)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;System.Object&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.PrintfImpl/PrintfEnv`3&lt;TState,TResidue,TResult&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(A,B)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;System.Object&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.PrintfImpl/PrintfEnv`3&lt;TState,TResidue,TResult&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(A,B,C)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;System.Object&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.PrintfImpl/PrintfEnv`3&lt;TState,TResidue,TResult&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(A)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;System.Object&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.PrintfImpl/PrintfEnv`3&lt;TState,TResidue,TResult&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(A,B)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;System.Object&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.PrintfImpl/PrintfEnv`3&lt;TState,TResidue,TResult&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FuncObj" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Make" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Object,System.String&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Make" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Object,Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Int32,System.String&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Make" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Object,Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Int32,Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Int32,System.String&gt;&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ObjectToString" signature="(Microsoft.FSharp.Core.PrintfImpl/FormatSpecifier)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="InterpolandToString" signature="(Microsoft.FSharp.Core.PrintfImpl/FormatSpecifier)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GenericToStringCore" signature="(T,Microsoft.FSharp.Text.StructuredPrintfImpl.FormatOptions,System.Reflection.BindingFlags)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GenericToString" signature="(Microsoft.FSharp.Core.PrintfImpl/FormatSpecifier)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Object,System.Int32,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Object,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Object,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;System.String,TResult&gt;,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Finish" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Write" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="WriteT" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Finish" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="Write" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="WriteT" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Finish" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Write" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="WriteT" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Finish" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Write" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="WriteT" signature="(Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Finish" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Write" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="WriteT" signature="(Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FormatString" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetStepsForCapturedFormat" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="BlockCount" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetCurriedPrinterFactory" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="GetCurriedStringPrinter" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="buildCaptureFunc" signature="(Microsoft.FSharp.Core.PrintfImpl/FormatSpecifier,a,System.Type[],System.Type,System.Tuple`5&lt;System.Object,System.Boolean,System.Type[],System.Type,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Object&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="buildStep" signature="(Microsoft.FSharp.Core.PrintfImpl/FormatSpecifier,System.Type[],System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="parseSpec" signature="(System.Int32&amp;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="parseAndCreateStepsForCapturedFormatAux" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;Microsoft.FSharp.Core.PrintfImpl/Step&gt;,System.String,System.Int32&amp;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="parseAndCreateStepsForCapturedFormat" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="parseAndCreateFuncFactoryAux" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;Microsoft.FSharp.Core.PrintfImpl/Step&gt;,System.String,System.Type,System.Int32&amp;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="parseAndCreateFunctionFactory" signature="()" line-rate="1" branch-rate="1" complexity="13">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(a,System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;System.Object&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.PrintfImpl/PrintfEnv`3&lt;TState,TResidue,TResult&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetParser" signature="(Microsoft.FSharp.Core.PrintfFormat`4&lt;TPrinter,TState,TResidue,TResult&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="toFormattedString" signature="(System.String,System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="isNumber" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="isInteger" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="leftJustify" signature="(System.Boolean,System.String,System.Char)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="rightJustify" signature="(System.String,System.Char)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="withPadding" signature="(Microsoft.FSharp.Core.PrintfImpl/FormatSpecifier,Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Int32,System.String&gt;,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.String,System.Int32,System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.String,System.Int32,System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.String,System.Int32,System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.String,System.Int32,System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.String,System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="eliminateNative" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="toString" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="toFormattedString" signature="(System.String,System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="toUnsigned" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="leftJustify" signature="(System.Boolean,Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Object,System.String&gt;,System.String,System.Char,System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="rightJustify" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Object,System.String&gt;,System.String,System.Char,System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="withPadding" signature="(Microsoft.FSharp.Core.PrintfImpl/FormatSpecifier,System.Boolean,Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Object,System.String&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="getValueConverter" signature="(Microsoft.FSharp.Core.PrintfImpl/FormatSpecifier)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Int32,System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Int32,System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Int32,System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Int32,System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Int32,System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Int32,System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Int32,System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Int32,System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="isPositive" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="rightJustifyWithZeroAsPadChar" signature="(System.String,System.Boolean,System.Boolean,System.Int32,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="rightJustifyWithSpaceAsPadChar" signature="(System.String,System.Boolean,System.Boolean,System.Int32,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="leftJustifyWithGFormat" signature="(System.String,System.Boolean,System.Boolean,System.Boolean,System.Int32,System.String,System.Char)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="leftJustifyWithNonGFormat" signature="(System.String,System.Boolean,System.Boolean,System.Int32,System.String,System.Char)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="noJustificationCore" signature="(System.String,System.Boolean,System.Boolean,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="noJustification" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Object,System.String&gt;,System.String,System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="withPadding" signature="(Microsoft.FSharp.Core.PrintfImpl/FormatSpecifier,Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Object,System.String&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Int32,System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="adaptPaddedFormatted" signature="(Microsoft.FSharp.Core.PrintfImpl/FormatSpecifier,Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Int32,System.String&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;System.String,Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Object,System.String&gt;&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;System.String,Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Int32,Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Object,System.String&gt;&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="adaptPadded" signature="(Microsoft.FSharp.Core.PrintfImpl/FormatSpecifier,Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Object,System.String&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Int32,Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Object,System.String&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="withPaddingFormatted" signature="(Microsoft.FSharp.Core.PrintfImpl/FormatSpecifier,Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Int32,System.String&gt;,System.String,Microsoft.FSharp.Core.FSharpFunc`2&lt;System.String,Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Object,System.String&gt;&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;System.String,Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Int32,Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Object,System.String&gt;&gt;&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;System.String,Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Int32,Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Object,System.String&gt;&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="withPadding" signature="(Microsoft.FSharp.Core.PrintfImpl/FormatSpecifier,Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Object,System.String&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Int32,Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Object,System.String&gt;&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Int32,Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Object,System.String&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Object,System.Int32,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Object,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Object,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Object,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Object,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="intFromString" signature="(System.String,System.Int32&amp;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="parseFlags" signature="(System.String,System.Int32&amp;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="parseWidth" signature="(System.String,System.Int32&amp;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="parsePrecision" signature="(System.String,System.Int32&amp;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="parseInterpolatedHoleDotNetFormat" signature="(System.Char,System.String,System.Int32&amp;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="skipInterpolationHole" signature="(System.Char,System.String,System.Int32&amp;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="findNextFormatSpecifier" signature="(System.String,System.Int32&amp;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Core.PrintfModule" filename="F:\workspace\_work\1\s\src\fsharp\FSharp.Core\printf.fs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="gprintf" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Int32,a&gt;,Microsoft.FSharp.Core.PrintfFormat`4&lt;TPrinter,TState,TResidue,TResult&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="PrintFormatToStringThen" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;System.String,TResult&gt;,Microsoft.FSharp.Core.PrintfFormat`4&lt;T,Microsoft.FSharp.Core.Unit,System.String,TResult&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="PrintFormatToStringThen" signature="(Microsoft.FSharp.Core.PrintfFormat`4&lt;T,Microsoft.FSharp.Core.Unit,System.String,System.String&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="PrintFormatThen" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;System.String,TResult&gt;,Microsoft.FSharp.Core.PrintfFormat`4&lt;T,Microsoft.FSharp.Core.Unit,System.String,TResult&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="PrintFormatToStringBuilderThen" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;Microsoft.FSharp.Core.Unit,TResult&gt;,System.Text.StringBuilder,Microsoft.FSharp.Core.PrintfFormat`4&lt;T,System.Text.StringBuilder,Microsoft.FSharp.Core.Unit,TResult&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="PrintFormatToTextWriterThen" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;Microsoft.FSharp.Core.Unit,TResult&gt;,System.IO.TextWriter,Microsoft.FSharp.Core.PrintfFormat`4&lt;T,System.IO.TextWriter,Microsoft.FSharp.Core.Unit,TResult&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="PrintFormatToStringBuilder" signature="(System.Text.StringBuilder,Microsoft.FSharp.Core.PrintfFormat`4&lt;T,System.Text.StringBuilder,Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="PrintFormatToTextWriter" signature="(System.IO.TextWriter,Microsoft.FSharp.Core.PrintfFormat`4&lt;T,System.IO.TextWriter,Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="PrintFormatLineToTextWriter" signature="(System.IO.TextWriter,Microsoft.FSharp.Core.PrintfFormat`4&lt;T,System.IO.TextWriter,Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="PrintFormatToStringThenFail" signature="(Microsoft.FSharp.Core.PrintfFormat`4&lt;T,Microsoft.FSharp.Core.Unit,System.String,TResult&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="PrintFormat" signature="(Microsoft.FSharp.Core.PrintfFormat`4&lt;T,System.IO.TextWriter,Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="PrintFormatToError" signature="(Microsoft.FSharp.Core.PrintfFormat`4&lt;T,System.IO.TextWriter,Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="PrintFormatLine" signature="(Microsoft.FSharp.Core.PrintfFormat`4&lt;T,System.IO.TextWriter,Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="PrintFormatLineToError" signature="(Microsoft.FSharp.Core.PrintfFormat`4&lt;T,System.IO.TextWriter,Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Core.ProjectionParameterAttribute" filename="F:\workspace\_work\1\s\src\fsharp\FSharp.Core\prim-types.fs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Core.ReferenceEqualityAttribute" filename="F:\workspace\_work\1\s\src\fsharp\FSharp.Core\prim-types.fs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Core.ReflectedDefinitionAttribute" filename="F:\workspace\_work\1\s\src\fsharp\FSharp.Core\prim-types.fs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name=".ctor" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="IncludeValue" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Core.RequireQualifiedAccessAttribute" filename="F:\workspace\_work\1\s\src\fsharp\FSharp.Core\prim-types.fs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Core.RequiresExplicitTypeArgumentsAttribute" filename="F:\workspace\_work\1\s\src\fsharp\FSharp.Core\prim-types.fs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Core.ResultModule" filename="F:\workspace\_work\1\s\src\fsharp\FSharp.Core\result.fs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Map" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,TResult&gt;,Microsoft.FSharp.Core.FSharpResult`2&lt;T,TError&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MapError" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;TError,TResult&gt;,Microsoft.FSharp.Core.FSharpResult`2&lt;T,TError&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Bind" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,Microsoft.FSharp.Core.FSharpResult`2&lt;TResult,TError&gt;&gt;,Microsoft.FSharp.Core.FSharpResult`2&lt;T,TError&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Core.SealedAttribute" filename="F:\workspace\_work\1\s\src\fsharp\FSharp.Core\prim-types.fs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name=".ctor" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Value" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Core.SR" filename="F:\workspace\_work\1\s\artifacts\obj\FSharp.Core\Release\netstandard2.0\FSCore.fs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="GetString" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetObject" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Core.StringModule" filename="F:\workspace\_work\1\s\src\fsharp\FSharp.Core\string.fs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Length" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="concatArray@27" signature="(System.String,System.String[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Concat" signature="(System.String,System.Collections.Generic.IEnumerable`1&lt;System.String&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Iterate" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Char,Microsoft.FSharp.Core.Unit&gt;,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IterateIndexed" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Int32,Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Char,Microsoft.FSharp.Core.Unit&gt;&gt;,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Map" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Char,System.Char&gt;,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MapIndexed" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Int32,Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Char,System.Char&gt;&gt;,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Filter" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Char,System.Boolean&gt;,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Collect" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Char,System.String&gt;,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Initialize" signature="(System.Int32,Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Int32,System.String&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Replicate" signature="(System.Int32,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ForAll" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Char,System.Boolean&gt;,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Exists" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Char,System.Boolean&gt;,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.String,System.String[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Char)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Char)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Core.StructAttribute" filename="F:\workspace\_work\1\s\src\fsharp\FSharp.Core\prim-types.fs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Core.StructuralComparisonAttribute" filename="F:\workspace\_work\1\s\src\fsharp\FSharp.Core\prim-types.fs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Core.StructuralEqualityAttribute" filename="F:\workspace\_work\1\s\src\fsharp\FSharp.Core\prim-types.fs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Core.StructuredFormatDisplayAttribute" filename="F:\workspace\_work\1\s\src\fsharp\FSharp.Core\prim-types.fs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Value" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Core.Unit" filename="F:\workspace\_work\1\s\src\fsharp\FSharp.Core\prim-types.fs" line-rate="1" branch-rate="1" complexity="2">
          <methods>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="GetHashCode" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Equals" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="System.IComparable.CompareTo" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Core.UnverifiableAttribute" filename="F:\workspace\_work\1\s\src\fsharp\FSharp.Core\prim-types.fs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Core.ValueAsStaticPropertyAttribute" filename="F:\workspace\_work\1\s\src\fsharp\FSharp.Core\prim-types.fs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Core.ValueOption" filename="F:\workspace\_work\1\s\src\fsharp\FSharp.Core\option.fs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="GetValue" signature="(Microsoft.FSharp.Core.FSharpValueOption`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DefaultValue" signature="(T,Microsoft.FSharp.Core.FSharpValueOption`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DefaultWith" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;Microsoft.FSharp.Core.Unit,T&gt;,Microsoft.FSharp.Core.FSharpValueOption`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="OrElse" signature="(Microsoft.FSharp.Core.FSharpValueOption`1&lt;T&gt;,Microsoft.FSharp.Core.FSharpValueOption`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="OrElseWith" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.FSharpValueOption`1&lt;T&gt;&gt;,Microsoft.FSharp.Core.FSharpValueOption`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Count" signature="(Microsoft.FSharp.Core.FSharpValueOption`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Fold" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;TState,Microsoft.FSharp.Core.FSharpFunc`2&lt;T,TState&gt;&gt;,TState,Microsoft.FSharp.Core.FSharpValueOption`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FoldBack" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,Microsoft.FSharp.Core.FSharpFunc`2&lt;TState,TState&gt;&gt;,Microsoft.FSharp.Core.FSharpValueOption`1&lt;T&gt;,TState)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Exists" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.Boolean&gt;,Microsoft.FSharp.Core.FSharpValueOption`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ForAll" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.Boolean&gt;,Microsoft.FSharp.Core.FSharpValueOption`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Contains" signature="(T,Microsoft.FSharp.Core.FSharpValueOption`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Iterate" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,Microsoft.FSharp.Core.Unit&gt;,Microsoft.FSharp.Core.FSharpValueOption`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Map" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,TResult&gt;,Microsoft.FSharp.Core.FSharpValueOption`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Map2" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T1,Microsoft.FSharp.Core.FSharpFunc`2&lt;T2,TResult&gt;&gt;,Microsoft.FSharp.Core.FSharpValueOption`1&lt;T1&gt;,Microsoft.FSharp.Core.FSharpValueOption`1&lt;T2&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Map3" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T1,Microsoft.FSharp.Core.FSharpFunc`2&lt;T2,Microsoft.FSharp.Core.FSharpFunc`2&lt;T3,TResult&gt;&gt;&gt;,Microsoft.FSharp.Core.FSharpValueOption`1&lt;T1&gt;,Microsoft.FSharp.Core.FSharpValueOption`1&lt;T2&gt;,Microsoft.FSharp.Core.FSharpValueOption`1&lt;T3&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Bind" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,Microsoft.FSharp.Core.FSharpValueOption`1&lt;TResult&gt;&gt;,Microsoft.FSharp.Core.FSharpValueOption`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Flatten" signature="(Microsoft.FSharp.Core.FSharpValueOption`1&lt;Microsoft.FSharp.Core.FSharpValueOption`1&lt;T&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Filter" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.Boolean&gt;,Microsoft.FSharp.Core.FSharpValueOption`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToArray" signature="(Microsoft.FSharp.Core.FSharpValueOption`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToList" signature="(Microsoft.FSharp.Core.FSharpValueOption`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToNullable" signature="(Microsoft.FSharp.Core.FSharpValueOption`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="OfNullable" signature="(System.Nullable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="OfObj" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToObj" signature="(Microsoft.FSharp.Core.FSharpValueOption`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Core.VolatileFieldAttribute" filename="F:\workspace\_work\1\s\src\fsharp\FSharp.Core\prim-types.fs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Linq.ForwardDeclarations" filename="F:\workspace\_work\1\s\src\fsharp\FSharp.Core\Query.fs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Microsoft.FSharp.Linq.ForwardDeclarations.IQueryMethods.Execute" signature="(Microsoft.FSharp.Quotations.FSharpExpr`1&lt;a&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Microsoft.FSharp.Linq.ForwardDeclarations.IQueryMethods.EliminateNestedQueries" signature="(Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Linq.Helpers" filename="F:\workspace\_work\1\s\src\fsharp\FSharp.Core\Query.fs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="checkThenBySource" signature="(System.Collections.Generic.IEnumerable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Linq.NullableModule" filename="F:\workspace\_work\1\s\src\fsharp\FSharp.Core\Nullable.fs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="ToUInt8" signature="(System.Nullable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToUInt8$W" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.Byte&gt;,System.Nullable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToInt8" signature="(System.Nullable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToInt8$W" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.SByte&gt;,System.Nullable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToByte" signature="(System.Nullable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToByte$W" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.Byte&gt;,System.Nullable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToSByte" signature="(System.Nullable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToSByte$W" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.SByte&gt;,System.Nullable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToInt16" signature="(System.Nullable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToInt16$W" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.Int16&gt;,System.Nullable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToUInt16" signature="(System.Nullable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToUInt16$W" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.UInt16&gt;,System.Nullable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToInt" signature="(System.Nullable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToInt$W" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.Int32&gt;,System.Nullable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToUInt" signature="(System.Nullable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToUInt$W" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.UInt32&gt;,System.Nullable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToEnum" signature="(System.Nullable`1&lt;System.Int32&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToInt32" signature="(System.Nullable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToInt32$W" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.Int32&gt;,System.Nullable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToUInt32" signature="(System.Nullable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToUInt32$W" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.UInt32&gt;,System.Nullable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToInt64" signature="(System.Nullable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToInt64$W" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.Int64&gt;,System.Nullable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToUInt64" signature="(System.Nullable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToUInt64$W" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.UInt64&gt;,System.Nullable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToFloat32" signature="(System.Nullable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToFloat32$W" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.Single&gt;,System.Nullable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToFloat" signature="(System.Nullable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToFloat$W" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.Double&gt;,System.Nullable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToSingle" signature="(System.Nullable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToSingle$W" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.Single&gt;,System.Nullable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToDouble" signature="(System.Nullable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToDouble$W" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.Double&gt;,System.Nullable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToIntPtr" signature="(System.Nullable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToIntPtr$W" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.IntPtr&gt;,System.Nullable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToUIntPtr" signature="(System.Nullable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToUIntPtr$W" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.UIntPtr&gt;,System.Nullable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToDecimal" signature="(System.Nullable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToDecimal$W" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.Decimal&gt;,System.Nullable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToChar" signature="(System.Nullable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToChar$W" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.Char&gt;,System.Nullable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Linq.NullableOperators" filename="F:\workspace\_work\1\s\src\fsharp\FSharp.Core\Nullable.fs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="op_QmarkPlus" signature="(System.Nullable`1&lt;T1&gt;,T2)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="op_QmarkPlus$W" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T1,Microsoft.FSharp.Core.FSharpFunc`2&lt;T2,T3&gt;&gt;,System.Nullable`1&lt;T1&gt;,T2)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="op_PlusQmark" signature="(T1,System.Nullable`1&lt;T2&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="op_PlusQmark$W" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T1,Microsoft.FSharp.Core.FSharpFunc`2&lt;T2,T3&gt;&gt;,T1,System.Nullable`1&lt;T2&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="op_QmarkPlusQmark" signature="(System.Nullable`1&lt;T1&gt;,System.Nullable`1&lt;T2&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="op_QmarkPlusQmark$W" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T1,Microsoft.FSharp.Core.FSharpFunc`2&lt;T2,T3&gt;&gt;,System.Nullable`1&lt;T1&gt;,System.Nullable`1&lt;T2&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="op_QmarkMinus" signature="(System.Nullable`1&lt;T1&gt;,T2)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="op_QmarkMinus$W" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T1,Microsoft.FSharp.Core.FSharpFunc`2&lt;T2,T3&gt;&gt;,System.Nullable`1&lt;T1&gt;,T2)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="op_MinusQmark" signature="(T1,System.Nullable`1&lt;T2&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="op_MinusQmark$W" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T1,Microsoft.FSharp.Core.FSharpFunc`2&lt;T2,T3&gt;&gt;,T1,System.Nullable`1&lt;T2&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="op_QmarkMinusQmark" signature="(System.Nullable`1&lt;T1&gt;,System.Nullable`1&lt;T2&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="op_QmarkMinusQmark$W" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T1,Microsoft.FSharp.Core.FSharpFunc`2&lt;T2,T3&gt;&gt;,System.Nullable`1&lt;T1&gt;,System.Nullable`1&lt;T2&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="op_QmarkMultiply" signature="(System.Nullable`1&lt;T1&gt;,T2)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="op_QmarkMultiply$W" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T1,Microsoft.FSharp.Core.FSharpFunc`2&lt;T2,T3&gt;&gt;,System.Nullable`1&lt;T1&gt;,T2)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="op_MultiplyQmark" signature="(T1,System.Nullable`1&lt;T2&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="op_MultiplyQmark$W" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T1,Microsoft.FSharp.Core.FSharpFunc`2&lt;T2,T3&gt;&gt;,T1,System.Nullable`1&lt;T2&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="op_QmarkMultiplyQmark" signature="(System.Nullable`1&lt;T1&gt;,System.Nullable`1&lt;T2&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="op_QmarkMultiplyQmark$W" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T1,Microsoft.FSharp.Core.FSharpFunc`2&lt;T2,T3&gt;&gt;,System.Nullable`1&lt;T1&gt;,System.Nullable`1&lt;T2&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="op_QmarkPercent" signature="(System.Nullable`1&lt;T1&gt;,T2)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="op_QmarkPercent$W" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T1,Microsoft.FSharp.Core.FSharpFunc`2&lt;T2,T3&gt;&gt;,System.Nullable`1&lt;T1&gt;,T2)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="op_PercentQmark" signature="(T1,System.Nullable`1&lt;T2&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="op_PercentQmark$W" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T1,Microsoft.FSharp.Core.FSharpFunc`2&lt;T2,T3&gt;&gt;,T1,System.Nullable`1&lt;T2&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="op_QmarkPercentQmark" signature="(System.Nullable`1&lt;T1&gt;,System.Nullable`1&lt;T2&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="op_QmarkPercentQmark$W" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T1,Microsoft.FSharp.Core.FSharpFunc`2&lt;T2,T3&gt;&gt;,System.Nullable`1&lt;T1&gt;,System.Nullable`1&lt;T2&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="op_QmarkDivide" signature="(System.Nullable`1&lt;T1&gt;,T2)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="op_QmarkDivide$W" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T1,Microsoft.FSharp.Core.FSharpFunc`2&lt;T2,T3&gt;&gt;,System.Nullable`1&lt;T1&gt;,T2)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="op_DivideQmark" signature="(T1,System.Nullable`1&lt;T2&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="op_DivideQmark$W" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T1,Microsoft.FSharp.Core.FSharpFunc`2&lt;T2,T3&gt;&gt;,T1,System.Nullable`1&lt;T2&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="op_QmarkDivideQmark" signature="(System.Nullable`1&lt;T1&gt;,System.Nullable`1&lt;T2&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="op_QmarkDivideQmark$W" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T1,Microsoft.FSharp.Core.FSharpFunc`2&lt;T2,T3&gt;&gt;,System.Nullable`1&lt;T1&gt;,System.Nullable`1&lt;T2&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Linq.QueryBuilder" filename="F:\workspace\_work\1\s\src\fsharp\FSharp.Core\Query.fs" line-rate="1" branch-rate="1" complexity="2">
          <methods>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="For" signature="(Microsoft.FSharp.Linq.QuerySource`2&lt;T,Q&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;T,Microsoft.FSharp.Linq.QuerySource`2&lt;TResult,Q2&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Zero" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Yield" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="YieldFrom" signature="(Microsoft.FSharp.Linq.QuerySource`2&lt;T,Q&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Quote" signature="(Microsoft.FSharp.Quotations.FSharpExpr`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Source" signature="(System.Linq.IQueryable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Source" signature="(System.Collections.Generic.IEnumerable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Contains" signature="(Microsoft.FSharp.Linq.QuerySource`2&lt;T,Q&gt;,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Select" signature="(Microsoft.FSharp.Linq.QuerySource`2&lt;T,Q&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;T,TResult&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Where" signature="(Microsoft.FSharp.Linq.QuerySource`2&lt;T,Q&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.Boolean&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Last" signature="(Microsoft.FSharp.Linq.QuerySource`2&lt;T,Q&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="LastOrDefault" signature="(Microsoft.FSharp.Linq.QuerySource`2&lt;T,Q&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExactlyOne" signature="(Microsoft.FSharp.Linq.QuerySource`2&lt;T,Q&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExactlyOneOrDefault" signature="(Microsoft.FSharp.Linq.QuerySource`2&lt;T,Q&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Count" signature="(Microsoft.FSharp.Linq.QuerySource`2&lt;T,Q&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Distinct" signature="(Microsoft.FSharp.Linq.QuerySource`2&lt;T,Q&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Exists" signature="(Microsoft.FSharp.Linq.QuerySource`2&lt;T,Q&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.Boolean&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="All" signature="(Microsoft.FSharp.Linq.QuerySource`2&lt;T,Q&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.Boolean&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Head" signature="(Microsoft.FSharp.Linq.QuerySource`2&lt;T,Q&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Nth" signature="(Microsoft.FSharp.Linq.QuerySource`2&lt;T,Q&gt;,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Skip" signature="(Microsoft.FSharp.Linq.QuerySource`2&lt;T,Q&gt;,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SkipWhile" signature="(Microsoft.FSharp.Linq.QuerySource`2&lt;T,Q&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.Boolean&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Take" signature="(Microsoft.FSharp.Linq.QuerySource`2&lt;T,Q&gt;,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TakeWhile" signature="(Microsoft.FSharp.Linq.QuerySource`2&lt;T,Q&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.Boolean&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Find" signature="(Microsoft.FSharp.Linq.QuerySource`2&lt;T,Q&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.Boolean&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HeadOrDefault" signature="(Microsoft.FSharp.Linq.QuerySource`2&lt;T,Q&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MinBy" signature="(Microsoft.FSharp.Linq.QuerySource`2&lt;T,Q&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;T,TValue&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MaxBy" signature="(Microsoft.FSharp.Linq.QuerySource`2&lt;T,Q&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;T,TValue&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MinByNullable" signature="(Microsoft.FSharp.Linq.QuerySource`2&lt;T,Q&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.Nullable`1&lt;TValue&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MaxByNullable" signature="(Microsoft.FSharp.Linq.QuerySource`2&lt;T,Q&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.Nullable`1&lt;TValue&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SumByNullable" signature="(Microsoft.FSharp.Linq.QuerySource`2&lt;T,Q&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.Nullable`1&lt;TValue&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SumByNullable$W" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;Microsoft.FSharp.Core.Unit,TValue&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;TValue,Microsoft.FSharp.Core.FSharpFunc`2&lt;TValue,TValue&gt;&gt;,Microsoft.FSharp.Linq.QuerySource`2&lt;T,Q&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.Nullable`1&lt;TValue&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AverageByNullable" signature="(Microsoft.FSharp.Linq.QuerySource`2&lt;T,Q&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.Nullable`1&lt;TValue&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AverageByNullable$W" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;TValue,Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Int32,TValue&gt;&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;Microsoft.FSharp.Core.Unit,TValue&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;TValue,Microsoft.FSharp.Core.FSharpFunc`2&lt;TValue,TValue&gt;&gt;,Microsoft.FSharp.Linq.QuerySource`2&lt;T,Q&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.Nullable`1&lt;TValue&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AverageBy" signature="(Microsoft.FSharp.Linq.QuerySource`2&lt;T,Q&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;T,TValue&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AverageBy$W" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;TValue,Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Int32,TValue&gt;&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;Microsoft.FSharp.Core.Unit,TValue&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;TValue,Microsoft.FSharp.Core.FSharpFunc`2&lt;TValue,TValue&gt;&gt;,Microsoft.FSharp.Linq.QuerySource`2&lt;T,Q&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;T,TValue&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SumBy" signature="(Microsoft.FSharp.Linq.QuerySource`2&lt;T,Q&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;T,TValue&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SumBy$W" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;Microsoft.FSharp.Core.Unit,TValue&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;TValue,Microsoft.FSharp.Core.FSharpFunc`2&lt;TValue,TValue&gt;&gt;,Microsoft.FSharp.Linq.QuerySource`2&lt;T,Q&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;T,TValue&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GroupBy" signature="(Microsoft.FSharp.Linq.QuerySource`2&lt;T,Q&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;T,TKey&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SortBy" signature="(Microsoft.FSharp.Linq.QuerySource`2&lt;T,Q&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;T,TKey&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SortByDescending" signature="(Microsoft.FSharp.Linq.QuerySource`2&lt;T,Q&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;T,TKey&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ThenBy" signature="(Microsoft.FSharp.Linq.QuerySource`2&lt;T,Q&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;T,TKey&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ThenByDescending" signature="(Microsoft.FSharp.Linq.QuerySource`2&lt;T,Q&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;T,TKey&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SortByNullable" signature="(Microsoft.FSharp.Linq.QuerySource`2&lt;T,Q&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.Nullable`1&lt;TKey&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SortByNullableDescending" signature="(Microsoft.FSharp.Linq.QuerySource`2&lt;T,Q&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.Nullable`1&lt;TKey&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ThenByNullable" signature="(Microsoft.FSharp.Linq.QuerySource`2&lt;T,Q&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.Nullable`1&lt;TKey&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ThenByNullableDescending" signature="(Microsoft.FSharp.Linq.QuerySource`2&lt;T,Q&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.Nullable`1&lt;TKey&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GroupValBy" signature="(Microsoft.FSharp.Linq.QuerySource`2&lt;T,Q&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;T,TValue&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;T,TKey&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Join" signature="(Microsoft.FSharp.Linq.QuerySource`2&lt;TOuter,Q&gt;,Microsoft.FSharp.Linq.QuerySource`2&lt;TInner,Q&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;TOuter,TKey&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;TInner,TKey&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;TOuter,Microsoft.FSharp.Core.FSharpFunc`2&lt;TInner,TResult&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GroupJoin" signature="(Microsoft.FSharp.Linq.QuerySource`2&lt;TOuter,Q&gt;,Microsoft.FSharp.Linq.QuerySource`2&lt;TInner,Q&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;TOuter,TKey&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;TInner,TKey&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;TOuter,Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Collections.Generic.IEnumerable`1&lt;TInner&gt;,TResult&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="LeftOuterJoin" signature="(Microsoft.FSharp.Linq.QuerySource`2&lt;TOuter,Q&gt;,Microsoft.FSharp.Linq.QuerySource`2&lt;TInner,Q&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;TOuter,TKey&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;TInner,TKey&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;TOuter,Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Collections.Generic.IEnumerable`1&lt;TInner&gt;,TResult&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="RunQueryAsValue" signature="(Microsoft.FSharp.Quotations.FSharpExpr`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="RunQueryAsEnumerable" signature="(Microsoft.FSharp.Quotations.FSharpExpr`1&lt;Microsoft.FSharp.Linq.QuerySource`2&lt;T,System.Collections.IEnumerable&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="RunQueryAsQueryable" signature="(Microsoft.FSharp.Quotations.FSharpExpr`1&lt;Microsoft.FSharp.Linq.QuerySource`2&lt;T,System.Linq.IQueryable&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Run" signature="(Microsoft.FSharp.Quotations.FSharpExpr`1&lt;Microsoft.FSharp.Linq.QuerySource`2&lt;T,System.Linq.IQueryable&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(TOuter)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(TInner)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(TOuter,TInner)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(TOuter)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(TInner)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(TOuter,System.Collections.Generic.IEnumerable`1&lt;TInner&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(TOuter)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(TInner)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(TOuter,System.Collections.Generic.IEnumerable`1&lt;TInner&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Linq.QueryModule" filename="F:\workspace\_work\1\s\src\fsharp\FSharp.Core\Query.fs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="|Getter|_|" signature="(System.Reflection.PropertyInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="|SpecificCall1|_|" signature="(System.RuntimeMethodHandle)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="|SpecificCall2|_|" signature="(System.RuntimeMethodHandle)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="|SpecificCall3|_|" signature="(System.RuntimeMethodHandle)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="stripSuccessiveProjLets@343-1" signature="(Microsoft.FSharp.Quotations.FSharpVar,System.Int32,Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="|LambdaNoDetupling|_|" signature="(Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="restoreTupleProjections" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;System.Tuple`2&lt;Microsoft.FSharp.Quotations.FSharpVar,a&gt;&gt;,Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="loop@359-49" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;Microsoft.FSharp.Quotations.FSharpVar&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;Microsoft.FSharp.Collections.FSharpList`1&lt;System.Tuple`2&lt;Microsoft.FSharp.Quotations.FSharpVar,Microsoft.FSharp.Quotations.FSharpExpr&gt;&gt;&gt;,Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="|LambdasNoDetupling|_|" signature="(Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CallGenericStaticMethod" signature="(System.RuntimeMethodHandle)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CallGenericInstanceMethod" signature="(System.RuntimeMethodHandle)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BindGenericStaticMethod" signature="(System.Reflection.MethodInfo,Microsoft.FSharp.Collections.FSharpList`1&lt;System.Type&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MakeGenericStaticMethod" signature="(System.RuntimeMethodHandle)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MakeGenericInstanceMethod" signature="(System.RuntimeMethodHandle)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MakeImplicitExpressionConversion" signature="(Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FuncExprToDelegateExpr" signature="(System.Type,System.Type,Microsoft.FSharp.Quotations.FSharpVar,Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MakersCallersInstance" signature="(System.RuntimeMethodHandle)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MakersCallers2" signature="(System.RuntimeMethodHandle,System.RuntimeMethodHandle)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Call@469" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Tuple`2&lt;Microsoft.FSharp.Collections.FSharpList`1&lt;System.Type&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;System.Object&gt;&gt;,System.Object&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Tuple`2&lt;Microsoft.FSharp.Collections.FSharpList`1&lt;System.Type&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;System.Object&gt;&gt;,System.Object&gt;,System.Boolean,System.Type,System.Object,Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Make@462" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Tuple`2&lt;Microsoft.FSharp.Collections.FSharpList`1&lt;System.Type&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;Microsoft.FSharp.Quotations.FSharpExpr&gt;&gt;,Microsoft.FSharp.Quotations.FSharpExpr&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Tuple`2&lt;Microsoft.FSharp.Collections.FSharpList`1&lt;System.Type&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;Microsoft.FSharp.Quotations.FSharpExpr&gt;&gt;,Microsoft.FSharp.Quotations.FSharpExpr&gt;,System.Boolean,System.Type,Microsoft.FSharp.Quotations.FSharpExpr,Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MakeOrCallContainsOrElementAt" signature="(System.RuntimeMethodHandle,System.RuntimeMethodHandle)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Call@498-1" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Tuple`2&lt;Microsoft.FSharp.Collections.FSharpList`1&lt;System.Type&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;System.Object&gt;&gt;,System.Object&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Tuple`2&lt;Microsoft.FSharp.Collections.FSharpList`1&lt;System.Type&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;System.Object&gt;&gt;,System.Object&gt;,System.Boolean,System.Type,System.Type,System.Object,System.Type,Microsoft.FSharp.Quotations.FSharpVar,Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Make@487-1" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Tuple`2&lt;Microsoft.FSharp.Collections.FSharpList`1&lt;System.Type&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;Microsoft.FSharp.Quotations.FSharpExpr&gt;&gt;,Microsoft.FSharp.Quotations.FSharpExpr&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Tuple`2&lt;Microsoft.FSharp.Collections.FSharpList`1&lt;System.Type&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;Microsoft.FSharp.Quotations.FSharpExpr&gt;&gt;,Microsoft.FSharp.Quotations.FSharpExpr&gt;,System.Boolean,Microsoft.FSharp.Quotations.FSharpExpr,Microsoft.FSharp.Quotations.FSharpVar,Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MakeOrCallMinByOrMaxBy" signature="(System.RuntimeMethodHandle,System.RuntimeMethodHandle)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Call@541-2" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Tuple`2&lt;Microsoft.FSharp.Collections.FSharpList`1&lt;System.Type&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;System.Object&gt;&gt;,System.Object&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Tuple`2&lt;Microsoft.FSharp.Collections.FSharpList`1&lt;System.Type&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;System.Object&gt;&gt;,System.Object&gt;,System.Boolean,System.Type,System.Object,Microsoft.FSharp.Quotations.FSharpVar,Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Make@531-2" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Tuple`2&lt;Microsoft.FSharp.Collections.FSharpList`1&lt;System.Type&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;Microsoft.FSharp.Quotations.FSharpExpr&gt;&gt;,Microsoft.FSharp.Quotations.FSharpExpr&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Tuple`2&lt;Microsoft.FSharp.Collections.FSharpList`1&lt;System.Type&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;Microsoft.FSharp.Quotations.FSharpExpr&gt;&gt;,Microsoft.FSharp.Quotations.FSharpExpr&gt;,System.Boolean,Microsoft.FSharp.Quotations.FSharpExpr,Microsoft.FSharp.Quotations.FSharpVar,Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MakeOrCallAnyOrAllOrFirstFind" signature="(System.RuntimeMethodHandle,System.RuntimeMethodHandle)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Call$cont@628" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Tuple`2&lt;Microsoft.FSharp.Collections.FSharpList`1&lt;System.Type&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;System.Object&gt;&gt;,System.Object&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Tuple`2&lt;Microsoft.FSharp.Collections.FSharpList`1&lt;System.Type&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;System.Object&gt;&gt;,System.Object&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Tuple`2&lt;Microsoft.FSharp.Collections.FSharpList`1&lt;System.Type&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;System.Object&gt;&gt;,System.Object&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Tuple`2&lt;Microsoft.FSharp.Collections.FSharpList`1&lt;System.Type&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;System.Object&gt;&gt;,System.Object&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Tuple`2&lt;Microsoft.FSharp.Collections.FSharpList`1&lt;System.Type&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;System.Object&gt;&gt;,System.Object&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Tuple`3&lt;System.Object,Microsoft.FSharp.Collections.FSharpList`1&lt;System.Type&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;System.Object&gt;&gt;,System.Object&gt;,Microsoft.FSharp.Quotations.FSharpVar,System.Type,System.Object,System.Type,System.Type,Microsoft.FSharp.Quotations.FSharpExpr,System.Object,Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Make$cont@599" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Tuple`2&lt;Microsoft.FSharp.Collections.FSharpList`1&lt;System.Type&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;Microsoft.FSharp.Quotations.FSharpExpr&gt;&gt;,Microsoft.FSharp.Quotations.FSharpExpr&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Tuple`2&lt;Microsoft.FSharp.Collections.FSharpList`1&lt;System.Type&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;Microsoft.FSharp.Quotations.FSharpExpr&gt;&gt;,Microsoft.FSharp.Quotations.FSharpExpr&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Tuple`3&lt;Microsoft.FSharp.Quotations.FSharpExpr,Microsoft.FSharp.Collections.FSharpList`1&lt;System.Type&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;Microsoft.FSharp.Quotations.FSharpExpr&gt;&gt;,Microsoft.FSharp.Quotations.FSharpExpr&gt;,Microsoft.FSharp.Quotations.FSharpVar,Microsoft.FSharp.Quotations.FSharpExpr,Microsoft.FSharp.Quotations.FSharpExpr,Microsoft.FSharp.Quotations.FSharpExpr,System.Type,System.Type,Microsoft.FSharp.Quotations.FSharpExpr,Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Call@614-3" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Tuple`2&lt;Microsoft.FSharp.Collections.FSharpList`1&lt;System.Type&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;System.Object&gt;&gt;,System.Object&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Tuple`2&lt;Microsoft.FSharp.Collections.FSharpList`1&lt;System.Type&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;System.Object&gt;&gt;,System.Object&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Tuple`2&lt;Microsoft.FSharp.Collections.FSharpList`1&lt;System.Type&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;System.Object&gt;&gt;,System.Object&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Tuple`2&lt;Microsoft.FSharp.Collections.FSharpList`1&lt;System.Type&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;System.Object&gt;&gt;,System.Object&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Tuple`2&lt;Microsoft.FSharp.Collections.FSharpList`1&lt;System.Type&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;System.Object&gt;&gt;,System.Object&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Tuple`2&lt;Microsoft.FSharp.Collections.FSharpList`1&lt;System.Type&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;System.Object&gt;&gt;,System.Object&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Tuple`2&lt;Microsoft.FSharp.Collections.FSharpList`1&lt;System.Type&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;System.Object&gt;&gt;,System.Object&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Tuple`2&lt;Microsoft.FSharp.Collections.FSharpList`1&lt;System.Type&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;System.Object&gt;&gt;,System.Object&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Tuple`2&lt;Microsoft.FSharp.Collections.FSharpList`1&lt;System.Type&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;System.Object&gt;&gt;,System.Object&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Tuple`2&lt;Microsoft.FSharp.Collections.FSharpList`1&lt;System.Type&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;System.Object&gt;&gt;,System.Object&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Tuple`3&lt;System.Object,Microsoft.FSharp.Collections.FSharpList`1&lt;System.Type&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;System.Object&gt;&gt;,System.Object&gt;,System.Object,System.Boolean,System.Type,System.Type,System.Object,System.Type,Microsoft.FSharp.Quotations.FSharpVar,Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Make@575-3" signature="(System.Boolean,Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Tuple`2&lt;Microsoft.FSharp.Collections.FSharpList`1&lt;System.Type&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;Microsoft.FSharp.Quotations.FSharpExpr&gt;&gt;,Microsoft.FSharp.Quotations.FSharpExpr&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Tuple`2&lt;Microsoft.FSharp.Collections.FSharpList`1&lt;System.Type&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;Microsoft.FSharp.Quotations.FSharpExpr&gt;&gt;,Microsoft.FSharp.Quotations.FSharpExpr&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Tuple`2&lt;Microsoft.FSharp.Collections.FSharpList`1&lt;System.Type&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;Microsoft.FSharp.Quotations.FSharpExpr&gt;&gt;,Microsoft.FSharp.Quotations.FSharpExpr&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Tuple`2&lt;Microsoft.FSharp.Collections.FSharpList`1&lt;System.Type&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;Microsoft.FSharp.Quotations.FSharpExpr&gt;&gt;,Microsoft.FSharp.Quotations.FSharpExpr&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Tuple`2&lt;Microsoft.FSharp.Collections.FSharpList`1&lt;System.Type&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;Microsoft.FSharp.Quotations.FSharpExpr&gt;&gt;,Microsoft.FSharp.Quotations.FSharpExpr&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Tuple`2&lt;Microsoft.FSharp.Collections.FSharpList`1&lt;System.Type&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;Microsoft.FSharp.Quotations.FSharpExpr&gt;&gt;,Microsoft.FSharp.Quotations.FSharpExpr&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Tuple`2&lt;Microsoft.FSharp.Collections.FSharpList`1&lt;System.Type&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;Microsoft.FSharp.Quotations.FSharpExpr&gt;&gt;,Microsoft.FSharp.Quotations.FSharpExpr&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Tuple`2&lt;Microsoft.FSharp.Collections.FSharpList`1&lt;System.Type&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;Microsoft.FSharp.Quotations.FSharpExpr&gt;&gt;,Microsoft.FSharp.Quotations.FSharpExpr&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Tuple`2&lt;Microsoft.FSharp.Collections.FSharpList`1&lt;System.Type&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;Microsoft.FSharp.Quotations.FSharpExpr&gt;&gt;,Microsoft.FSharp.Quotations.FSharpExpr&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Tuple`2&lt;Microsoft.FSharp.Collections.FSharpList`1&lt;System.Type&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;Microsoft.FSharp.Quotations.FSharpExpr&gt;&gt;,Microsoft.FSharp.Quotations.FSharpExpr&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Tuple`3&lt;Microsoft.FSharp.Quotations.FSharpExpr,Microsoft.FSharp.Collections.FSharpList`1&lt;System.Type&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;Microsoft.FSharp.Quotations.FSharpExpr&gt;&gt;,Microsoft.FSharp.Quotations.FSharpExpr&gt;,Microsoft.FSharp.Quotations.FSharpExpr,System.Boolean,Microsoft.FSharp.Quotations.FSharpExpr,Microsoft.FSharp.Quotations.FSharpVar,Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="failDueToUnsupportedInputTypeInSumByOrAverageBy@573" signature="(Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MakeOrCallAverageByOrSumByGeneric" signature="(System.Boolean,System.RuntimeMethodHandle,System.RuntimeMethodHandle,System.RuntimeMethodHandle,System.RuntimeMethodHandle,System.RuntimeMethodHandle,System.RuntimeMethodHandle,System.RuntimeMethodHandle,System.RuntimeMethodHandle,System.RuntimeMethodHandle,System.RuntimeMethodHandle,System.RuntimeMethodHandle)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Call@720-4" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Tuple`2&lt;Microsoft.FSharp.Collections.FSharpList`1&lt;System.Type&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;System.Object&gt;&gt;,System.Object&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Tuple`2&lt;Microsoft.FSharp.Collections.FSharpList`1&lt;System.Type&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;System.Object&gt;&gt;,System.Object&gt;,System.Tuple`3&lt;System.Boolean,System.Type,e&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Make@715-4" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Tuple`2&lt;Microsoft.FSharp.Collections.FSharpList`1&lt;System.Type&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;Microsoft.FSharp.Quotations.FSharpExpr&gt;&gt;,Microsoft.FSharp.Quotations.FSharpExpr&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Tuple`2&lt;Microsoft.FSharp.Collections.FSharpList`1&lt;System.Type&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;Microsoft.FSharp.Quotations.FSharpExpr&gt;&gt;,Microsoft.FSharp.Quotations.FSharpExpr&gt;,System.Boolean,System.Type,Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MakeOrCallSimpleOp" signature="(System.RuntimeMethodHandle,System.RuntimeMethodHandle)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MakeOrderByOrThenBy" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Tuple`2&lt;Microsoft.FSharp.Collections.FSharpList`1&lt;System.Type&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;Microsoft.FSharp.Quotations.FSharpExpr&gt;&gt;,a&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Tuple`2&lt;Microsoft.FSharp.Collections.FSharpList`1&lt;System.Type&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;Microsoft.FSharp.Quotations.FSharpExpr&gt;&gt;,a&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GenMakeSkipWhileOrTakeWhile" signature="(System.RuntimeMethodHandle,System.RuntimeMethodHandle)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MakeSkipOrTake" signature="(System.RuntimeMethodHandle,System.RuntimeMethodHandle)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="walk@968-1" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;Microsoft.FSharp.Core.FSharpFunc`2&lt;a,Microsoft.FSharp.Quotations.FSharpExpr&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;Microsoft.FSharp.Quotations.FSharpExpr,Microsoft.FSharp.Core.FSharpOption`1&lt;Microsoft.FSharp.Quotations.FSharpExpr&gt;&gt;&gt;,Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="RewriteExpr" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;Microsoft.FSharp.Core.FSharpFunc`2&lt;a,Microsoft.FSharp.Quotations.FSharpExpr&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;Microsoft.FSharp.Quotations.FSharpExpr,Microsoft.FSharp.Core.FSharpOption`1&lt;Microsoft.FSharp.Quotations.FSharpExpr&gt;&gt;&gt;,Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="|LetExprReduction|_|" signature="(Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="|MacroReduction|_|$cont@988-1" signature="(Microsoft.FSharp.Quotations.FSharpExpr,Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="|MacroReduction|_|$cont@988" signature="(Microsoft.FSharp.Quotations.FSharpExpr,Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="|MacroReduction|_|" signature="(Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MacroExpand" signature="(Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="|ZeroOnElseBranch|_|" signature="(Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ConvMutableToImmutable" signature="(Microsoft.FSharp.Linq.RuntimeHelpers.Adapters/ConversionDescription,Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ConvertImmutableConsumerToMutableConsumer" signature="(Microsoft.FSharp.Linq.RuntimeHelpers.Adapters/ConversionDescription,Microsoft.FSharp.Quotations.FSharpVar,Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="|AnyNestedQuery|_|" signature="(Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="|EnumerableNestedQuery|_|" signature="(Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CommitTransInnerResult" signature="(Microsoft.FSharp.Linq.QueryModule/TransInnerResult)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TransInner$cont@1274-4" signature="(System.Boolean,Microsoft.FSharp.Quotations.FSharpExpr,Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TransInner$cont@1274-3" signature="(System.Boolean,Microsoft.FSharp.Quotations.FSharpExpr,Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TransInner$cont@1274-2" signature="(System.Boolean,Microsoft.FSharp.Quotations.FSharpExpr,Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TransInner$cont@1528-1" signature="(System.Boolean,System.Type,Microsoft.FSharp.Quotations.FSharpExpr,Microsoft.FSharp.Quotations.FSharpVar,Microsoft.FSharp.Quotations.FSharpVar,Microsoft.FSharp.Quotations.FSharpExpr,System.Type,Microsoft.FSharp.Quotations.FSharpExpr,Microsoft.FSharp.Quotations.FSharpVar,Microsoft.FSharp.Quotations.FSharpVar,Microsoft.FSharp.Quotations.FSharpExpr,Microsoft.FSharp.Quotations.FSharpExpr,Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TransInner$cont@1501" signature="(System.Boolean,System.Type,Microsoft.FSharp.Quotations.FSharpExpr,Microsoft.FSharp.Quotations.FSharpVar,Microsoft.FSharp.Quotations.FSharpVar,Microsoft.FSharp.Quotations.FSharpExpr,Microsoft.FSharp.Quotations.FSharpExpr,Microsoft.FSharp.Quotations.FSharpVar,Microsoft.FSharp.Quotations.FSharpVar,Microsoft.FSharp.Quotations.FSharpExpr,Microsoft.FSharp.Quotations.FSharpExpr,Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TransFor@1294" signature="(Microsoft.FSharp.Linq.QueryModule/CanEliminate,System.Boolean,System.Type,Microsoft.FSharp.Quotations.FSharpVar,System.Type,Microsoft.FSharp.Linq.RuntimeHelpers.Adapters/ConversionDescription,Microsoft.FSharp.Linq.QueryModule/TransInnerResult,Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TransInner" signature="(Microsoft.FSharp.Linq.QueryModule/CanEliminate,System.Boolean,Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TransInnerAndCommit" signature="(Microsoft.FSharp.Linq.QueryModule/CanEliminate,System.Boolean,Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TransInnerNoCheck" signature="(Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TransJoinInputs" signature="(System.Boolean,Microsoft.FSharp.Quotations.FSharpExpr,Microsoft.FSharp.Quotations.FSharpExpr,Microsoft.FSharp.Quotations.FSharpVar,Microsoft.FSharp.Quotations.FSharpExpr,Microsoft.FSharp.Quotations.FSharpVar,Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TransInnerApplicative" signature="(System.Boolean,Microsoft.FSharp.Quotations.FSharpExpr,Microsoft.FSharp.Quotations.FSharpVar,Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TransInnerApplicativeAndCommit" signature="(System.Boolean,Microsoft.FSharp.Quotations.FSharpExpr,Microsoft.FSharp.Quotations.FSharpVar,Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TransInnerWithFinalConsume" signature="(Microsoft.FSharp.Linq.QueryModule/CanEliminate,Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TransNestedInnerWithConsumer" signature="(Microsoft.FSharp.Quotations.FSharpExpr,Microsoft.FSharp.Quotations.FSharpVar,Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TransNestedOuter" signature="(Microsoft.FSharp.Linq.QueryModule/CanEliminate,Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="EliminateNestedQueries" signature="(Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="EvalNonNestedInner" signature="(Microsoft.FSharp.Linq.QueryModule/CanEliminate,Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="EvalNonNestedOuter" signature="(Microsoft.FSharp.Linq.QueryModule/CanEliminate,Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Tuple`2&lt;Microsoft.FSharp.Quotations.FSharpVar,a&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Tuple`2&lt;Microsoft.FSharp.Collections.FSharpList`1&lt;System.Type&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;System.Object&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Tuple`3&lt;System.Object,Microsoft.FSharp.Collections.FSharpList`1&lt;System.Type&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;System.Object&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Tuple`2&lt;Microsoft.FSharp.Collections.FSharpList`1&lt;System.Type&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;Microsoft.FSharp.Quotations.FSharpExpr&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Tuple`3&lt;Microsoft.FSharp.Quotations.FSharpExpr,Microsoft.FSharp.Collections.FSharpList`1&lt;System.Type&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;Microsoft.FSharp.Quotations.FSharpExpr&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Tuple`3&lt;a,Microsoft.FSharp.Collections.FSharpList`1&lt;System.Type&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;System.Object&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Tuple`3&lt;b,Microsoft.FSharp.Collections.FSharpList`1&lt;System.Type&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;Microsoft.FSharp.Quotations.FSharpExpr&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Tuple`4&lt;System.Boolean,a,b,c&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Tuple`4&lt;System.Boolean,d,e,f&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Tuple`4&lt;System.Boolean,a,Microsoft.FSharp.Quotations.FSharpVar,b&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Tuple`7&lt;System.Boolean,c,d,e,f,Microsoft.FSharp.Quotations.FSharpVar,g&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Tuple`4&lt;System.Boolean,a,Microsoft.FSharp.Quotations.FSharpVar,b&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Tuple`5&lt;System.Boolean,c,d,Microsoft.FSharp.Quotations.FSharpVar,e&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Tuple`5&lt;a,System.Boolean,b,Microsoft.FSharp.Quotations.FSharpVar,c&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Tuple`8&lt;d,System.Boolean,e,f,g,h,Microsoft.FSharp.Quotations.FSharpVar,System.Tuple`1&lt;i&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Tuple`3&lt;System.Boolean,System.Type,e&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Tuple`3&lt;System.Boolean,a,b&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Tuple`3&lt;System.Boolean,c,d&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Tuple`5&lt;Microsoft.FSharp.Linq.QueryModule/CanEliminate,System.Boolean,Microsoft.FSharp.Quotations.FSharpExpr,Microsoft.FSharp.Quotations.FSharpVar,Microsoft.FSharp.Quotations.FSharpExpr&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Tuple`4&lt;System.Boolean,System.Type,Microsoft.FSharp.Quotations.FSharpExpr,Microsoft.FSharp.Quotations.FSharpExpr&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Tuple`2&lt;System.Type,Microsoft.FSharp.Quotations.FSharpExpr&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Tuple`7&lt;System.Boolean,System.Type,Microsoft.FSharp.Quotations.FSharpExpr,Microsoft.FSharp.Quotations.FSharpVar,Microsoft.FSharp.Quotations.FSharpExpr,Microsoft.FSharp.Quotations.FSharpVar,Microsoft.FSharp.Quotations.FSharpExpr&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Tuple`4&lt;System.Boolean,Microsoft.FSharp.Quotations.FSharpExpr,Microsoft.FSharp.Quotations.FSharpVar,Microsoft.FSharp.Quotations.FSharpExpr&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Tuple`4&lt;System.Boolean,Microsoft.FSharp.Quotations.FSharpExpr,Microsoft.FSharp.Quotations.FSharpVar,Microsoft.FSharp.Quotations.FSharpExpr&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Tuple`4&lt;System.Boolean,Microsoft.FSharp.Quotations.FSharpExpr,Microsoft.FSharp.Quotations.FSharpVar,Microsoft.FSharp.Quotations.FSharpExpr&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Tuple`4&lt;System.Boolean,System.Type,Microsoft.FSharp.Quotations.FSharpExpr,Microsoft.FSharp.Quotations.FSharpExpr&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Tuple`3&lt;System.Boolean,System.Type,Microsoft.FSharp.Quotations.FSharpExpr&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Tuple`4&lt;System.Boolean,Microsoft.FSharp.Quotations.FSharpExpr,Microsoft.FSharp.Quotations.FSharpVar,Microsoft.FSharp.Quotations.FSharpExpr&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Tuple`8&lt;System.Boolean,System.Type,System.Type,System.Type,Microsoft.FSharp.Quotations.FSharpExpr,Microsoft.FSharp.Quotations.FSharpVar,Microsoft.FSharp.Quotations.FSharpExpr,System.Tuple`2&lt;Microsoft.FSharp.Quotations.FSharpVar,Microsoft.FSharp.Quotations.FSharpExpr&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Tuple`8&lt;System.Boolean,System.Type,System.Type,System.Type,System.Type,Microsoft.FSharp.Quotations.FSharpExpr,Microsoft.FSharp.Quotations.FSharpExpr,System.Tuple`7&lt;Microsoft.FSharp.Quotations.FSharpVar,Microsoft.FSharp.Quotations.FSharpExpr,Microsoft.FSharp.Quotations.FSharpVar,Microsoft.FSharp.Quotations.FSharpExpr,Microsoft.FSharp.Quotations.FSharpVar,Microsoft.FSharp.Quotations.FSharpVar,Microsoft.FSharp.Quotations.FSharpExpr&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Tuple`8&lt;System.Boolean,System.Type,System.Type,System.Type,System.Type,Microsoft.FSharp.Quotations.FSharpExpr,Microsoft.FSharp.Quotations.FSharpExpr,System.Tuple`7&lt;Microsoft.FSharp.Quotations.FSharpVar,Microsoft.FSharp.Quotations.FSharpExpr,Microsoft.FSharp.Quotations.FSharpVar,Microsoft.FSharp.Quotations.FSharpExpr,Microsoft.FSharp.Quotations.FSharpVar,Microsoft.FSharp.Quotations.FSharpVar,Microsoft.FSharp.Quotations.FSharpExpr&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(a)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Quotations.FSharpVar)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;Microsoft.FSharp.Quotations.FSharpVar&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;Microsoft.FSharp.Quotations.FSharpExpr&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;Microsoft.FSharp.Quotations.FSharpVar&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;Microsoft.FSharp.Quotations.FSharpExpr&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Quotations.FSharpVar)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;Microsoft.FSharp.Quotations.FSharpVar&gt;,Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Quotations.FSharpVar)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Quotations.FSharpVar)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;Microsoft.FSharp.Quotations.FSharpExpr,Microsoft.FSharp.Quotations.FSharpExpr&gt;,Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Int32,Microsoft.FSharp.Linq.RuntimeHelpers.Adapters/ConversionDescription)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Int32,Microsoft.FSharp.Linq.RuntimeHelpers.Adapters/ConversionDescription)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Quotations.FSharpVar)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MakeSelect" signature="(Microsoft.FSharp.Linq.QueryModule/CanEliminate,System.Boolean,Microsoft.FSharp.Linq.QueryModule/TransInnerResult,Microsoft.FSharp.Quotations.FSharpVar,Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Quotations.FSharpVar)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;Microsoft.FSharp.Quotations.FSharpExpr,Microsoft.FSharp.Quotations.FSharpExpr&gt;,Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Microsoft.FSharp.Linq.ForwardDeclarations.IQueryMethods.Execute" signature="(Microsoft.FSharp.Quotations.FSharpExpr`1&lt;a&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Microsoft.FSharp.Linq.ForwardDeclarations.IQueryMethods.EliminateNestedQueries" signature="(Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Linq.QueryRunExtensions.HighPriority" filename="F:\workspace\_work\1\s\src\fsharp\FSharp.Core\Query.fs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="RunQueryAsEnumerable" signature="(Microsoft.FSharp.Linq.QueryBuilder,Microsoft.FSharp.Quotations.FSharpExpr`1&lt;Microsoft.FSharp.Linq.QuerySource`2&lt;T,System.Collections.IEnumerable&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Linq.QueryRunExtensions.LowPriority" filename="F:\workspace\_work\1\s\src\fsharp\FSharp.Core\Query.fs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="RunQueryAsValue" signature="(Microsoft.FSharp.Linq.QueryBuilder,Microsoft.FSharp.Quotations.FSharpExpr`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Linq.QuerySource`2" filename="F:\workspace\_work\1\s\src\fsharp\FSharp.Core\Query.fs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.Collections.Generic.IEnumerable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Source" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Linq.RuntimeHelpers.Adapters" filename="F:\workspace\_work\1\s\src\fsharp\FSharp.Core\QueryExtensions.fs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="memoize" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Type,b&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="leftSequentialSeries@59" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;Microsoft.FSharp.Quotations.FSharpExpr&gt;,Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="|LeftSequentialSeries|" signature="(Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="propSetList@69" signature="(Microsoft.FSharp.Quotations.FSharpVar,Microsoft.FSharp.Collections.FSharpList`1&lt;a&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;a&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="|PropSetList|_|" signature="(Microsoft.FSharp.Quotations.FSharpVar,Microsoft.FSharp.Collections.FSharpList`1&lt;Microsoft.FSharp.Quotations.FSharpExpr&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="|ObjectConstruction|_|" signature="(Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="|NewAnonymousObject|_|" signature="(Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="OneNewAnonymousObject" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;Microsoft.FSharp.Quotations.FSharpExpr&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NewAnonymousObject" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;Microsoft.FSharp.Quotations.FSharpExpr&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="walk@143" signature="(System.Int32,Microsoft.FSharp.Quotations.FSharpExpr,System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AnonymousObjectGet" signature="(Microsoft.FSharp.Quotations.FSharpExpr,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="RewriteTupleType" signature="(System.Type,Microsoft.FSharp.Core.FSharpFunc`2&lt;Microsoft.FSharp.Collections.FSharpList`1&lt;System.Type&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;System.Type&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="|RecordFieldGetSimplification|_|" signature="(Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ConvImmutableTypeToMutableType" signature="(Microsoft.FSharp.Linq.RuntimeHelpers.Adapters/ConversionDescription,System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CleanupLeaf" signature="(Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SimplifyConsumingExpr" signature="(Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ProduceMoreMutables" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;Microsoft.FSharp.Quotations.FSharpExpr,System.Tuple`2&lt;Microsoft.FSharp.Quotations.FSharpExpr,Microsoft.FSharp.Linq.RuntimeHelpers.Adapters/ConversionDescription&gt;&gt;,Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MakeSeqConv" signature="(Microsoft.FSharp.Linq.RuntimeHelpers.Adapters/ConversionDescription)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="System.Collections.Generic.IEqualityComparer&lt;System.Type&gt;.GetHashCode" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="System.Collections.Generic.IEqualityComparer&lt;System.Type&gt;.Equals" signature="(System.Type,System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Reflection.PropertyInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Reflection.PropertyInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Linq.RuntimeHelpers.Adapters/ConversionDescription,System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;System.Type&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Linq.RuntimeHelpers.Adapters/ConversionDescription,System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;System.Type&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Reflection.PropertyInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Quotations.FSharpExpr,Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Linq.RuntimeHelpers.AnonymousObject`1" filename="F:\workspace\_work\1\s\src\fsharp\FSharp.Core\MutableTuple.fs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Item1" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(T1)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Linq.RuntimeHelpers.AnonymousObject`2" filename="F:\workspace\_work\1\s\src\fsharp\FSharp.Core\MutableTuple.fs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Item1" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Item2" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(T1,T2)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Linq.RuntimeHelpers.AnonymousObject`3" filename="F:\workspace\_work\1\s\src\fsharp\FSharp.Core\MutableTuple.fs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Item1" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Item2" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Item3" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(T1,T2,T3)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Linq.RuntimeHelpers.AnonymousObject`4" filename="F:\workspace\_work\1\s\src\fsharp\FSharp.Core\MutableTuple.fs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Item1" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Item2" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Item3" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Item4" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(T1,T2,T3,T4)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Linq.RuntimeHelpers.AnonymousObject`5" filename="F:\workspace\_work\1\s\src\fsharp\FSharp.Core\MutableTuple.fs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Item1" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Item2" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Item3" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Item4" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Item5" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(T1,T2,T3,T4,T5)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Linq.RuntimeHelpers.AnonymousObject`6" filename="F:\workspace\_work\1\s\src\fsharp\FSharp.Core\MutableTuple.fs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Item1" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Item2" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Item3" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Item4" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Item5" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Item6" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(T1,T2,T3,T4,T5,T6)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Linq.RuntimeHelpers.AnonymousObject`7" filename="F:\workspace\_work\1\s\src\fsharp\FSharp.Core\MutableTuple.fs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Item1" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Item2" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Item3" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Item4" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Item5" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Item6" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Item7" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(T1,T2,T3,T4,T5,T6,T7)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Linq.RuntimeHelpers.AnonymousObject`8" filename="F:\workspace\_work\1\s\src\fsharp\FSharp.Core\MutableTuple.fs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Item1" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Item2" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Item3" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Item4" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Item5" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Item6" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Item7" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Item8" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(T1,T2,T3,T4,T5,T6,T7,T8)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Linq.RuntimeHelpers.Grouping`2" filename="F:\workspace\_work\1\s\src\fsharp\FSharp.Core\QueryExtensions.fs" line-rate="1" branch-rate="1" complexity="3">
          <methods>
            <method name=".ctor" signature="(K,System.Collections.Generic.IEnumerable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="System.Linq.IGrouping&lt;'K, 'T&gt;.get_Key" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.Collections.IEnumerable.GetEnumerator" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.Collections.Generic.IEnumerable&lt;'T&gt;.GetEnumerator" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Linq.RuntimeHelpers.LeafExpressionConverter" filename="F:\workspace\_work\1\s\src\fsharp\FSharp.Core\Linq.fs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="MemberInitializationHelper" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NewAnonymousObjectHelper" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ImplicitExpressionConversionHelper" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="equivHeadTypes" signature="(System.Type,System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="getFunctionType" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SubstHelperRaw" signature="(Microsoft.FSharp.Quotations.FSharpExpr,Microsoft.FSharp.Quotations.FSharpVar[],System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SubstHelper" signature="(Microsoft.FSharp.Quotations.FSharpExpr,Microsoft.FSharp.Quotations.FSharpVar[],System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SpecificCallToMethodInfo" signature="(System.Reflection.MethodInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="|SpecificCallToMethod|_|" signature="(System.RuntimeMethodHandle)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="|Sequentials|" signature="(Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="|MemberInitializationQ|_|" signature="(Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="|NewAnonymousObjectQ|_|" signature="(Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="|NullableConstruction|_|" signature="(Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="build@610-1" signature="(System.Type,System.Linq.Expressions.Expression[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="build@311" signature="(System.Type,System.Linq.Expressions.Expression,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ConvExprToLinqInContext" signature="(Microsoft.FSharp.Linq.RuntimeHelpers.LeafExpressionConverter/ConvEnv,Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="failConvert" signature="(Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="transBinOp" signature="(Microsoft.FSharp.Quotations.FSharpExpr,Microsoft.FSharp.Linq.RuntimeHelpers.LeafExpressionConverter/ConvEnv,System.Boolean,Microsoft.FSharp.Collections.FSharpList`1&lt;Microsoft.FSharp.Quotations.FSharpExpr&gt;,System.Boolean,Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Tuple`2&lt;System.Linq.Expressions.Expression,System.Linq.Expressions.Expression&gt;,System.Linq.Expressions.BinaryExpression&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ConvObjArg" signature="(Microsoft.FSharp.Linq.RuntimeHelpers.LeafExpressionConverter/ConvEnv,Microsoft.FSharp.Core.FSharpOption`1&lt;Microsoft.FSharp.Quotations.FSharpExpr&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Type&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ConvExprsToLinq" signature="(Microsoft.FSharp.Linq.RuntimeHelpers.LeafExpressionConverter/ConvEnv,Microsoft.FSharp.Collections.FSharpList`1&lt;Microsoft.FSharp.Quotations.FSharpExpr&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ConvVarToLinq" signature="(Microsoft.FSharp.Quotations.FSharpVar)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="QuotationToExpression" signature="(Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="QuotationToLambdaExpression" signature="(Microsoft.FSharp.Quotations.FSharpExpr`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="EvaluateQuotation" signature="(Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Quotations.FSharpVar)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Reflection.PropertyInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Tuple`2&lt;System.Linq.Expressions.Expression,System.Linq.Expressions.Expression&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Tuple`2&lt;System.Linq.Expressions.Expression,System.Linq.Expressions.Expression&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Tuple`2&lt;System.Linq.Expressions.Expression,System.Linq.Expressions.Expression&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Tuple`2&lt;System.Linq.Expressions.Expression,System.Linq.Expressions.Expression&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Tuple`2&lt;System.Linq.Expressions.Expression,System.Linq.Expressions.Expression&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Tuple`2&lt;System.Linq.Expressions.Expression,System.Linq.Expressions.Expression&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Tuple`2&lt;System.Linq.Expressions.Expression,System.Linq.Expressions.Expression&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Tuple`2&lt;System.Linq.Expressions.Expression,System.Linq.Expressions.Expression&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Tuple`2&lt;System.Linq.Expressions.Expression,System.Linq.Expressions.Expression&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Tuple`2&lt;System.Linq.Expressions.Expression,System.Linq.Expressions.Expression&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Tuple`2&lt;System.Linq.Expressions.Expression,System.Linq.Expressions.Expression&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Tuple`2&lt;System.Linq.Expressions.Expression,System.Linq.Expressions.Expression&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Tuple`2&lt;System.Linq.Expressions.Expression,System.Linq.Expressions.Expression&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Tuple`2&lt;System.Linq.Expressions.Expression,System.Linq.Expressions.Expression&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Tuple`2&lt;System.Linq.Expressions.Expression,System.Linq.Expressions.Expression&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Tuple`2&lt;System.Linq.Expressions.Expression,System.Linq.Expressions.Expression&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Tuple`2&lt;System.Linq.Expressions.Expression,System.Linq.Expressions.Expression&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Tuple`2&lt;System.Linq.Expressions.Expression,System.Linq.Expressions.Expression&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Tuple`2&lt;System.Linq.Expressions.Expression,System.Linq.Expressions.Expression&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Tuple`2&lt;System.Linq.Expressions.Expression,System.Linq.Expressions.Expression&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Tuple`2&lt;System.Linq.Expressions.Expression,System.Linq.Expressions.Expression&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Tuple`2&lt;System.Linq.Expressions.Expression,System.Linq.Expressions.Expression&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Tuple`2&lt;System.Linq.Expressions.Expression,System.Linq.Expressions.Expression&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Tuple`2&lt;System.Linq.Expressions.Expression,System.Linq.Expressions.Expression&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Tuple`2&lt;System.Linq.Expressions.Expression,System.Linq.Expressions.Expression&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Tuple`2&lt;System.Linq.Expressions.Expression,System.Linq.Expressions.Expression&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Tuple`2&lt;System.Linq.Expressions.Expression,System.Linq.Expressions.Expression&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Tuple`2&lt;System.Linq.Expressions.Expression,System.Linq.Expressions.Expression&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Tuple`2&lt;System.Linq.Expressions.Expression,System.Linq.Expressions.Expression&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Tuple`2&lt;System.Linq.Expressions.Expression,System.Linq.Expressions.Expression&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Tuple`2&lt;System.Linq.Expressions.Expression,System.Linq.Expressions.Expression&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Tuple`2&lt;System.Linq.Expressions.Expression,System.Linq.Expressions.Expression&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Tuple`2&lt;System.Linq.Expressions.Expression,System.Linq.Expressions.Expression&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Tuple`2&lt;System.Linq.Expressions.Expression,System.Linq.Expressions.Expression&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Tuple`2&lt;System.Linq.Expressions.Expression,System.Linq.Expressions.Expression&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Tuple`2&lt;System.Linq.Expressions.Expression,System.Linq.Expressions.Expression&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Tuple`2&lt;System.Linq.Expressions.Expression,System.Linq.Expressions.Expression&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Tuple`2&lt;System.Linq.Expressions.Expression,System.Linq.Expressions.Expression&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Tuple`2&lt;System.Linq.Expressions.Expression,System.Linq.Expressions.Expression&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Tuple`2&lt;System.Linq.Expressions.Expression,System.Linq.Expressions.Expression&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Tuple`2&lt;System.Linq.Expressions.Expression,System.Linq.Expressions.Expression&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Tuple`2&lt;System.Linq.Expressions.Expression,System.Linq.Expressions.Expression&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Tuple`2&lt;System.Linq.Expressions.Expression,System.Linq.Expressions.Expression&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Tuple`2&lt;System.Linq.Expressions.Expression,System.Linq.Expressions.Expression&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Tuple`2&lt;System.Linq.Expressions.Expression,System.Linq.Expressions.Expression&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Tuple`2&lt;System.Linq.Expressions.Expression,System.Linq.Expressions.Expression&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Tuple`2&lt;System.Linq.Expressions.Expression,System.Linq.Expressions.Expression&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Tuple`2&lt;System.Linq.Expressions.Expression,System.Linq.Expressions.Expression&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Tuple`2&lt;System.Linq.Expressions.Expression,System.Linq.Expressions.Expression&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Tuple`2&lt;System.Linq.Expressions.Expression,System.Linq.Expressions.Expression&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Tuple`2&lt;System.Linq.Expressions.Expression,System.Linq.Expressions.Expression&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Tuple`2&lt;System.Linq.Expressions.Expression,System.Linq.Expressions.Expression&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Tuple`2&lt;System.Linq.Expressions.Expression,System.Linq.Expressions.Expression&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Tuple`2&lt;System.Linq.Expressions.Expression,System.Linq.Expressions.Expression&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Tuple`2&lt;System.Linq.Expressions.Expression,System.Linq.Expressions.Expression&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Tuple`2&lt;System.Linq.Expressions.Expression,System.Linq.Expressions.Expression&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Tuple`2&lt;System.Linq.Expressions.Expression,System.Linq.Expressions.Expression&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Tuple`2&lt;System.Linq.Expressions.Expression,System.Linq.Expressions.Expression&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Quotations.FSharpVar)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Collections.FSharpMap`2&lt;Microsoft.FSharp.Quotations.FSharpVar,System.Linq.Expressions.Expression&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Quotations.FSharpVar,System.Linq.Expressions.ParameterExpression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Quotations.FSharpVar)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Quotations.FSharpVar)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Quotations.FSharpVar)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Quotations.FSharpVar)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.NativeInterop.NativePtrModule" filename="F:\workspace\_work\1\s\src\fsharp\FSharp.Core\nativeptr.fs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="OfNativeIntInlined" signature="(System.IntPtr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToNativeIntInlined" signature="(System.IntPtr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToVoidPtrInlined" signature="(System.IntPtr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="OfVoidPtrInlined" signature="(System.Void*)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AddPointerInlined" signature="(System.IntPtr,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetPointerInlined" signature="(System.IntPtr,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetPointerInlined" signature="(System.IntPtr,System.Int32,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ReadPointerInlined" signature="(System.IntPtr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="WritePointerInlined" signature="(System.IntPtr,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="StackAllocate" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToByRefInlined" signature="(System.IntPtr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Primitives.Basics.Array" filename="F:\workspace\_work\1\s\src\fsharp\FSharp.Core\local.fs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="zeroCreateUnchecked" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="init" signature="(System.Int32,Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Int32,T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="loop@1007-17" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.Boolean&gt;,T[],System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="findBack" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.Boolean&gt;,T[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="loop@1014-18" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.Boolean&gt;,T[],System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="tryFindBack" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.Boolean&gt;,T[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="loop@1021-19" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.Boolean&gt;,T[],System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="findIndexBack" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.Boolean&gt;,T[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="loop@1028-20" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.Boolean&gt;,T[],System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="tryFindIndexBack" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.Boolean&gt;,T[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="permute" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Int32,System.Int32&gt;,T[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="mapFold" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;TState,Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.Tuple`2&lt;TResult,TState&gt;&gt;&gt;,TState,T[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="mapFoldBack" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,Microsoft.FSharp.Core.FSharpFunc`2&lt;TState,System.Tuple`2&lt;TResult,TState&gt;&gt;&gt;,T[],TState)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="scanSubRight" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,Microsoft.FSharp.Core.FSharpFunc`2&lt;TState,TState&gt;&gt;,T[],System.Int32,System.Int32,TState)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="unstableSortInPlaceBy" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,TKey&gt;,T[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="unstableSortInPlace" signature="(T[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="stableSortWithKeysAndComparer" signature="(System.Collections.Generic.IComparer`1&lt;TKey&gt;,System.Collections.Generic.IComparer`1&lt;TKey&gt;,T[],TKey[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="stableSortInPlaceBy" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,TKey&gt;,T[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="stableSortInPlace" signature="(T[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="stableSortInPlaceWith" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.Int32&gt;&gt;,T[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="subUnchecked" signature="(System.Int32,System.Int32,T[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="splitInto$cont@1174" signature="(System.Int32,T[],System.Int32,Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="splitInto" signature="(System.Int32,T[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="System.Collections.Generic.IComparer&lt;'T&gt;.Compare" signature="(T,T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Primitives.Basics.List" filename="F:\workspace\_work\1\s\src\fsharp\FSharp.Core\local.fs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="distinctToFreshConsTail" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;a&gt;,System.Collections.Generic.HashSet`1&lt;a&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;a&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="distinctWithComparer" signature="(System.Collections.Generic.IEqualityComparer`1&lt;T&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="distinctByToFreshConsTail" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;a&gt;,System.Collections.Generic.HashSet`1&lt;b&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;a,b&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;a&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="distinctByWithComparer" signature="(System.Collections.Generic.IEqualityComparer`1&lt;TKey&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;T,TKey&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="countBy" signature="(System.Collections.Generic.Dictionary`2&lt;T1,System.Int32&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;T1,T2&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="pairwiseToFreshConsTail" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;System.Tuple`2&lt;a,a&gt;&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;a&gt;,a)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="pairwise" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="chooseToFreshConsTail" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;a&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;b,Microsoft.FSharp.Core.FSharpOption`1&lt;a&gt;&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;b&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="choose" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,Microsoft.FSharp.Core.FSharpOption`1&lt;TResult&gt;&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="loop@204-15" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,TSafeKey&gt;,System.Collections.Generic.Dictionary`2&lt;TSafeKey,Microsoft.FSharp.Collections.FSharpList`1&lt;T&gt;[]&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="groupBy" signature="(System.Collections.Generic.IEqualityComparer`1&lt;TSafeKey&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;T,TSafeKey&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;TSafeKey,TKey&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="mapToFreshConsTail" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;a&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;b,a&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;b&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="map" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,TResult&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="mapiToFreshConsTail" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;a&gt;,Microsoft.FSharp.Core.OptimizedClosures/FSharpFunc`3&lt;System.Int32,b,a&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;b&gt;,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="mapi" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Int32,Microsoft.FSharp.Core.FSharpFunc`2&lt;T,TResult&gt;&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="map2ToFreshConsTail" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;a&gt;,Microsoft.FSharp.Core.OptimizedClosures/FSharpFunc`3&lt;b,c,a&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;b&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;c&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="map2" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T1,Microsoft.FSharp.Core.FSharpFunc`2&lt;T2,TResult&gt;&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;T1&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;T2&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="map3ToFreshConsTail" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;a&gt;,Microsoft.FSharp.Core.OptimizedClosures/FSharpFunc`4&lt;b,c,d,a&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;b&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;c&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;d&gt;,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="map3" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T1,Microsoft.FSharp.Core.FSharpFunc`2&lt;T2,Microsoft.FSharp.Core.FSharpFunc`2&lt;T3,TResult&gt;&gt;&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;T1&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;T2&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;T3&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="mapi2ToFreshConsTail" signature="(System.Int32,Microsoft.FSharp.Collections.FSharpList`1&lt;a&gt;,Microsoft.FSharp.Core.OptimizedClosures/FSharpFunc`4&lt;System.Int32,b,c,a&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;b&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;c&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="mapi2" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Int32,Microsoft.FSharp.Core.FSharpFunc`2&lt;T1,Microsoft.FSharp.Core.FSharpFunc`2&lt;T2,TResult&gt;&gt;&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;T1&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;T2&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="scanToFreshConsTail" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;a&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;b&gt;,a,Microsoft.FSharp.Core.OptimizedClosures/FSharpFunc`3&lt;a,b,a&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="scan" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;TState,Microsoft.FSharp.Core.FSharpFunc`2&lt;T,TState&gt;&gt;,TState,Microsoft.FSharp.Collections.FSharpList`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="indexedToFreshConsTail" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;System.Tuple`2&lt;System.Int32,a&gt;&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;a&gt;,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="indexed" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="mapFoldToFreshConsTail" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;TResult&gt;,Microsoft.FSharp.Core.OptimizedClosures/FSharpFunc`3&lt;TState,T,System.Tuple`2&lt;TResult,TState&gt;&gt;,TState,Microsoft.FSharp.Collections.FSharpList`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="mapFold" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;TState,Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.Tuple`2&lt;TResult,TState&gt;&gt;&gt;,TState,Microsoft.FSharp.Collections.FSharpList`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="forall" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.Boolean&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="exists" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.Boolean&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="revAcc" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;a&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;a&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="rev" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="appendToFreshConsTail" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;a&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;a&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="collectToFreshConsTail" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,Microsoft.FSharp.Collections.FSharpList`1&lt;TResult&gt;&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;T&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;TResult&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="collect" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,Microsoft.FSharp.Collections.FSharpList`1&lt;TResult&gt;&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="allPairsToFreshConsTailSingle" signature="(a,Microsoft.FSharp.Collections.FSharpList`1&lt;b&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;System.Tuple`2&lt;a,b&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="allPairsToFreshConsTail" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;a&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;b&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;System.Tuple`2&lt;a,b&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="allPairs" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;T1&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;T2&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="filterToFreshConsTail" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;a&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;a,System.Boolean&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;a&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="filter" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.Boolean&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="concatToFreshConsTail" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;a&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;a&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;Microsoft.FSharp.Collections.FSharpList`1&lt;a&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="concatToEmpty" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;Microsoft.FSharp.Collections.FSharpList`1&lt;a&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="loop@521-16" signature="(T[],System.Int32,Microsoft.FSharp.Collections.FSharpList`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="toArray" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ofArray" signature="(T[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ofSeq" signature="(System.Collections.Generic.IEnumerable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="concat" signature="(System.Collections.Generic.IEnumerable`1&lt;Microsoft.FSharp.Collections.FSharpList`1&lt;T&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="initToFreshConsTail" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;a&gt;,System.Int32,System.Int32,Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Int32,a&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="init" signature="(System.Int32,Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Int32,T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="takeFreshConsTail" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;a&gt;,System.Int32,Microsoft.FSharp.Collections.FSharpList`1&lt;a&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="take" signature="(System.Int32,Microsoft.FSharp.Collections.FSharpList`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="splitAtFreshConsTail" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;a&gt;,System.Int32,Microsoft.FSharp.Collections.FSharpList`1&lt;a&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="splitAt" signature="(System.Int32,Microsoft.FSharp.Collections.FSharpList`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="partitionToFreshConsTails" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;a&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;a&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;a,System.Boolean&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;a&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="partitionToFreshConsTailLeft" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;a&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;a,System.Boolean&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;a&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="partitionToFreshConsTailRight" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;a&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;a,System.Boolean&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;a&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="partition" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.Boolean&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="transposeGetHeadsFreshConsTail" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;a&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;Microsoft.FSharp.Collections.FSharpList`1&lt;a&gt;&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;Microsoft.FSharp.Collections.FSharpList`1&lt;a&gt;&gt;,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="transposeGetHeads" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;Microsoft.FSharp.Collections.FSharpList`1&lt;a&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="transposeToFreshConsTail" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;Microsoft.FSharp.Collections.FSharpList`1&lt;a&gt;&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;Microsoft.FSharp.Collections.FSharpList`1&lt;a&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="transpose" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;Microsoft.FSharp.Collections.FSharpList`1&lt;T&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="truncateToFreshConsTail" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;a&gt;,System.Int32,Microsoft.FSharp.Collections.FSharpList`1&lt;a&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="truncate" signature="(System.Int32,Microsoft.FSharp.Collections.FSharpList`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="unfoldToFreshConsTail" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;a&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;b,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Tuple`2&lt;a,b&gt;&gt;&gt;,b)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="unfold" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;TState,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Tuple`2&lt;T,TState&gt;&gt;&gt;,TState)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="unzipToFreshConsTail" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;a&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;b&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;System.Tuple`2&lt;a,b&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="unzip" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;System.Tuple`2&lt;T1,T2&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="unzip3ToFreshConsTail" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;a&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;b&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;c&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;System.Tuple`3&lt;a,b,c&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="unzip3" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;System.Tuple`3&lt;T1,T2,T3&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="windowedToFreshConsTail" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;Microsoft.FSharp.Collections.FSharpList`1&lt;a&gt;&gt;,System.Int32,System.Int32,Microsoft.FSharp.Collections.FSharpList`1&lt;a&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="windowed" signature="(System.Int32,Microsoft.FSharp.Collections.FSharpList`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="chunkBySizeToFreshConsTail" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;a&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;Microsoft.FSharp.Collections.FSharpList`1&lt;a&gt;&gt;,System.Int32,System.Int32,Microsoft.FSharp.Collections.FSharpList`1&lt;a&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="chunkBySize" signature="(System.Int32,Microsoft.FSharp.Collections.FSharpList`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="splitIntoToFreshConsTail" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;a&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;Microsoft.FSharp.Collections.FSharpList`1&lt;a&gt;&gt;,System.Int32,System.Int32,System.Int32,System.Int32,Microsoft.FSharp.Collections.FSharpList`1&lt;a&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="splitInto" signature="(System.Int32,Microsoft.FSharp.Collections.FSharpList`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="zipToFreshConsTail" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;System.Tuple`2&lt;a,b&gt;&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;a&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;b&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="zip" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;T1&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;T2&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="zip3ToFreshConsTail" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;System.Tuple`3&lt;a,b,c&gt;&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;a&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;b&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;c&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="zip3" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;T1&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;T2&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;T3&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="takeWhileFreshConsTail" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;a&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;a,System.Boolean&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;a&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="takeWhile" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,System.Boolean&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="tryLastV" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Primitives.Basics.Seq" filename="F:\workspace\_work\1\s\src\fsharp\FSharp.Core\local.fs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="tryLastV" signature="(System.Collections.Generic.IEnumerable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Quotations.DerivedPatternsModule" filename="F:\workspace\_work\1\s\src\fsharp\FSharp.Core\quotations.fs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="BoolPattern" signature="(Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="StringPattern" signature="(Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SinglePattern" signature="(Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DoublePattern" signature="(Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CharPattern" signature="(Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SBytePattern" signature="(Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BytePattern" signature="(Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Int16Pattern" signature="(Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="UInt16Pattern" signature="(Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Int32Pattern" signature="(Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="UInt32Pattern" signature="(Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Int64Pattern" signature="(Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="UInt64Pattern" signature="(Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="UnitPattern" signature="(Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="stripSuccessiveProjLets@2155" signature="(Microsoft.FSharp.Quotations.FSharpVar,System.Int32,Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="|TupledLambda|_|" signature="(Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="|TupledApplication|_|" signature="(Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="LambdasPattern" signature="(Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ApplicationsPattern" signature="(Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AndAlsoPattern" signature="(Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="OrElsePattern" signature="(Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SpecificCallPattern" signature="(Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DecimalPattern" signature="(Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MethodWithReflectedDefinitionPattern" signature="(System.Reflection.MethodBase)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="PropertyGetterWithReflectedDefinitionPattern" signature="(System.Reflection.PropertyInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="PropertySetterWithReflectedDefinitionPattern" signature="(System.Reflection.PropertyInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Quotations.ExprShapeModule" filename="F:\workspace\_work\1\s\src\fsharp\FSharp.Core\quotations.fs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="e$cont@2257" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;Microsoft.FSharp.Quotations.FSharpExpr&gt;,Microsoft.FSharp.Quotations.ExprConstInfo,Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="RebuildShapeCombination" signature="(System.Object,Microsoft.FSharp.Collections.FSharpList`1&lt;Microsoft.FSharp.Quotations.FSharpExpr&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="loop@2304-48" signature="(Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ShapePattern" signature="(Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Quotations.FSharpExpr" filename="F:\workspace\_work\1\s\src\fsharp\FSharp.Core\quotations.fs" line-rate="1" branch-rate="1" complexity="3">
          <methods>
            <method name=".ctor" signature="(Microsoft.FSharp.Quotations.Tree,Microsoft.FSharp.Collections.FSharpList`1&lt;Microsoft.FSharp.Quotations.FSharpExpr&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Tree" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CustomAttributes" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Equals" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetHashCode" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="ToString" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="ToString" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DebugText" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetLayout" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Substitute" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;Microsoft.FSharp.Quotations.FSharpVar,Microsoft.FSharp.Core.FSharpOption`1&lt;Microsoft.FSharp.Quotations.FSharpExpr&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetFreeVars" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Type" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AddressOf" signature="(Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AddressSet" signature="(Microsoft.FSharp.Quotations.FSharpExpr,Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Application" signature="(Microsoft.FSharp.Quotations.FSharpExpr,Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Applications" signature="(Microsoft.FSharp.Quotations.FSharpExpr,Microsoft.FSharp.Collections.FSharpList`1&lt;Microsoft.FSharp.Collections.FSharpList`1&lt;Microsoft.FSharp.Quotations.FSharpExpr&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Call" signature="(System.Reflection.MethodInfo,Microsoft.FSharp.Collections.FSharpList`1&lt;Microsoft.FSharp.Quotations.FSharpExpr&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Call" signature="(Microsoft.FSharp.Quotations.FSharpExpr,System.Reflection.MethodInfo,Microsoft.FSharp.Collections.FSharpList`1&lt;Microsoft.FSharp.Quotations.FSharpExpr&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CallWithWitnesses" signature="(System.Reflection.MethodInfo,System.Reflection.MethodInfo,Microsoft.FSharp.Collections.FSharpList`1&lt;Microsoft.FSharp.Quotations.FSharpExpr&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;Microsoft.FSharp.Quotations.FSharpExpr&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CallWithWitnesses" signature="(Microsoft.FSharp.Quotations.FSharpExpr,System.Reflection.MethodInfo,System.Reflection.MethodInfo,Microsoft.FSharp.Collections.FSharpList`1&lt;Microsoft.FSharp.Quotations.FSharpExpr&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;Microsoft.FSharp.Quotations.FSharpExpr&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Coerce" signature="(Microsoft.FSharp.Quotations.FSharpExpr,System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IfThenElse" signature="(Microsoft.FSharp.Quotations.FSharpExpr,Microsoft.FSharp.Quotations.FSharpExpr,Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ForIntegerRangeLoop" signature="(Microsoft.FSharp.Quotations.FSharpVar,Microsoft.FSharp.Quotations.FSharpExpr,Microsoft.FSharp.Quotations.FSharpExpr,Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FieldGet" signature="(System.Reflection.FieldInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FieldGet" signature="(Microsoft.FSharp.Quotations.FSharpExpr,System.Reflection.FieldInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FieldSet" signature="(System.Reflection.FieldInfo,Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FieldSet" signature="(Microsoft.FSharp.Quotations.FSharpExpr,System.Reflection.FieldInfo,Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Lambda" signature="(Microsoft.FSharp.Quotations.FSharpVar,Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Let" signature="(Microsoft.FSharp.Quotations.FSharpVar,Microsoft.FSharp.Quotations.FSharpExpr,Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="LetRecursive" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;System.Tuple`2&lt;Microsoft.FSharp.Quotations.FSharpVar,Microsoft.FSharp.Quotations.FSharpExpr&gt;&gt;,Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NewObject" signature="(System.Reflection.ConstructorInfo,Microsoft.FSharp.Collections.FSharpList`1&lt;Microsoft.FSharp.Quotations.FSharpExpr&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DefaultValue" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NewTuple" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;Microsoft.FSharp.Quotations.FSharpExpr&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NewStructTuple" signature="(System.Reflection.Assembly,Microsoft.FSharp.Collections.FSharpList`1&lt;Microsoft.FSharp.Quotations.FSharpExpr&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NewRecord" signature="(System.Type,Microsoft.FSharp.Collections.FSharpList`1&lt;Microsoft.FSharp.Quotations.FSharpExpr&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NewArray" signature="(System.Type,Microsoft.FSharp.Collections.FSharpList`1&lt;Microsoft.FSharp.Quotations.FSharpExpr&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NewDelegate" signature="(System.Type,Microsoft.FSharp.Collections.FSharpList`1&lt;Microsoft.FSharp.Quotations.FSharpVar&gt;,Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NewUnionCase" signature="(Microsoft.FSharp.Reflection.UnionCaseInfo,Microsoft.FSharp.Collections.FSharpList`1&lt;Microsoft.FSharp.Quotations.FSharpExpr&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="PropertyGet" signature="(Microsoft.FSharp.Quotations.FSharpExpr,System.Reflection.PropertyInfo,Microsoft.FSharp.Core.FSharpOption`1&lt;Microsoft.FSharp.Collections.FSharpList`1&lt;Microsoft.FSharp.Quotations.FSharpExpr&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="PropertyGet" signature="(System.Reflection.PropertyInfo,Microsoft.FSharp.Core.FSharpOption`1&lt;Microsoft.FSharp.Collections.FSharpList`1&lt;Microsoft.FSharp.Quotations.FSharpExpr&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="PropertySet" signature="(Microsoft.FSharp.Quotations.FSharpExpr,System.Reflection.PropertyInfo,Microsoft.FSharp.Quotations.FSharpExpr,Microsoft.FSharp.Core.FSharpOption`1&lt;Microsoft.FSharp.Collections.FSharpList`1&lt;Microsoft.FSharp.Quotations.FSharpExpr&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="PropertySet" signature="(System.Reflection.PropertyInfo,Microsoft.FSharp.Quotations.FSharpExpr,Microsoft.FSharp.Core.FSharpOption`1&lt;Microsoft.FSharp.Collections.FSharpList`1&lt;Microsoft.FSharp.Quotations.FSharpExpr&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Quote" signature="(Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="QuoteRaw" signature="(Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="QuoteTyped" signature="(Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Sequential" signature="(Microsoft.FSharp.Quotations.FSharpExpr,Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TryWith" signature="(Microsoft.FSharp.Quotations.FSharpExpr,Microsoft.FSharp.Quotations.FSharpVar,Microsoft.FSharp.Quotations.FSharpExpr,Microsoft.FSharp.Quotations.FSharpVar,Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TryFinally" signature="(Microsoft.FSharp.Quotations.FSharpExpr,Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TupleGet" signature="(Microsoft.FSharp.Quotations.FSharpExpr,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TypeTest" signature="(Microsoft.FSharp.Quotations.FSharpExpr,System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="UnionCaseTest" signature="(Microsoft.FSharp.Quotations.FSharpExpr,Microsoft.FSharp.Reflection.UnionCaseInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Value" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Value" signature="(System.Object,System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ValueWithName" signature="(T,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ValueWithName" signature="(System.Object,System.Type,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="WithValue" signature="(T,Microsoft.FSharp.Quotations.FSharpExpr`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="WithValue" signature="(System.Object,System.Type,Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Var" signature="(Microsoft.FSharp.Quotations.FSharpVar)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="VarSet" signature="(Microsoft.FSharp.Quotations.FSharpVar,Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="WhileLoop" signature="(Microsoft.FSharp.Quotations.FSharpExpr,Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TryGetReflectedDefinition" signature="(System.Reflection.MethodBase)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Cast" signature="(Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Deserialize" signature="(System.Type,Microsoft.FSharp.Collections.FSharpList`1&lt;System.Type&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;Microsoft.FSharp.Quotations.FSharpExpr&gt;,System.Byte[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Deserialize40" signature="(System.Type,System.Type[],System.Type[],Microsoft.FSharp.Quotations.FSharpExpr[],System.Byte[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="RegisterReflectedDefinitions" signature="(System.Reflection.Assembly,System.String,System.Byte[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="RegisterReflectedDefinitions" signature="(System.Reflection.Assembly,System.String,System.Byte[],System.Type[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GlobalVar" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Text.StructuredPrintfImpl.Layout,Microsoft.FSharp.Text.StructuredPrintfImpl.Layout)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Quotations.FSharpVar)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Quotations.FSharpExpr`1" filename="F:\workspace\_work\1\s\src\fsharp\FSharp.Core\quotations.fs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(Microsoft.FSharp.Quotations.Tree,Microsoft.FSharp.Collections.FSharpList`1&lt;Microsoft.FSharp.Quotations.FSharpExpr&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Raw" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Quotations.FSharpVar" filename="F:\workspace\_work\1\s\src\fsharp\FSharp.Core\quotations.fs" line-rate="1" branch-rate="1" complexity="2">
          <methods>
            <method name=".ctor" signature="(System.String,System.Type,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Boolean&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Name" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsMutable" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Type" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Stamp" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Global" signature="(System.String,System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToString" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="GetHashCode" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Equals" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="System.IComparable.CompareTo" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Quotations.Helpers" filename="F:\workspace\_work\1\s\src\fsharp\FSharp.Core\quotations.fs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="queryAcc@29" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;a,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Tuple`2&lt;b,a&gt;&gt;&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;b&gt;,a)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="qOneOrMoreRLinear" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;a,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Tuple`2&lt;b,a&gt;&gt;&gt;,a)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="queryAcc@39-1" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;a,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Tuple`2&lt;a,b&gt;&gt;&gt;,a,Microsoft.FSharp.Collections.FSharpList`1&lt;b&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="qOneOrMoreLLinear" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;a,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Tuple`2&lt;a,b&gt;&gt;&gt;,a)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="mkRLinear" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Tuple`2&lt;a,b&gt;,b&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;a&gt;,b)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="mkLLinear" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Tuple`2&lt;a,b&gt;,a&gt;,a,Microsoft.FSharp.Collections.FSharpList`1&lt;b&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="isDelegateType" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="getDelegateInvoke" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(a,b)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(a,b)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Quotations.PatternsModule" filename="F:\workspace\_work\1\s\src\fsharp\FSharp.Core\quotations.fs" line-rate="1" branch-rate="1" complexity="2">
          <methods>
            <method name="loop@382-46" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;b&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;b&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="|FrontAndBack|_|" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;a&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="removeVoid" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="mkFunTy" signature="(System.Type,System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="|Comb0|_|" signature="(Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="|Comb1|_|" signature="(Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="|Comb2|_|" signature="(Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="|Comb3|_|" signature="(Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="VarPattern" signature="(Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ApplicationPattern" signature="(Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="LambdaPattern" signature="(Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="QuotePattern" signature="(Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="QuoteRawPattern" signature="(Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="QuoteTypedPattern" signature="(Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IfThenElsePattern" signature="(Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NewTuplePattern" signature="(Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NewStructTuplePattern" signature="(Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DefaultValuePattern" signature="(Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NewRecordPattern" signature="(Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NewUnionCasePattern" signature="(Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="UnionCaseTestPattern" signature="(Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TupleGetPattern" signature="(Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CoercePattern" signature="(Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TypeTestPattern" signature="(Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NewArrayPattern" signature="(Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AddressSetPattern" signature="(Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TryFinallyPattern" signature="(Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TryWithPattern" signature="(Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="VarSetPattern" signature="(Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ValuePattern" signature="(Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ValueObjPattern" signature="(Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ValueWithNamePattern" signature="(Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="WithValuePattern" signature="(Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AddressOfPattern" signature="(Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SequentialPattern" signature="(Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ForIntegerRangeLoopPattern" signature="(Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="WhileLoopPattern" signature="(Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="PropertyGetPattern" signature="(Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="PropertySetPattern" signature="(Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FieldGetPattern" signature="(Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FieldSetPattern" signature="(Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NewObjectPattern" signature="(Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CallPattern" signature="(Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CallWithWitnessesPattern" signature="(Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="|LetRaw|_|" signature="(Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="|LetRecRaw|_|" signature="(Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="LetPattern" signature="(Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="|NLambdas|_|" signature="(System.Int32,Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NewDelegatePattern" signature="(Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="LetRecursivePattern" signature="(Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="getRecordProperty" signature="(System.Type,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="getUnionCaseInfo" signature="(System.Type,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="getUnionCaseInfoField" signature="(Microsoft.FSharp.Reflection.UnionCaseInfo,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="typeOfAppliedLambda" signature="(Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="typeOf" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="mkFEN" signature="(Microsoft.FSharp.Quotations.ExprConstInfo,Microsoft.FSharp.Collections.FSharpList`1&lt;Microsoft.FSharp.Quotations.FSharpExpr&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="mkFE0" signature="(Microsoft.FSharp.Quotations.ExprConstInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="mkFE1" signature="(Microsoft.FSharp.Quotations.ExprConstInfo,Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="mkFE2" signature="(Microsoft.FSharp.Quotations.ExprConstInfo,Microsoft.FSharp.Quotations.FSharpExpr,Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="mkFE3" signature="(Microsoft.FSharp.Quotations.ExprConstInfo,Microsoft.FSharp.Quotations.FSharpExpr,Microsoft.FSharp.Quotations.FSharpExpr,Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="checkTypesSR" signature="(System.Type,System.Type,a,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="checkTypesWeakSR" signature="(System.Type,System.Type,a,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="checkArgs" signature="(System.Reflection.ParameterInfo[],Microsoft.FSharp.Collections.FSharpList`1&lt;Microsoft.FSharp.Quotations.FSharpExpr&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="loop@759-47" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="checkObj" signature="(System.Reflection.MemberInfo,Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="checkAppliedLambda" signature="(Microsoft.FSharp.Quotations.FSharpExpr,Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="checkBind" signature="(Microsoft.FSharp.Quotations.FSharpVar,Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="mkVar" signature="(Microsoft.FSharp.Quotations.FSharpVar)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="mkQuote" signature="(Microsoft.FSharp.Quotations.FSharpExpr,System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="mkValue" signature="(a,System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="mkValueWithName" signature="(a,System.Type,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="mkLiftedValueOpG" signature="(a,System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="mkLambda" signature="(Microsoft.FSharp.Quotations.FSharpVar,Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="mkTryWith" signature="(Microsoft.FSharp.Quotations.FSharpExpr,Microsoft.FSharp.Quotations.FSharpVar,Microsoft.FSharp.Quotations.FSharpExpr,Microsoft.FSharp.Quotations.FSharpVar,Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="mkApplication" signature="(Microsoft.FSharp.Quotations.FSharpExpr,Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="mkLetRawWithCheck" signature="(Microsoft.FSharp.Quotations.FSharpExpr,Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="mkNewTupleWithType" signature="(System.Type,Microsoft.FSharp.Collections.FSharpList`1&lt;Microsoft.FSharp.Quotations.FSharpExpr&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="mkNewTuple" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;Microsoft.FSharp.Quotations.FSharpExpr&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="mkNewStructTuple" signature="(System.Reflection.Assembly,Microsoft.FSharp.Collections.FSharpList`1&lt;Microsoft.FSharp.Quotations.FSharpExpr&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="mkTupleGet" signature="(System.Type,System.Int32,Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="mkNewRecord" signature="(System.Type,Microsoft.FSharp.Collections.FSharpList`1&lt;Microsoft.FSharp.Quotations.FSharpExpr&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="mkNewUnionCase" signature="(Microsoft.FSharp.Reflection.UnionCaseInfo,Microsoft.FSharp.Collections.FSharpList`1&lt;Microsoft.FSharp.Quotations.FSharpExpr&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="mkUnionCaseTest" signature="(Microsoft.FSharp.Reflection.UnionCaseInfo,Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="mkIfThenElse" signature="(Microsoft.FSharp.Quotations.FSharpExpr,Microsoft.FSharp.Quotations.FSharpExpr,Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="action@103-7" signature="(System.Type,Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="mkNewArray" signature="(System.Type,Microsoft.FSharp.Collections.FSharpList`1&lt;Microsoft.FSharp.Quotations.FSharpExpr&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="mkInstanceFieldGet" signature="(Microsoft.FSharp.Quotations.FSharpExpr,System.Reflection.FieldInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="mkStaticFieldGet" signature="(System.Reflection.FieldInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="mkStaticFieldSet" signature="(System.Reflection.FieldInfo,Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="mkInstanceFieldSet" signature="(Microsoft.FSharp.Quotations.FSharpExpr,System.Reflection.FieldInfo,Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="mkCtorCall" signature="(System.Reflection.ConstructorInfo,Microsoft.FSharp.Collections.FSharpList`1&lt;Microsoft.FSharp.Quotations.FSharpExpr&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="mkStaticPropGet" signature="(System.Reflection.PropertyInfo,Microsoft.FSharp.Collections.FSharpList`1&lt;Microsoft.FSharp.Quotations.FSharpExpr&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="mkInstancePropGet" signature="(Microsoft.FSharp.Quotations.FSharpExpr,System.Reflection.PropertyInfo,Microsoft.FSharp.Collections.FSharpList`1&lt;Microsoft.FSharp.Quotations.FSharpExpr&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="mkStaticPropSet" signature="(System.Reflection.PropertyInfo,Microsoft.FSharp.Collections.FSharpList`1&lt;Microsoft.FSharp.Quotations.FSharpExpr&gt;,Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="mkInstancePropSet" signature="(Microsoft.FSharp.Quotations.FSharpExpr,System.Reflection.PropertyInfo,Microsoft.FSharp.Collections.FSharpList`1&lt;Microsoft.FSharp.Quotations.FSharpExpr&gt;,Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="mkInstanceMethodCall" signature="(Microsoft.FSharp.Quotations.FSharpExpr,System.Reflection.MethodInfo,Microsoft.FSharp.Collections.FSharpList`1&lt;Microsoft.FSharp.Quotations.FSharpExpr&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="mkInstanceMethodCallW" signature="(Microsoft.FSharp.Quotations.FSharpExpr,System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.Int32,Microsoft.FSharp.Collections.FSharpList`1&lt;Microsoft.FSharp.Quotations.FSharpExpr&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="mkStaticMethodCall" signature="(System.Reflection.MethodInfo,Microsoft.FSharp.Collections.FSharpList`1&lt;Microsoft.FSharp.Quotations.FSharpExpr&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="mkStaticMethodCallW" signature="(System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.Int32,Microsoft.FSharp.Collections.FSharpList`1&lt;Microsoft.FSharp.Quotations.FSharpExpr&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="mkForLoop" signature="(Microsoft.FSharp.Quotations.FSharpVar,Microsoft.FSharp.Quotations.FSharpExpr,Microsoft.FSharp.Quotations.FSharpExpr,Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="mkWhileLoop" signature="(Microsoft.FSharp.Quotations.FSharpExpr,Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="mkNewDelegate" signature="(System.Type,Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="mkLet" signature="(Microsoft.FSharp.Quotations.FSharpVar,Microsoft.FSharp.Quotations.FSharpExpr,Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="mkTupledApplication" signature="(Microsoft.FSharp.Quotations.FSharpExpr,Microsoft.FSharp.Collections.FSharpList`1&lt;Microsoft.FSharp.Quotations.FSharpExpr&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="mkLetRec" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;System.Tuple`2&lt;Microsoft.FSharp.Quotations.FSharpVar,Microsoft.FSharp.Quotations.FSharpExpr&gt;&gt;,Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="instFormal" signature="(System.Type[],Microsoft.FSharp.Core.FSharpFunc`2&lt;Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Int32,System.Type&gt;,T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="getGenericArguments" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="getNumGenericArguments" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="bindMethodBySearch" signature="(System.Type,System.String,System.Int32,Microsoft.FSharp.Collections.FSharpList`1&lt;Microsoft.FSharp.Core.FSharpFunc`2&lt;Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Int32,System.Type&gt;,System.Type&gt;&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Int32,System.Type&gt;,System.Type&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="bindMethodHelper" signature="(System.Type,System.String,System.Int32,Microsoft.FSharp.Collections.FSharpList`1&lt;Microsoft.FSharp.Core.FSharpFunc`2&lt;Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Int32,System.Type&gt;,System.Type&gt;&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Int32,System.Type&gt;,System.Type&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="bindModuleProperty" signature="(System.Type,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="iter@1151-1" signature="(System.Type[],System.Type[],System.Reflection.ParameterInfo[],System.Int32,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="weight@1149" signature="(System.Type[],System.Type[],System.Reflection.MethodInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="fail@1118" signature="(System.Type,System.String,Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="bindModuleFunctionWithCallSiteArgs$cont@1110" signature="(System.Type,System.String,System.Type[],System.Type[],Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="bindModuleFunctionWithCallSiteArgs" signature="(System.Type,System.String,Microsoft.FSharp.Collections.FSharpList`1&lt;System.Type&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;System.Type&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="mkNamedType" signature="(System.Type,Microsoft.FSharp.Collections.FSharpList`1&lt;System.Type&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="inst" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;System.Type&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Int32,System.Type&gt;,T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="bindProp" signature="(System.Type,System.String,Microsoft.FSharp.Core.FSharpFunc`2&lt;Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Int32,System.Type&gt;,a&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Int32,System.Type&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;System.Type&gt;&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;System.Type&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="bindField" signature="(System.Type,System.String,Microsoft.FSharp.Collections.FSharpList`1&lt;System.Type&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="bindGenericCctor" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="bindGenericCtor" signature="(System.Type,Microsoft.FSharp.Core.FSharpFunc`2&lt;Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Int32,System.Type&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;System.Type&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="bindCtor" signature="(System.Type,Microsoft.FSharp.Core.FSharpFunc`2&lt;Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Int32,System.Type&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;System.Type&gt;&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;System.Type&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="split@1246" signature="(System.Int32,Microsoft.FSharp.Collections.FSharpList`1&lt;b&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="chop" signature="(System.Int32,Microsoft.FSharp.Collections.FSharpList`1&lt;a&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="instMeth" signature="(System.Reflection.MethodInfo,Microsoft.FSharp.Collections.FSharpList`1&lt;System.Type&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="bindMeth" signature="(System.Tuple`5&lt;System.Type,Microsoft.FSharp.Collections.FSharpList`1&lt;Microsoft.FSharp.Core.FSharpFunc`2&lt;Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Int32,System.Type&gt;,System.Type&gt;&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Int32,System.Type&gt;,System.Type&gt;,System.String,System.Int32&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;System.Type&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="pinfoIsStatic" signature="(System.Reflection.PropertyInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="decodeFunTy" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;System.Type&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="decodeArrayTy" signature="(System.Int32,Microsoft.FSharp.Collections.FSharpList`1&lt;System.Type&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="mkNamedTycon" signature="(System.String,System.Reflection.Assembly)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="decodeAssemblyRef" signature="(Microsoft.FSharp.Quotations.PatternsModule/SimpleUnpickle/InputState,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="u_NamedType" signature="(Microsoft.FSharp.Quotations.PatternsModule/SimpleUnpickle/InputState)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="u_tyconstSpec" signature="(Microsoft.FSharp.Quotations.PatternsModule/SimpleUnpickle/InputState)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="appL" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;Microsoft.FSharp.Core.FSharpFunc`2&lt;a,b&gt;&gt;,a)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="u_dtype" signature="(Microsoft.FSharp.Quotations.PatternsModule/SimpleUnpickle/InputState)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="|NoTyArgs|" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;a&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="|OneTyArg|" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;a&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="addVar" signature="(Microsoft.FSharp.Quotations.PatternsModule/BindingEnv,Microsoft.FSharp.Quotations.FSharpVar)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="mkTyparSubst" signature="(System.Type[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="u_Expr" signature="(Microsoft.FSharp.Quotations.PatternsModule/SimpleUnpickle/InputState)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="u_VarDecl" signature="(Microsoft.FSharp.Quotations.PatternsModule/SimpleUnpickle/InputState)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="u_VarRef" signature="(Microsoft.FSharp.Quotations.PatternsModule/SimpleUnpickle/InputState)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="u_RecdField" signature="(Microsoft.FSharp.Quotations.PatternsModule/SimpleUnpickle/InputState)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="u_UnionCaseInfo" signature="(Microsoft.FSharp.Quotations.PatternsModule/SimpleUnpickle/InputState)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="u_UnionCaseField" signature="(Microsoft.FSharp.Quotations.PatternsModule/SimpleUnpickle/InputState)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="u_ModuleDefn$cont@1552" signature="(Microsoft.FSharp.Core.FSharpOption`1&lt;System.Tuple`2&lt;System.String,System.Int32&gt;&gt;,System.Type,System.String,Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="u_ModuleDefn" signature="(Microsoft.FSharp.Core.FSharpOption`1&lt;System.Tuple`2&lt;System.String,System.Int32&gt;&gt;,Microsoft.FSharp.Quotations.PatternsModule/SimpleUnpickle/InputState)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="u_MethodInfoData" signature="(Microsoft.FSharp.Quotations.PatternsModule/SimpleUnpickle/InputState)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="u_PropInfoData" signature="(Microsoft.FSharp.Quotations.PatternsModule/SimpleUnpickle/InputState)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="u_CtorInfoData" signature="(Microsoft.FSharp.Quotations.PatternsModule/SimpleUnpickle/InputState)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="u_MethodBase" signature="(Microsoft.FSharp.Quotations.PatternsModule/SimpleUnpickle/InputState)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="instModuleDefnOp" signature="(Microsoft.FSharp.Quotations.ExprConstInfo,Microsoft.FSharp.Collections.FSharpList`1&lt;System.Type&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="u_constSpec" signature="(Microsoft.FSharp.Quotations.PatternsModule/SimpleUnpickle/InputState)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="unpickleExpr" signature="(System.Type,System.Type[],System.Byte[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="fillHolesInRawExpr" signature="(Microsoft.FSharp.Quotations.FSharpExpr[],Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="freeInExprAcc" signature="(Microsoft.FSharp.Collections.FSharpSet`1&lt;Microsoft.FSharp.Quotations.FSharpVar&gt;,Microsoft.FSharp.Collections.FSharpSet`1&lt;Microsoft.FSharp.Quotations.FSharpVar&gt;,Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="substituteInExpr" signature="(Microsoft.FSharp.Collections.FSharpSet`1&lt;Microsoft.FSharp.Quotations.FSharpVar&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;Microsoft.FSharp.Quotations.FSharpVar,Microsoft.FSharp.Core.FSharpOption`1&lt;Microsoft.FSharp.Quotations.FSharpExpr&gt;&gt;,Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="readToEnd" signature="(System.IO.Stream)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="action@103-8" signature="(System.Reflection.MethodBase,Microsoft.FSharp.Core.FSharpFunc`2&lt;Microsoft.FSharp.Quotations.PatternsModule/BindingEnv,Microsoft.FSharp.Quotations.FSharpExpr&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="registerReflectedDefinitions" signature="(System.Reflection.Assembly,System.String,System.Byte[],System.Type[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="action@103-11" signature="(System.Reflection.MethodBase,Microsoft.FSharp.Core.FSharpFunc`2&lt;Microsoft.FSharp.Quotations.PatternsModule/BindingEnv,Microsoft.FSharp.Quotations.FSharpExpr&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="action@103-10" signature="(System.Reflection.Assembly,System.String,Microsoft.FSharp.Collections.FSharpList`1&lt;System.Tuple`2&lt;System.Reflection.MethodBase,Microsoft.FSharp.Core.FSharpFunc`2&lt;Microsoft.FSharp.Quotations.PatternsModule/BindingEnv,Microsoft.FSharp.Quotations.FSharpExpr&gt;&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="action@4737-9" signature="(System.Reflection.Assembly,Microsoft.FSharp.Quotations.PatternsModule/ReflectedDefinitionTableKey,Microsoft.FSharp.Collections.FSharpList`1&lt;System.Tuple`2&lt;System.String,Microsoft.FSharp.Collections.FSharpList`1&lt;System.Tuple`2&lt;System.Reflection.MethodBase,Microsoft.FSharp.Core.FSharpFunc`2&lt;Microsoft.FSharp.Quotations.PatternsModule/BindingEnv,Microsoft.FSharp.Quotations.FSharpExpr&gt;&gt;&gt;&gt;&gt;,Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="tryGetReflectedDefinition" signature="(System.Reflection.MethodBase,System.Type[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="tryGetReflectedDefinitionInstantiated" signature="(System.Reflection.MethodBase)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="deserialize" signature="(System.Type,System.Type[],System.Type[],Microsoft.FSharp.Quotations.FSharpExpr[],System.Byte[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="cast" signature="(Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Byte[],System.Int32,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ReadByte" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="ReadBytes" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ReadUtf8BytesAsString" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Reflection.PropertyInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Reflection.UnionCaseInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Reflection.ParameterInfo,Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Type,Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Reflection.PropertyInfo,Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Reflection.PropertyInfo,Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Reflection.ParameterInfo,System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Tuple`2&lt;Microsoft.FSharp.Quotations.FSharpVar,Microsoft.FSharp.Quotations.FSharpExpr&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Type,System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Reflection.MethodInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Int32,System.Type&gt;,System.Type&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Reflection.ParameterInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Reflection.MethodInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Int32,System.Type&gt;,System.Type&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Reflection.MethodInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Type,System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Reflection.MethodInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;System.Type&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;System.Type&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;System.Type&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;a,b&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Int32,System.Type&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Quotations.PatternsModule/SimpleUnpickle/InputState)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Int32,System.Type&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Quotations.PatternsModule/SimpleUnpickle/InputState)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Int32,System.Type&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Quotations.PatternsModule/SimpleUnpickle/InputState)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;Microsoft.FSharp.Quotations.PatternsModule/BindingEnv,Microsoft.FSharp.Quotations.FSharpExpr&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Quotations.PatternsModule/BindingEnv)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Quotations.PatternsModule/BindingEnv)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Quotations.PatternsModule/BindingEnv)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Quotations.PatternsModule/BindingEnv)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Quotations.PatternsModule/BindingEnv)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Quotations.PatternsModule/SimpleUnpickle/InputState)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;Microsoft.FSharp.Quotations.PatternsModule/BindingEnv,Microsoft.FSharp.Quotations.FSharpExpr&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Quotations.PatternsModule/BindingEnv)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Quotations.PatternsModule/BindingEnv)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Quotations.PatternsModule/BindingEnv)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Quotations.PatternsModule/BindingEnv)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Quotations.PatternsModule/BindingEnv)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;System.Type&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;System.Type&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;System.Type&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Reflection.MethodInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Reflection.MethodInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;System.Type&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;System.Type&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;System.Type&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;System.Type&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Quotations.PatternsModule/SimpleUnpickle/InputState)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Quotations.PatternsModule/SimpleUnpickle/InputState)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Int32,System.Type&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Quotations.PatternsModule/SimpleUnpickle/InputState)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Int32,System.Type&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;System.Type&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;System.Type&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;System.Type&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;System.Type&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;System.Type&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;System.Type&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;System.Type&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;System.Type&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;System.Type&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;System.Type&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;System.Type&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;System.Type&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;System.Type&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;System.Type&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;System.Type&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;System.Type&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;System.Type&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;System.Type&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;System.Type&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;System.Type&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;System.Type&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;System.Type&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;System.Type&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;System.Type&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;System.Type&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;System.Type&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;System.Type&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;System.Type&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;System.Type&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;System.Type&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;System.Type&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;System.Type&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;System.Type&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;System.Type&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;System.Type&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;System.Type&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;System.Type&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;System.Type&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;System.Type&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;System.Type&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;System.Type&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;System.Type&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;System.Type&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;System.Type&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;System.Type&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;System.Type&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;System.Type&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;System.Type&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;System.Type&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;System.Type&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;System.Type&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;System.Type&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;System.Type&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;System.Type&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;System.Type&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Quotations.PatternsModule/SimpleUnpickle/InputState)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Quotations.PatternsModule/SimpleUnpickle/InputState)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Quotations.PatternsModule/SimpleUnpickle/InputState)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Collections.FSharpSet`1&lt;Microsoft.FSharp.Quotations.FSharpVar&gt;,Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Quotations.FSharpVar)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="System.Collections.Generic.IEqualityComparer&lt;System.Tuple&lt;System.Reflection.Assembly, System.String&gt;&gt;.GetHashCode" signature="(System.Tuple`2&lt;System.Reflection.Assembly,System.String&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="System.Collections.Generic.IEqualityComparer&lt;System.Tuple&lt;System.Reflection.Assembly, System.String&gt;&gt;.Equals" signature="(System.Tuple`2&lt;System.Reflection.Assembly,System.String&gt;,System.Tuple`2&lt;System.Reflection.Assembly,System.String&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetKey" signature="(System.Reflection.MethodBase)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="System.Collections.Generic.IEqualityComparer&lt;Microsoft.FSharp.Quotations.PatternsModule.ReflectedDefinitionTableKey&gt;.GetHashCode" signature="(Microsoft.FSharp.Quotations.PatternsModule/ReflectedDefinitionTableKey)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="System.Collections.Generic.IEqualityComparer&lt;Microsoft.FSharp.Quotations.PatternsModule.ReflectedDefinitionTableKey&gt;.Equals" signature="(Microsoft.FSharp.Quotations.PatternsModule/ReflectedDefinitionTableKey,Microsoft.FSharp.Quotations.PatternsModule/ReflectedDefinitionTableKey)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="prim_u_int32" signature="(Microsoft.FSharp.Quotations.PatternsModule/SimpleUnpickle/InputState)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="u_int32" signature="(Microsoft.FSharp.Quotations.PatternsModule/SimpleUnpickle/InputState)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="u_int64" signature="(Microsoft.FSharp.Quotations.PatternsModule/SimpleUnpickle/InputState)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="u_uniq" signature="(a[],Microsoft.FSharp.Quotations.PatternsModule/SimpleUnpickle/InputState)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="u_list_aux" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;Microsoft.FSharp.Quotations.PatternsModule/SimpleUnpickle/InputState,a&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;a&gt;,Microsoft.FSharp.Quotations.PatternsModule/SimpleUnpickle/InputState)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="unpickleObj" signature="(System.Reflection.Assembly,System.Type[],Microsoft.FSharp.Core.FSharpFunc`2&lt;Microsoft.FSharp.Quotations.PatternsModule/SimpleUnpickle/InputState,a&gt;,System.Byte[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Quotations.PatternsModule/SimpleUnpickle/InputState)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Quotations.FSharpExpr)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Tuple`2&lt;Microsoft.FSharp.Quotations.FSharpExpr,Microsoft.FSharp.Collections.FSharpList`1&lt;Microsoft.FSharp.Quotations.FSharpExpr&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Tuple`2&lt;Microsoft.FSharp.Quotations.FSharpVar,Microsoft.FSharp.Quotations.FSharpExpr&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Reflection.DynamicFunction`2" filename="F:\workspace\_work\1\s\src\fsharp\FSharp.Core\reflect.fs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Object,System.Object&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(T1)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Reflection.FSharpReflectionExtensions" filename="F:\workspace\_work\1\s\src\fsharp\FSharp.Core\reflect.fs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="FSharpType.GetExceptionFields.Static" signature="(System.Type,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Boolean&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FSharpType.IsExceptionRepresentation.Static" signature="(System.Type,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Boolean&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FSharpType.GetUnionCases.Static" signature="(System.Type,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Boolean&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FSharpType.GetRecordFields.Static" signature="(System.Type,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Boolean&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FSharpType.IsUnion.Static" signature="(System.Type,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Boolean&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FSharpType.IsRecord.Static" signature="(System.Type,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Boolean&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FSharpValue.MakeRecord.Static" signature="(System.Type,System.Object[],Microsoft.FSharp.Core.FSharpOption`1&lt;System.Boolean&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FSharpValue.GetRecordFields.Static" signature="(System.Object,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Boolean&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FSharpValue.PreComputeRecordReader.Static" signature="(System.Type,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Boolean&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FSharpValue.PreComputeRecordConstructor.Static" signature="(System.Type,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Boolean&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FSharpValue.PreComputeRecordConstructorInfo.Static" signature="(System.Type,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Boolean&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FSharpValue.MakeUnion.Static" signature="(Microsoft.FSharp.Reflection.UnionCaseInfo,System.Object[],Microsoft.FSharp.Core.FSharpOption`1&lt;System.Boolean&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FSharpValue.PreComputeUnionConstructor.Static" signature="(Microsoft.FSharp.Reflection.UnionCaseInfo,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Boolean&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FSharpValue.PreComputeUnionConstructorInfo.Static" signature="(Microsoft.FSharp.Reflection.UnionCaseInfo,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Boolean&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FSharpValue.PreComputeUnionTagMemberInfo.Static" signature="(System.Type,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Boolean&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FSharpValue.GetUnionFields.Static" signature="(System.Object,System.Type,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Boolean&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FSharpValue.PreComputeUnionTagReader.Static" signature="(System.Type,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Boolean&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FSharpValue.PreComputeUnionReader.Static" signature="(Microsoft.FSharp.Reflection.UnionCaseInfo,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Boolean&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FSharpValue.GetExceptionFields.Static" signature="(System.Object,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Boolean&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Reflection.FSharpType" filename="F:\workspace\_work\1\s\src\fsharp\FSharp.Core\reflect.fs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="IsTuple" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsRecord" signature="(System.Type,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Reflection.BindingFlags&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsUnion" signature="(System.Type,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Reflection.BindingFlags&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsFunction" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsModule" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MakeFunctionType" signature="(System.Type,System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MakeTupleType" signature="(System.Type[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MakeTupleType" signature="(System.Reflection.Assembly,System.Type[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MakeStructTupleType" signature="(System.Reflection.Assembly,System.Type[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetTupleElements" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetFunctionElements" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetRecordFields" signature="(System.Type,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Reflection.BindingFlags&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetUnionCases" signature="(System.Type,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Reflection.BindingFlags&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsExceptionRepresentation" signature="(System.Type,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Reflection.BindingFlags&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetExceptionFields" signature="(System.Type,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Reflection.BindingFlags&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Int32,System.Tuple`2&lt;System.Int32,System.String&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Reflection.FSharpValue" filename="F:\workspace\_work\1\s\src\fsharp\FSharp.Core\reflect.fs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="MakeRecord" signature="(System.Type,System.Object[],Microsoft.FSharp.Core.FSharpOption`1&lt;System.Reflection.BindingFlags&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetRecordField" signature="(System.Object,System.Reflection.PropertyInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetRecordFields" signature="(System.Object,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Reflection.BindingFlags&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="PreComputeRecordFieldReader" signature="(System.Reflection.PropertyInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="PreComputeRecordReader" signature="(System.Type,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Reflection.BindingFlags&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="PreComputeRecordConstructor" signature="(System.Type,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Reflection.BindingFlags&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="PreComputeRecordConstructorInfo" signature="(System.Type,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Reflection.BindingFlags&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MakeFunction" signature="(System.Type,Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Object,System.Object&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MakeTuple" signature="(System.Object[],System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetTupleFields" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetTupleField" signature="(System.Object,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="PreComputeTupleReader" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="PreComputeTuplePropertyInfo" signature="(System.Type,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="PreComputeTupleConstructor" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="PreComputeTupleConstructorInfo" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MakeUnion" signature="(Microsoft.FSharp.Reflection.UnionCaseInfo,System.Object[],Microsoft.FSharp.Core.FSharpOption`1&lt;System.Reflection.BindingFlags&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="PreComputeUnionConstructor" signature="(Microsoft.FSharp.Reflection.UnionCaseInfo,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Reflection.BindingFlags&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="PreComputeUnionConstructorInfo" signature="(Microsoft.FSharp.Reflection.UnionCaseInfo,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Reflection.BindingFlags&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetUnionFields" signature="(System.Object,System.Type,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Reflection.BindingFlags&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="PreComputeUnionTagReader" signature="(System.Type,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Reflection.BindingFlags&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="PreComputeUnionTagMemberInfo" signature="(System.Type,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Reflection.BindingFlags&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="PreComputeUnionReader" signature="(Microsoft.FSharp.Reflection.UnionCaseInfo,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Reflection.BindingFlags&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetExceptionFields" signature="(System.Object,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Reflection.BindingFlags&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Reflection.Impl" filename="F:\workspace\_work\1\s\src\fsharp\FSharp.Core\reflect.fs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="equivHeadTypes" signature="(System.Type,System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="getInstancePropertyInfos" signature="(System.Type,System.String[],System.Reflection.BindingFlags)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="getInstancePropertyReader" signature="(System.Type,System.String,System.Reflection.BindingFlags)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="compilePropGetterFunc" signature="(System.Reflection.PropertyInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="compileRecordOrUnionCaseReaderFunc" signature="(System.Type,System.Reflection.PropertyInfo[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="compileRecordConstructorFunc" signature="(System.Reflection.ConstructorInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="compileUnionCaseConstructorFunc" signature="(System.Reflection.MethodInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="compileUnionTagReaderFunc" signature="(Microsoft.FSharp.Core.FSharpChoice`2&lt;System.Reflection.MethodInfo,System.Reflection.PropertyInfo&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="tryFindCompilationMappingAttribute" signature="(System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="findCompilationMappingAttribute" signature="(System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="tryFindCompilationMappingAttributeFromData$cont@183" signature="(System.Collections.Generic.IList`1&lt;System.Reflection.CustomAttributeData&gt;,Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="tryFindCompilationMappingAttributeFromData" signature="(System.Collections.Generic.IList`1&lt;System.Reflection.CustomAttributeData&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="findCompilationMappingAttributeFromData" signature="(System.Collections.Generic.IList`1&lt;System.Reflection.CustomAttributeData&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="tryFindCompilationMappingAttributeFromType" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="tryFindCompilationMappingAttributeFromMemberInfo" signature="(System.Reflection.MemberInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="findCompilationMappingAttributeFromMemberInfo" signature="(System.Reflection.MemberInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="isFieldProperty" signature="(System.Reflection.PropertyInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="tryFindSourceConstructFlagsOfType" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="getUnionTypeTagNameMap$cont@261" signature="(System.Type,System.Reflection.MethodInfo,System.Int32,Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="getUnionTypeTagNameMap" signature="(System.Type,System.Reflection.BindingFlags)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="getUnionCaseTyp" signature="(System.Type,System.Int32,System.Reflection.BindingFlags)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="getUnionTagConverter" signature="(System.Type,System.Reflection.BindingFlags)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="isUnionType" signature="(System.Type,System.Reflection.BindingFlags)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="get@327-1" signature="(System.Reflection.BindingFlags,System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="isConstructorRepr" signature="(System.Type,System.Reflection.BindingFlags)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="get@331-2" signature="(System.Reflection.BindingFlags,System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="unionTypeOfUnionCaseType" signature="(System.Type,System.Reflection.BindingFlags)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="fieldsPropsOfUnionCase" signature="(System.Type,System.Int32,System.Reflection.BindingFlags)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="getUnionCaseRecordReader" signature="(System.Type,System.Int32,System.Reflection.BindingFlags)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="getUnionCaseRecordReaderCompiled" signature="(System.Type,System.Int32,System.Reflection.BindingFlags)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="getUnionTagReader" signature="(System.Type,System.Reflection.BindingFlags)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="getUnionTagReaderCompiled" signature="(System.Type,System.Reflection.BindingFlags)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="getUnionTagMemberInfo" signature="(System.Type,System.Reflection.BindingFlags)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="getUnionCaseConstructorMethod" signature="(System.Type,System.Int32,System.Reflection.BindingFlags)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="getUnionCaseConstructor" signature="(System.Type,System.Int32,System.Reflection.BindingFlags)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="getUnionCaseConstructorCompiled" signature="(System.Type,System.Int32,System.Reflection.BindingFlags)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="checkUnionType" signature="(System.Type,System.Reflection.BindingFlags)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="tupleFullName@491" signature="(System.Boolean,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="action@4737-3" signature="(System.Reflection.Assembly,System.Collections.Generic.Dictionary`2&lt;System.Reflection.Assembly,System.Type[]&gt;,Microsoft.FSharp.Core.FSharpRef`1&lt;System.Type[]&gt;,Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="makeIt@490" signature="(System.Boolean,System.Reflection.Assembly,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="mkTupleType" signature="(System.Boolean,System.Reflection.Assembly,System.Type[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="getTupleTypeInfo" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="orderTupleProperties" signature="(System.Reflection.PropertyInfo[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="orderTupleFields" signature="(System.Reflection.FieldInfo[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="getTupleConstructorMethod" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="getTupleCtor" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="getTupleReader" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="getTupleConstructor" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="getTupleConstructorInfo" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="get@652-3" signature="(System.Type,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="getTupleReaderInfo" signature="(System.Type,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="getFunctionTypeInfo" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="isModuleType" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="isClosureRepr" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="isRecordType" signature="(System.Type,System.Reflection.BindingFlags)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="getRecordReader" signature="(System.Type,System.Reflection.BindingFlags)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="getRecordReaderCompiled" signature="(System.Type,System.Reflection.BindingFlags)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="getRecordConstructorMethod" signature="(System.Type,System.Reflection.BindingFlags)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="getRecordConstructor" signature="(System.Type,System.Reflection.BindingFlags)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="getRecordConstructorCompiled" signature="(System.Type,System.Reflection.BindingFlags)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="isExceptionRepr" signature="(System.Type,System.Reflection.BindingFlags)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="get@745-4" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="getTypeOfReprType" signature="(System.Type,System.Reflection.BindingFlags)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="checkExnType" signature="(System.Type,System.Reflection.BindingFlags)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="checkRecordType" signature="(System.String,System.Type,System.Reflection.BindingFlags)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="checkTupleType" signature="(System.String,System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Reflection.PropertyInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Reflection.FieldInfo,System.Reflection.FieldInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Reflection.MethodInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Tuple`2&lt;System.Int32,System.String&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Reflection.PropertyInfo,System.Reflection.PropertyInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Reflection.PropertyInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Reflection.PropertyInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(a)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Reflection.PropertyInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Reflection.FieldInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Reflection.PropertyInfo,System.Reflection.PropertyInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Reflection.PropertyInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(a)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Reflection.ReflectionUtils" filename="F:\workspace\_work\1\s\src\fsharp\FSharp.Core\reflect.fs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="toBindingFlags" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Reflection.UnionCaseInfo" filename="F:\workspace\_work\1\s\src\fsharp\FSharp.Core\reflect.fs" line-rate="1" branch-rate="1" complexity="6">
          <methods>
            <method name=".ctor" signature="(System.Type,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Name" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DeclaringType" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetFields" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="GetCustomAttributes" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="GetCustomAttributes" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetCustomAttributesData" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Tag" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToString" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="GetHashCode" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Equals" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="getMethInfo" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Text.StructuredPrintfImpl.Display" filename="F:\workspace\_work\1\s\src\fsharp\FSharp.Core\array.fs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="mapping@259-1" signature="(Microsoft.FSharp.Text.StructuredPrintfImpl.Display/ObjectGraphFormatter,System.Type,System.Object,System.Int32,System.Reflection.MemberInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Text.StructuredPrintfImpl.Display" filename="F:\workspace\_work\1\s\src\utils\sformat.fs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name="typeUsesSystemObjectToString" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="catchExn" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;Microsoft.FSharp.Core.Unit,a&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="initializer@41-1" signature="(System.Int32[],System.Int32,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="pushBreak" signature="(System.Int32,Microsoft.FSharp.Text.StructuredPrintfImpl.Display/Breaks)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="popBreak" signature="(Microsoft.FSharp.Text.StructuredPrintfImpl.Display/Breaks)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="forceBreak" signature="(Microsoft.FSharp.Text.StructuredPrintfImpl.Display/Breaks)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="fitLeaf@563" signature="(System.Int32,Microsoft.FSharp.Text.StructuredPrintfImpl.Layout,System.Int32,Microsoft.FSharp.Text.StructuredPrintfImpl.Display/Breaks,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="fit@539" signature="(System.Int32,Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Object,Microsoft.FSharp.Text.StructuredPrintfImpl.TaggedText&gt;,Microsoft.FSharp.Text.StructuredPrintfImpl.Display/Breaks,System.Int32,Microsoft.FSharp.Text.StructuredPrintfImpl.Layout)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="squashToAux" signature="(System.Int32,Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Object,Microsoft.FSharp.Text.StructuredPrintfImpl.TaggedText&gt;,Microsoft.FSharp.Text.StructuredPrintfImpl.Layout)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="addL@633" signature="(Microsoft.FSharp.Text.StructuredPrintfImpl.FormatOptions,Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Object,System.String&gt;,System.Tuple`2&lt;Microsoft.FSharp.Collections.FSharpList`1&lt;System.String&gt;,System.Int32&gt;,System.Int32,Microsoft.FSharp.Text.StructuredPrintfImpl.Layout)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="newLine@626" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;System.String&gt;,a,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="addText@623" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;System.String&gt;,System.Int32,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="showL" signature="(Microsoft.FSharp.Text.StructuredPrintfImpl.FormatOptions,Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Object,System.String&gt;,Microsoft.FSharp.Text.StructuredPrintfImpl.Layout)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="addL@678-1" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;System.String,Microsoft.FSharp.Core.FSharpFunc`2&lt;Microsoft.FSharp.Collections.FSharpList`1&lt;System.Tuple`2&lt;System.String,System.String&gt;&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Boolean,a&gt;&gt;&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Object,b&gt;,Microsoft.FSharp.Text.StructuredPrintfImpl.TaggedTextWriter,System.Int32,System.Int32,Microsoft.FSharp.Text.StructuredPrintfImpl.Layout)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="newLine@671-1" signature="(Microsoft.FSharp.Text.StructuredPrintfImpl.TaggedTextWriter,c,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="addText@670-1" signature="(Microsoft.FSharp.Text.StructuredPrintfImpl.TaggedTextWriter,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="outL" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;System.String,Microsoft.FSharp.Core.FSharpFunc`2&lt;Microsoft.FSharp.Collections.FSharpList`1&lt;System.Tuple`2&lt;System.String,System.String&gt;&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Boolean,a&gt;&gt;&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;System.Object,b&gt;,Microsoft.FSharp.Text.StructuredPrintfImpl.TaggedTextWriter,Microsoft.FSharp.Text.StructuredPrintfImpl.Layout)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="unpackCons" signature="(System.Tuple`2&lt;a,b&gt;[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="getListValueInfo" signature="(System.Reflection.BindingFlags,System.Object,System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="itemL@727" signature="(Microsoft.FSharp.Text.StructuredPrintfImpl.TaggedText,Microsoft.FSharp.Text.StructuredPrintfImpl.Layout)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="makeRecordL" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;System.Tuple`2&lt;a,Microsoft.FSharp.Text.StructuredPrintfImpl.Layout&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="itemL@736-1" signature="(Microsoft.FSharp.Text.StructuredPrintfImpl.TaggedText,Microsoft.FSharp.Core.FSharpOption`1&lt;Microsoft.FSharp.Text.StructuredPrintfImpl.Layout&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="makePropertiesL" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;System.Tuple`2&lt;a,Microsoft.FSharp.Core.FSharpOption`1&lt;Microsoft.FSharp.Text.StructuredPrintfImpl.Layout&gt;&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="makeListL" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;Microsoft.FSharp.Text.StructuredPrintfImpl.Layout&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="makeArrayL" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;Microsoft.FSharp.Text.StructuredPrintfImpl.Layout&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="makeArray2L" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;Microsoft.FSharp.Text.StructuredPrintfImpl.Layout&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="formatChar" signature="(System.Boolean,System.Char)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="conv@779" signature="(System.String,System.Int32,Microsoft.FSharp.Collections.FSharpList`1&lt;System.String&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="formatString" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="clo0@1216" signature="(Microsoft.FSharp.Text.StructuredPrintfImpl.Display/ObjectGraphFormatter,Microsoft.FSharp.Text.StructuredPrintfImpl.Display/ShowMode)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="buildObjMessageL@892" signature="(Microsoft.FSharp.Text.StructuredPrintfImpl.Display/ObjectGraphFormatter,Microsoft.FSharp.Text.StructuredPrintfImpl.Display/ShowMode,System.Type,System.Int32,System.Object,System.String,Microsoft.FSharp.Collections.FSharpList`1&lt;Microsoft.FSharp.Text.StructuredPrintfImpl.Layout&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="clo0@980-2" signature="(Microsoft.FSharp.Text.StructuredPrintfImpl.Display/ObjectGraphFormatter,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="clo0@979-1" signature="(Microsoft.FSharp.Text.StructuredPrintfImpl.Display/ObjectGraphFormatter,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="clo0@986-3" signature="(Microsoft.FSharp.Text.StructuredPrintfImpl.Display/ObjectGraphFormatter,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="clo0@995-4" signature="(Microsoft.FSharp.Text.StructuredPrintfImpl.Display/ObjectGraphFormatter,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="itemL@993-2" signature="(Microsoft.FSharp.Text.StructuredPrintfImpl.Display/ObjectGraphFormatter,System.Int32,System.Tuple`3&lt;System.String,a,System.Type&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="project@1002" signature="(Microsoft.FSharp.Text.StructuredPrintfImpl.Display/ObjectGraphFormatter)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="project2@1063" signature="(System.Array,System.Type,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="clo0@1084-6" signature="(Microsoft.FSharp.Text.StructuredPrintfImpl.Display/ObjectGraphFormatter,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="clo0@1081-5" signature="(Microsoft.FSharp.Text.StructuredPrintfImpl.Display/ObjectGraphFormatter,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="possibleKeyValueL@1075" signature="(Microsoft.FSharp.Text.StructuredPrintfImpl.Display/ObjectGraphFormatter,System.Int32,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="leafFormatter" signature="(Microsoft.FSharp.Text.StructuredPrintfImpl.FormatOptions,System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="squash_layout" signature="(Microsoft.FSharp.Text.StructuredPrintfImpl.FormatOptions,Microsoft.FSharp.Text.StructuredPrintfImpl.Layout)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="layout_to_string" signature="(Microsoft.FSharp.Text.StructuredPrintfImpl.FormatOptions,Microsoft.FSharp.Text.StructuredPrintfImpl.Layout)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="anyToStringForPrintf" signature="(Microsoft.FSharp.Text.StructuredPrintfImpl.FormatOptions,System.Reflection.BindingFlags,T,System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Text.StructuredPrintfImpl.TaggedText)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(b)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Tuple`2&lt;a,Microsoft.FSharp.Text.StructuredPrintfImpl.Layout&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Tuple`2&lt;a,Microsoft.FSharp.Core.FSharpOption`1&lt;Microsoft.FSharp.Text.StructuredPrintfImpl.Layout&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(Microsoft.FSharp.Text.StructuredPrintfImpl.FormatOptions,System.Reflection.BindingFlags)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="exceededPrintSize" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="countNodes" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="stopShort" signature="(a)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="nestedObjL" signature="(System.Int32,Microsoft.FSharp.Text.StructuredPrintfImpl.Display/Precedence,System.Object,System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="objL" signature="(Microsoft.FSharp.Text.StructuredPrintfImpl.Display/ShowMode,System.Int32,Microsoft.FSharp.Text.StructuredPrintfImpl.Display/Precedence,System.Object,System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="structuredFormatObjectL" signature="(Microsoft.FSharp.Text.StructuredPrintfImpl.Display/ShowMode,System.Type,System.Int32,Microsoft.FSharp.Core.StructuredFormatDisplayAttribute,System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="recdAtomicTupleL" signature="(System.Int32,Microsoft.FSharp.Collections.FSharpList`1&lt;System.Tuple`2&lt;a,System.Tuple`2&lt;b,c&gt;&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="bracketIfL" signature="(System.Boolean,Microsoft.FSharp.Text.StructuredPrintfImpl.Layout)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="tupleValueL" signature="(System.Int32,Microsoft.FSharp.Text.StructuredPrintfImpl.Display/Precedence,System.Tuple`2&lt;d,e&gt;[],Microsoft.FSharp.Text.StructuredPrintfImpl.ReflectUtils/TupleType)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="recordValueL" signature="(System.Int32,Microsoft.FSharp.Collections.FSharpList`1&lt;System.Tuple`3&lt;System.String,f,g&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="listValueL" signature="(System.Int32,System.String,System.Tuple`2&lt;h,System.Tuple`2&lt;System.Object,System.Type&gt;&gt;[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="unionCaseValueL" signature="(System.Int32,Microsoft.FSharp.Text.StructuredPrintfImpl.Display/Precedence,System.String,Microsoft.FSharp.Collections.FSharpList`1&lt;System.Tuple`2&lt;i,System.Tuple`2&lt;j,k&gt;&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="fsharpExceptionL" signature="(System.Int32,Microsoft.FSharp.Text.StructuredPrintfImpl.Display/Precedence,System.Type,Microsoft.FSharp.Collections.FSharpList`1&lt;System.Tuple`2&lt;l,System.Tuple`2&lt;m,n&gt;&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="showModeFilter" signature="(Microsoft.FSharp.Text.StructuredPrintfImpl.Display/ShowMode,Microsoft.FSharp.Text.StructuredPrintfImpl.Layout)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="functionClosureL" signature="(Microsoft.FSharp.Text.StructuredPrintfImpl.Display/ShowMode,System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="stringValueL" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="arrayValueL" signature="(System.Int32,System.Array)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="mapSetValueL" signature="(System.Int32,Microsoft.FSharp.Text.StructuredPrintfImpl.Display/Precedence,System.Type,System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="sequenceValueL" signature="(Microsoft.FSharp.Text.StructuredPrintfImpl.Display/ShowMode,System.Int32,Microsoft.FSharp.Text.StructuredPrintfImpl.Display/Precedence,System.Collections.IEnumerable)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="objectValueWithPropertiesL" signature="(System.Int32,System.Type,System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="reprL" signature="(Microsoft.FSharp.Text.StructuredPrintfImpl.Display/ShowMode,System.Int32,Microsoft.FSharp.Text.StructuredPrintfImpl.Display/Precedence,Microsoft.FSharp.Text.StructuredPrintfImpl.ReflectUtils/ValueInfo,System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Tuple`2&lt;a,System.Type&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Text.StructuredPrintfImpl.Display/Precedence)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Text.StructuredPrintfImpl.Display/ShowMode)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Int32,Microsoft.FSharp.Text.StructuredPrintfImpl.Display/Precedence,System.Tuple`2&lt;System.Object,System.Type&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Tuple`2&lt;b,c&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Text.StructuredPrintfImpl.Display/Precedence)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Tuple`2&lt;b,c&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Text.StructuredPrintfImpl.Display/Precedence)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Tuple`2&lt;a,System.Tuple`2&lt;b,c&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Text.StructuredPrintfImpl.Display/Precedence,System.Tuple`2&lt;System.Object,System.Type&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Text.StructuredPrintfImpl.Display/Precedence,System.Tuple`2&lt;System.Object,System.Type&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Tuple`2&lt;d,e&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Text.StructuredPrintfImpl.Display/Precedence)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Text.StructuredPrintfImpl.Display/Precedence,System.Tuple`2&lt;System.Object,System.Type&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Tuple`3&lt;System.String,a,System.Type&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Tuple`3&lt;System.String,f,g&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Tuple`2&lt;a,System.Type&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Text.StructuredPrintfImpl.Display/Precedence)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Text.StructuredPrintfImpl.Display/Precedence,System.Tuple`2&lt;System.Object,System.Type&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Tuple`2&lt;System.Object,System.Type&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Tuple`2&lt;a,System.Type&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Tuple`2&lt;System.Object,System.Type&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Tuple`2&lt;System.Object,System.Type&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Tuple`2&lt;System.Tuple`2&lt;System.Object,System.Object&gt;,System.Type&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Text.StructuredPrintfImpl.Display/Precedence)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Tuple`2&lt;o,System.Type&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Text.StructuredPrintfImpl.Display/Precedence)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(o)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Text.StructuredPrintfImpl.Display/Precedence,System.Tuple`2&lt;System.Object,System.Type&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Text.StructuredPrintfImpl.Display/Precedence,System.Tuple`2&lt;System.Object,System.Type&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Tuple`2&lt;System.Object,System.Type&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Reflection.MemberInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="System.Collections.Generic.IComparer&lt;System.Reflection.MemberInfo&gt;.Compare" signature="(System.Reflection.MemberInfo,System.Reflection.MemberInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Text.StructuredPrintfImpl.FormatOptions" filename="F:\workspace\_work\1\s\src\utils\sformat.fs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Default" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.String,Microsoft.FSharp.Collections.FSharpList`1&lt;System.Tuple`2&lt;System.String,System.String&gt;&gt;,System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Text.StructuredPrintfImpl.Layout" filename="F:\workspace\_work\1\s\src\utils\sformat.fs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="JuxtapositionLeft" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="JuxtapositionRight" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Text.StructuredPrintfImpl.LayoutOps" filename="F:\workspace\_work\1\s\src\utils\sformat.fs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="objL" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="wordL" signature="(Microsoft.FSharp.Text.StructuredPrintfImpl.TaggedText)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="sepL" signature="(Microsoft.FSharp.Text.StructuredPrintfImpl.TaggedText)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="rightL" signature="(Microsoft.FSharp.Text.StructuredPrintfImpl.TaggedText)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="leftL" signature="(Microsoft.FSharp.Text.StructuredPrintfImpl.TaggedText)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="isEmptyL" signature="(Microsoft.FSharp.Text.StructuredPrintfImpl.Layout)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="aboveL" signature="(Microsoft.FSharp.Text.StructuredPrintfImpl.Layout,Microsoft.FSharp.Text.StructuredPrintfImpl.Layout)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="tagAttrL" signature="(System.String,Microsoft.FSharp.Collections.FSharpList`1&lt;System.Tuple`2&lt;System.String,System.String&gt;&gt;,Microsoft.FSharp.Text.StructuredPrintfImpl.Layout)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="apply2" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;Microsoft.FSharp.Text.StructuredPrintfImpl.Layout,Microsoft.FSharp.Core.FSharpFunc`2&lt;Microsoft.FSharp.Text.StructuredPrintfImpl.Layout,Microsoft.FSharp.Text.StructuredPrintfImpl.Layout&gt;&gt;,Microsoft.FSharp.Text.StructuredPrintfImpl.Layout,Microsoft.FSharp.Text.StructuredPrintfImpl.Layout)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="op_HatHat" signature="(Microsoft.FSharp.Text.StructuredPrintfImpl.Layout,Microsoft.FSharp.Text.StructuredPrintfImpl.Layout)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="op_PlusPlus" signature="(Microsoft.FSharp.Text.StructuredPrintfImpl.Layout,Microsoft.FSharp.Text.StructuredPrintfImpl.Layout)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="op_MinusMinus" signature="(Microsoft.FSharp.Text.StructuredPrintfImpl.Layout,Microsoft.FSharp.Text.StructuredPrintfImpl.Layout)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="op_MinusMinusMinus" signature="(Microsoft.FSharp.Text.StructuredPrintfImpl.Layout,Microsoft.FSharp.Text.StructuredPrintfImpl.Layout)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="op_AtAt" signature="(Microsoft.FSharp.Text.StructuredPrintfImpl.Layout,Microsoft.FSharp.Text.StructuredPrintfImpl.Layout)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="op_AtAtMinus" signature="(Microsoft.FSharp.Text.StructuredPrintfImpl.Layout,Microsoft.FSharp.Text.StructuredPrintfImpl.Layout)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="op_AtAtMinusMinus" signature="(Microsoft.FSharp.Text.StructuredPrintfImpl.Layout,Microsoft.FSharp.Text.StructuredPrintfImpl.Layout)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="process'@262" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;Microsoft.FSharp.Text.StructuredPrintfImpl.Layout,Microsoft.FSharp.Text.StructuredPrintfImpl.Layout&gt;,Microsoft.FSharp.Text.StructuredPrintfImpl.Layout,Microsoft.FSharp.Collections.FSharpList`1&lt;Microsoft.FSharp.Text.StructuredPrintfImpl.Layout&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="tagListL" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;Microsoft.FSharp.Text.StructuredPrintfImpl.Layout,Microsoft.FSharp.Text.StructuredPrintfImpl.Layout&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;Microsoft.FSharp.Text.StructuredPrintfImpl.Layout&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="commaListL" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;Microsoft.FSharp.Text.StructuredPrintfImpl.Layout&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="semiListL" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;Microsoft.FSharp.Text.StructuredPrintfImpl.Layout&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="spaceListL" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;Microsoft.FSharp.Text.StructuredPrintfImpl.Layout&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="sepListL" signature="(Microsoft.FSharp.Text.StructuredPrintfImpl.Layout,Microsoft.FSharp.Collections.FSharpList`1&lt;Microsoft.FSharp.Text.StructuredPrintfImpl.Layout&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="bracketL" signature="(Microsoft.FSharp.Text.StructuredPrintfImpl.Layout)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="tupleL" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;Microsoft.FSharp.Text.StructuredPrintfImpl.Layout&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="aboveListL" signature="(Microsoft.FSharp.Collections.FSharpList`1&lt;Microsoft.FSharp.Text.StructuredPrintfImpl.Layout&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="optionL" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,Microsoft.FSharp.Text.StructuredPrintfImpl.Layout&gt;,Microsoft.FSharp.Core.FSharpOption`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="listL" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,Microsoft.FSharp.Text.StructuredPrintfImpl.Layout&gt;,Microsoft.FSharp.Collections.FSharpList`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="squareBracketL" signature="(Microsoft.FSharp.Text.StructuredPrintfImpl.Layout)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="braceL" signature="(Microsoft.FSharp.Text.StructuredPrintfImpl.Layout)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="consume@307" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;a,Microsoft.FSharp.Text.StructuredPrintfImpl.Layout&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;z,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Tuple`2&lt;a,z&gt;&gt;&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;z,System.Boolean&gt;,System.Int32,z)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="boundedUnfoldL" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;a,Microsoft.FSharp.Text.StructuredPrintfImpl.Layout&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;z,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Tuple`2&lt;a,z&gt;&gt;&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;z,System.Boolean&gt;,z,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="unfoldL" signature="(Microsoft.FSharp.Core.FSharpFunc`2&lt;T,Microsoft.FSharp.Text.StructuredPrintfImpl.Layout&gt;,Microsoft.FSharp.Core.FSharpFunc`2&lt;TState,Microsoft.FSharp.Core.FSharpOption`1&lt;System.Tuple`2&lt;T,TState&gt;&gt;&gt;,TState,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Text.StructuredPrintfImpl.Layout,Microsoft.FSharp.Text.StructuredPrintfImpl.Layout)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Text.StructuredPrintfImpl.Layout,Microsoft.FSharp.Text.StructuredPrintfImpl.Layout)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Text.StructuredPrintfImpl.Layout,Microsoft.FSharp.Text.StructuredPrintfImpl.Layout)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Text.StructuredPrintfImpl.Layout)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Text.StructuredPrintfImpl.Layout)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Text.StructuredPrintfImpl.Layout)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Text.StructuredPrintfImpl.Layout)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Text.StructuredPrintfImpl.Layout,Microsoft.FSharp.Text.StructuredPrintfImpl.Layout)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(TState)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Text.StructuredPrintfImpl.ReflectUtils" filename="F:\workspace\_work\1\s\src\utils\sformat.fs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="equivHeadTypes" signature="(System.Type,System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="mapping@259" signature="(System.Object,System.Reflection.PropertyInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetValueInfoOfObject$cont@433" signature="(System.Reflection.BindingFlags,System.Object,System.Type,Microsoft.FSharp.Core.Unit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetValueInfoOfObject" signature="(System.Reflection.BindingFlags,System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetValueInfo" signature="(System.Reflection.BindingFlags,a,System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Int32,System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Reflection.PropertyInfo,System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(System.Reflection.PropertyInfo,System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invoke" signature="(Microsoft.FSharp.Reflection.UnionCaseInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Microsoft.FSharp.Text.StructuredPrintfImpl.TaggedTextOps" filename="F:\workspace\_work\1\s\src\utils\sformat.fs" line-rate="1" branch-rate="1" complexity="2">
          <methods>
            <method name="mkTag" signature="(Microsoft.FSharp.Text.StructuredPrintfImpl.LayoutTag,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="tagAlias" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="tagClass" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="tagUnionCase" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="tagDelegate" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="tagEnum" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="tagEvent" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="tagField" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="tagInterface" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="tagKeyword" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="tagLineBreak" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="tagLocal" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="tagRecord" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="tagRecordField" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="tagMethod" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="tagModule" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="tagModuleBinding" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="tagNamespace" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="tagNumericLiteral" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="tagOperator" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="tagParameter" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="tagProperty" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="tagSpace" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="tagStringLiteral" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="tagStruct" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="tagTypeParameter" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="tagText" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="tagPunctuation" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Microsoft.FSharp.Text.StructuredPrintfImpl.TaggedText.get_Tag" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Microsoft.FSharp.Text.StructuredPrintfImpl.TaggedText.get_Text" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
      </classes>
    </package>
    <package name="Interop.FSharp" line-rate="1" branch-rate="1" complexity="1">
      <classes>
        <class name="Interop.FSharp.Functions" filename="/home/runner/work/study-langext-monad/study-langext-monad/src/Types/Library.fs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="hello" signature="(a)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines>
                <line number="6" hits="1" branch="false" />
              </lines>
            </method>
          </methods>
          <lines>
            <line number="6" hits="1" branch="false" />
          </lines>
        </class>
      </classes>
    </package>
    <package name="Spekt.TestLogger" line-rate="0" branch-rate="0" complexity="140">
      <classes>
        <class name="Spekt.TestLogger.Core.LoggerConfiguration" filename="/home/runner/work/testlogger/testlogger/src/TestLogger/Core/LoggerConfiguration.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.Collections.Generic.Dictionary`2&lt;System.String,System.String&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="LogFilePath" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetFormattedLogFilePath" signature="(Spekt.TestLogger.Core.TestRunConfiguration)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Spekt.TestLogger.Core.TestCaseNameParser" filename="/home/runner/work/testlogger/testlogger/src/TestLogger/Core/TestCaseNameParser.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Parse" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.String,System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Spekt.TestLogger.Core.TestResultInfo" filename="/home/runner/work/testlogger/testlogger/src/TestLogger/Core/TestResultInfo.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name=".ctor" signature="(Microsoft.VisualStudio.TestPlatform.ObjectModel.TestResult,System.String,System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TestCase" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AssemblyPath" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FullTypeName" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="StartTime" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="EndTime" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Duration" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ErrorMessage" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ErrorStackTrace" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Messages" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Traits" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Result" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetHashCode" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Equals" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Spekt.TestLogger.Core.TestResultStore" filename="/home/runner/work/testlogger/testlogger/src/TestLogger/Core/TestResultStore.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Add" signature="(Spekt.TestLogger.Core.TestResultInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Add" signature="(Spekt.TestLogger.Core.TestMessageInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Pop" signature="(System.Collections.Generic.List`1&lt;Spekt.TestLogger.Core.TestResultInfo&gt;&amp;,System.Collections.Generic.List`1&lt;Spekt.TestLogger.Core.TestMessageInfo&gt;&amp;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Spekt.TestLogger.Core.TestRunBuilder" filename="/home/runner/work/testlogger/testlogger/src/TestLogger/Core/TestRunBuilder.cs" line-rate="1" branch-rate="1" complexity="2">
          <methods>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="WithLoggerConfiguration" signature="(Spekt.TestLogger.Core.LoggerConfiguration)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="WithStore" signature="(Spekt.TestLogger.Core.ITestResultStore)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="WithSerializer" signature="(Spekt.TestLogger.Core.ITestResultSerializer)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Subscribe" signature="(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestLoggerEvents)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="WithFileSystem" signature="(Spekt.TestLogger.Platform.IFileSystem)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="WithConsoleOutput" signature="(Spekt.TestLogger.Platform.IConsoleOutput)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Build" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Spekt.TestLogger.Core.TestRunCompleteWorkflow" filename="/home/runner/work/testlogger/testlogger/src/TestLogger/Core/TestRunCompleteWorkflow.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Complete" signature="(Spekt.TestLogger.Core.ITestRun,Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunCompleteEventArgs)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CreateResultsDirectory" signature="(Spekt.TestLogger.Platform.IFileSystem,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Spekt.TestLogger.Core.TestRunMessageWorkflow" filename="/home/runner/work/testlogger/testlogger/src/TestLogger/Core/TestRunMessageWorkflow.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Message" signature="(Spekt.TestLogger.Core.ITestRun,Microsoft.VisualStudio.TestPlatform.ObjectModel.Logging.TestRunMessageEventArgs)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Spekt.TestLogger.Core.TestRunResultWorkflow" filename="/home/runner/work/testlogger/testlogger/src/TestLogger/Core/TestRunResultWorkflow.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Result" signature="(Spekt.TestLogger.Core.ITestRun,Microsoft.VisualStudio.TestPlatform.ObjectModel.Logging.TestResultEventArgs)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Spekt.TestLogger.Core.TestRunStartWorkflow" filename="/home/runner/work/testlogger/testlogger/src/TestLogger/Core/TestRunStartWorkflow.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Start" signature="(Spekt.TestLogger.Core.ITestRun,Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunStartEventArgs)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Spekt.TestLogger.Extensions.DefaultTestAdapter" filename="/home/runner/work/testlogger/testlogger/src/TestLogger/Extensions/DefaultTestAdapter.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="TransformResults" signature="(System.Collections.Generic.List`1&lt;Spekt.TestLogger.Core.TestResultInfo&gt;,System.Collections.Generic.List`1&lt;Spekt.TestLogger.Core.TestMessageInfo&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Spekt.TestLogger.Extensions.MSTestAdapter" filename="/home/runner/work/testlogger/testlogger/src/TestLogger/Extensions/MSTestAdapter.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="TransformResults" signature="(System.Collections.Generic.List`1&lt;Spekt.TestLogger.Core.TestResultInfo&gt;,System.Collections.Generic.List`1&lt;Spekt.TestLogger.Core.TestMessageInfo&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Spekt.TestLogger.Extensions.NUnitTestAdapter" filename="/home/runner/work/testlogger/testlogger/src/TestLogger/Extensions/NUnitTestAdapter.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="TransformResults" signature="(System.Collections.Generic.List`1&lt;Spekt.TestLogger.Core.TestResultInfo&gt;,System.Collections.Generic.List`1&lt;Spekt.TestLogger.Core.TestMessageInfo&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Spekt.TestLogger.Extensions.TestAdapterFactory" filename="/home/runner/work/testlogger/testlogger/src/TestLogger/Extensions/TestAdapterFactory.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="CreateTestAdapter" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Spekt.TestLogger.Extensions.XunitTestAdapter" filename="/home/runner/work/testlogger/testlogger/src/TestLogger/Extensions/XunitTestAdapter.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="TransformResults" signature="(System.Collections.Generic.List`1&lt;Spekt.TestLogger.Core.TestResultInfo&gt;,System.Collections.Generic.List`1&lt;Spekt.TestLogger.Core.TestMessageInfo&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Spekt.TestLogger.Platform.ConsoleOutput" filename="/home/runner/work/testlogger/testlogger/src/TestLogger/Platform/ConsoleOutput.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="WriteMessage" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="WriteError" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Spekt.TestLogger.Platform.FileSystem" filename="/home/runner/work/testlogger/testlogger/src/TestLogger/Platform/FileSystem.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="CreateDirectory" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExistsDirectory" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="RemoveDirectory" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Read" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Write" signature="(System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Delete" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Spekt.TestLogger.TestLogger" filename="/home/runner/work/testlogger/testlogger/src/TestLogger/TestLogger.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(Spekt.TestLogger.Core.ITestResultSerializer)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(Spekt.TestLogger.Platform.IFileSystem,Spekt.TestLogger.Platform.IConsoleOutput,Spekt.TestLogger.Core.ITestResultStore,Spekt.TestLogger.Core.ITestResultSerializer)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Initialize" signature="(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestLoggerEvents,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Initialize" signature="(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestLoggerEvents,System.Collections.Generic.Dictionary`2&lt;System.String,System.String&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CreateTestRun" signature="(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestLoggerEvents,Spekt.TestLogger.Core.LoggerConfiguration)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Spekt.TestLogger.Utilities.StringExtensions" filename="/home/runner/work/testlogger/testlogger/src/TestLogger/Utilities/StringExtensions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="ReplaceInvalidXmlChar" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SubstringAfterDot" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SubstringBeforeDot" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ReplaceInvalidCharacterWithUniCodeEscapeSequence" signature="(System.Text.RegularExpressions.Match)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
      </classes>
    </package>
  </packages>
</coverage>